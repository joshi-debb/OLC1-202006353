
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pkgLibs;

import pkgProject.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class testSintact extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public testSintact() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public testSintact(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public testSintact(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\054\002\000\002\002" +
    "\006\000\002\004\004\000\002\004\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\046\003\000\002\046\003\000\002\042\003\000\002\042" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\017\005\000\002\017\005\000\002\016\003\000" +
    "\002\016\003\000\002\024\005\000\002\023\003\000\002" +
    "\023\005\000\002\047\013\000\002\047\015\000\002\031" +
    "\004\000\002\031\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\052\011\000\002\051\004\000\002\051\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\044\007\000\002\033\003\000\002\033\004" +
    "\000\002\032\006\000\002\032\005\000\002\034\005\000" +
    "\002\043\011\000\002\043\007\000\002\043\012\000\002" +
    "\043\014\000\002\026\003\000\002\026\005\000\002\026" +
    "\005\000\002\026\004\000\002\026\004\000\002\013\006" +
    "\000\002\013\005\000\002\014\011\000\002\014\010\000" +
    "\002\010\004\000\002\010\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\007\000\002\022\011\000" +
    "\002\022\005\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\005\011" +
    "\000\002\005\012\000\002\005\011\000\002\005\012\000" +
    "\002\005\011\000\002\005\011\000\002\005\011\000\002" +
    "\005\011\000\002\005\011\000\002\005\011\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\021\005\000\002\021\003\000\002" +
    "\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\034\004\001\002\000\030\013\017\036" +
    "\012\041\031\046\011\050\016\055\035\061\027\070\015" +
    "\071\007\102\034\103\022\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\010\007\234\013\231" +
    "\113\232\001\002\000\032\013\ufffc\035\ufffc\036\ufffc\041" +
    "\ufffc\046\ufffc\050\ufffc\055\ufffc\061\ufffc\070\ufffc\071\ufffc" +
    "\102\ufffc\103\ufffc\001\002\000\010\005\063\006\062\013" +
    "\057\001\002\000\004\013\241\001\002\000\032\013\017" +
    "\035\000\036\012\041\031\046\011\050\016\055\035\061" +
    "\027\070\015\071\007\102\034\103\022\001\002\000\046" +
    "\013\ufff1\035\ufff1\036\ufff1\041\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1\061\ufff1" +
    "\070\ufff1\071\ufff1\102\ufff1\103\ufff1\115\ufff1\001\002\000" +
    "\010\007\234\013\231\113\232\001\002\000\010\005\063" +
    "\006\062\013\057\001\002\000\006\072\uff8e\075\uff8e\001" +
    "\002\000\032\013\ufff8\035\ufff8\036\ufff8\041\ufff8\046\ufff8" +
    "\050\ufff8\055\ufff8\061\ufff8\070\ufff8\071\ufff8\102\ufff8\103" +
    "\ufff8\001\002\000\046\013\ufff0\035\ufff0\036\ufff0\041\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\054" +
    "\ufff0\055\ufff0\061\ufff0\070\ufff0\071\ufff0\102\ufff0\103\ufff0" +
    "\115\ufff0\001\002\000\050\013\uffeb\035\uffeb\036\uffeb\041" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\061\uffeb\070\uffeb\071\uffeb\102" +
    "\uffeb\103\uffeb\115\uffeb\001\002\000\032\013\ufff7\035\ufff7" +
    "\036\ufff7\041\ufff7\046\ufff7\050\ufff7\055\ufff7\061\ufff7\070" +
    "\ufff7\071\ufff7\102\ufff7\103\ufff7\001\002\000\050\013\ufff3" +
    "\035\ufff3\036\ufff3\041\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\054\ufff3\055\ufff3\056\ufff3\061\ufff3" +
    "\070\ufff3\071\ufff3\102\ufff3\103\ufff3\115\ufff3\001\002\000" +
    "\032\013\ufff9\035\ufff9\036\ufff9\041\ufff9\046\ufff9\050\ufff9" +
    "\055\ufff9\061\ufff9\070\ufff9\071\ufff9\102\ufff9\103\ufff9\001" +
    "\002\000\006\072\162\075\163\001\002\000\012\005\160" +
    "\006\157\013\154\113\155\001\002\000\046\013\uffef\035" +
    "\uffef\036\uffef\041\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\054\uffef\055\uffef\061\uffef\070\uffef\071" +
    "\uffef\102\uffef\103\uffef\115\uffef\001\002\000\012\005\063" +
    "\006\062\013\057\033\060\001\002\000\032\013\ufff6\035" +
    "\ufff6\036\ufff6\041\ufff6\046\ufff6\050\ufff6\055\ufff6\061\ufff6" +
    "\070\ufff6\071\ufff6\102\ufff6\103\ufff6\001\002\000\050\013" +
    "\ufff2\035\ufff2\036\ufff2\041\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\054\ufff2\055\ufff2\056\ufff2\061" +
    "\ufff2\070\ufff2\071\ufff2\102\ufff2\103\ufff2\115\ufff2\001\002" +
    "\000\050\013\uffec\035\uffec\036\uffec\041\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\054\uffec\055\uffec" +
    "\056\uffec\061\uffec\070\uffec\071\uffec\102\uffec\103\uffec\115" +
    "\uffec\001\002\000\004\015\041\001\002\000\032\013\ufffd" +
    "\035\ufffd\036\ufffd\041\ufffd\046\ufffd\050\ufffd\055\ufffd\061" +
    "\ufffd\070\ufffd\071\ufffd\102\ufffd\103\ufffd\001\002\000\032" +
    "\013\ufffa\035\ufffa\036\ufffa\041\ufffa\046\ufffa\050\ufffa\055" +
    "\ufffa\061\ufffa\070\ufffa\071\ufffa\102\ufffa\103\ufffa\001\002" +
    "\000\032\013\ufffb\035\ufffb\036\ufffb\041\ufffb\046\ufffb\050" +
    "\ufffb\055\ufffb\061\ufffb\070\ufffb\071\ufffb\102\ufffb\103\ufffb" +
    "\001\002\000\004\116\042\001\002\000\004\015\043\001" +
    "\002\000\004\052\044\001\002\000\022\013\017\036\012" +
    "\041\031\046\011\070\015\071\007\102\034\103\022\001" +
    "\002\000\044\013\ufff5\036\ufff5\041\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\070\ufff5\071\ufff5\102\ufff5\103\ufff5\115\ufff5\001\002" +
    "\000\024\013\uffdc\036\uffdc\041\uffdc\046\uffdc\056\uffdc\070" +
    "\uffdc\071\uffdc\102\uffdc\103\uffdc\001\002\000\024\013\uffd9" +
    "\036\uffd9\041\uffd9\046\uffd9\056\uffd9\070\uffd9\071\uffd9\102" +
    "\uffd9\103\uffd9\001\002\000\024\013\uffd8\036\uffd8\041\uffd8" +
    "\046\uffd8\056\uffd8\070\uffd8\071\uffd8\102\uffd8\103\uffd8\001" +
    "\002\000\024\013\uffdb\036\uffdb\041\uffdb\046\uffdb\056\uffdb" +
    "\070\uffdb\071\uffdb\102\uffdb\103\uffdb\001\002\000\024\013" +
    "\017\036\012\041\031\046\011\056\056\070\015\071\007" +
    "\102\034\103\022\001\002\000\024\013\uffda\036\uffda\041" +
    "\uffda\046\uffda\056\uffda\070\uffda\071\uffda\102\uffda\103\uffda" +
    "\001\002\000\044\013\ufff4\036\ufff4\041\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\070\ufff4\071\ufff4\102\ufff4\103\ufff4\115\ufff4\001" +
    "\002\000\024\013\uffdd\036\uffdd\041\uffdd\046\uffdd\056\uffdd" +
    "\070\uffdd\071\uffdd\102\uffdd\103\uffdd\001\002\000\046\013" +
    "\uffde\035\uffde\036\uffde\041\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\054\uffde\055\uffde\061\uffde\070" +
    "\uffde\071\uffde\102\uffde\103\uffde\115\uffde\001\002\000\032" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\042\uff9d\051\uff9d\052\uff9d\075\uff9d\077\uff9d\001\002" +
    "\000\004\076\140\001\002\000\020\023\073\024\071\025" +
    "\064\026\065\027\072\030\067\042\066\001\002\000\032" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\042\uff9e\051\uff9e\052\uff9e\075\uff9e\077\uff9e\001\002" +
    "\000\032\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\042\uff9f\051\uff9f\052\uff9f\075\uff9f\077\uff9f" +
    "\001\002\000\012\005\uff93\006\uff93\013\uff93\113\uff93\001" +
    "\002\000\012\005\uff92\006\uff92\013\uff92\113\uff92\001\002" +
    "\000\026\013\017\036\012\041\031\046\011\050\016\055" +
    "\035\070\015\071\007\102\034\103\022\001\002\000\012" +
    "\005\uff90\006\uff90\013\uff90\113\uff90\001\002\000\010\005" +
    "\063\006\062\013\057\001\002\000\012\005\uff94\006\uff94" +
    "\013\uff94\113\uff94\001\002\000\012\005\uff91\006\uff91\013" +
    "\uff91\113\uff91\001\002\000\012\005\uff95\006\uff95\013\uff95" +
    "\113\uff95\001\002\000\004\042\075\001\002\000\026\013" +
    "\017\036\012\041\031\046\011\050\016\055\035\070\015" +
    "\071\007\102\034\103\022\001\002\000\040\013\uffc0\036" +
    "\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\055\uffc0\070\uffc0\071\uffc0\102\uffc0\103\uffc0\115" +
    "\uffc0\001\002\000\034\013\017\036\012\041\031\043\111" +
    "\044\110\045\uffcd\046\011\050\016\055\035\070\015\071" +
    "\007\102\034\103\022\001\002\000\040\013\uffbf\036\uffbf" +
    "\041\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\055\uffbf\070\uffbf\071\uffbf\102\uffbf\103\uffbf\115\uffbf" +
    "\001\002\000\040\013\uffc2\036\uffc2\041\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\055\uffc2\070\uffc2" +
    "\071\uffc2\102\uffc2\103\uffc2\115\uffc2\001\002\000\004\045" +
    "\106\001\002\000\040\013\uffbe\036\uffbe\041\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\055\uffbe\070" +
    "\uffbe\071\uffbe\102\uffbe\103\uffbe\115\uffbe\001\002\000\040" +
    "\013\uffc3\036\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\055\uffc3\070\uffc3\071\uffc3\102\uffc3" +
    "\103\uffc3\115\uffc3\001\002\000\040\013\uffc1\036\uffc1\041" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\055\uffc1\070\uffc1\071\uffc1\102\uffc1\103\uffc1\115\uffc1\001" +
    "\002\000\050\013\uffd1\035\uffd1\036\uffd1\041\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\061\uffd1\070\uffd1\071\uffd1\102\uffd1\103\uffd1" +
    "\115\uffd1\001\002\000\010\043\111\044\116\045\uffca\001" +
    "\002\000\010\005\063\006\062\013\057\001\002\000\004" +
    "\042\126\001\002\000\010\043\114\044\110\045\uffc9\001" +
    "\002\000\040\013\uffc4\036\uffc4\041\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\055\uffc4\070\uffc4\071" +
    "\uffc4\102\uffc4\103\uffc4\115\uffc4\001\002\000\004\042\124" +
    "\001\002\000\006\044\116\045\uffcc\001\002\000\010\005" +
    "\063\006\062\013\057\001\002\000\016\023\073\024\071" +
    "\025\064\026\065\027\072\030\067\001\002\000\010\005" +
    "\063\006\062\013\057\001\002\000\004\042\122\001\002" +
    "\000\026\013\017\036\012\041\031\046\011\050\016\055" +
    "\035\070\015\071\007\102\034\103\022\001\002\000\034" +
    "\013\017\036\012\041\031\043\uffc6\044\uffc6\045\uffc6\046" +
    "\011\050\016\055\035\070\015\071\007\102\034\103\022" +
    "\001\002\000\026\013\017\036\012\041\031\046\011\050" +
    "\016\055\035\070\015\071\007\102\034\103\022\001\002" +
    "\000\034\013\017\036\012\041\031\043\uffc8\044\uffc8\045" +
    "\uffc8\046\011\050\016\055\035\070\015\071\007\102\034" +
    "\103\022\001\002\000\026\013\017\036\012\041\031\046" +
    "\011\050\016\055\035\070\015\071\007\102\034\103\022" +
    "\001\002\000\034\013\017\036\012\041\031\043\uffc7\044" +
    "\uffc7\045\uffc7\046\011\050\016\055\035\070\015\071\007" +
    "\102\034\103\022\001\002\000\016\023\073\024\071\025" +
    "\064\026\065\027\072\030\067\001\002\000\010\005\063" +
    "\006\062\013\057\001\002\000\004\042\133\001\002\000" +
    "\026\013\017\036\012\041\031\046\011\050\016\055\035" +
    "\070\015\071\007\102\034\103\022\001\002\000\034\013" +
    "\017\036\012\041\031\043\uffc5\044\uffc5\045\uffc5\046\011" +
    "\050\016\055\035\070\015\071\007\102\034\103\022\001" +
    "\002\000\006\043\114\045\uffcb\001\002\000\004\045\137" +
    "\001\002\000\050\013\uffd0\035\uffd0\036\uffd0\041\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\061\uffd0\070\uffd0\071\uffd0\102\uffd0\103" +
    "\uffd0\115\uffd0\001\002\000\010\005\063\006\062\013\057" +
    "\001\002\000\020\023\073\024\071\025\064\026\065\027" +
    "\072\030\067\077\142\001\002\000\004\042\151\001\002" +
    "\000\010\005\063\006\062\013\057\001\002\000\004\077" +
    "\145\001\002\000\004\042\146\001\002\000\026\013\017" +
    "\036\012\041\031\046\011\050\016\055\035\070\015\071" +
    "\007\102\034\103\022\001\002\000\004\045\150\001\002" +
    "\000\050\013\uffce\035\uffce\036\uffce\041\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\054\uffce\055\uffce" +
    "\056\uffce\061\uffce\070\uffce\071\uffce\102\uffce\103\uffce\115" +
    "\uffce\001\002\000\026\013\017\036\012\041\031\046\011" +
    "\050\016\055\035\070\015\071\007\102\034\103\022\001" +
    "\002\000\004\045\153\001\002\000\050\013\uffcf\035\uffcf" +
    "\036\uffcf\041\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\054\uffcf\055\uffcf\056\uffcf\061\uffcf\070\uffcf" +
    "\071\uffcf\102\uffcf\103\uffcf\115\uffcf\001\002\000\004\074" +
    "\uff9a\001\002\000\004\074\uff99\001\002\000\004\074\161" +
    "\001\002\000\004\074\uff9b\001\002\000\004\074\uff9c\001" +
    "\002\000\032\013\uffea\035\uffea\036\uffea\041\uffea\046\uffea" +
    "\050\uffea\055\uffea\061\uffea\070\uffea\071\uffea\102\uffea\103" +
    "\uffea\001\002\000\004\013\204\001\002\000\022\005\173" +
    "\006\171\007\172\011\170\012\166\111\167\113\165\114" +
    "\164\001\002\000\004\074\203\001\002\000\004\074\202" +
    "\001\002\000\004\074\201\001\002\000\004\074\200\001" +
    "\002\000\004\074\177\001\002\000\004\074\176\001\002" +
    "\000\004\074\175\001\002\000\004\074\174\001\002\000" +
    "\050\013\uffb6\035\uffb6\036\uffb6\041\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\061\uffb6\070\uffb6\071\uffb6\102\uffb6\103\uffb6\115\uffb6" +
    "\001\002\000\050\013\uffb4\035\uffb4\036\uffb4\041\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\061\uffb4\070\uffb4\071\uffb4\102\uffb4\103" +
    "\uffb4\115\uffb4\001\002\000\050\013\uffb5\035\uffb5\036\uffb5" +
    "\041\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\061\uffb5\070\uffb5\071\uffb5" +
    "\102\uffb5\103\uffb5\115\uffb5\001\002\000\050\013\uffb3\035" +
    "\uffb3\036\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\054\uffb3\055\uffb3\056\uffb3\061\uffb3\070" +
    "\uffb3\071\uffb3\102\uffb3\103\uffb3\115\uffb3\001\002\000\050" +
    "\013\uffaf\035\uffaf\036\uffaf\041\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\061\uffaf\070\uffaf\071\uffaf\102\uffaf\103\uffaf\115\uffaf\001" +
    "\002\000\050\013\uffb2\035\uffb2\036\uffb2\041\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\061\uffb2\070\uffb2\071\uffb2\102\uffb2\103\uffb2" +
    "\115\uffb2\001\002\000\050\013\uffb0\035\uffb0\036\uffb0\041" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\061\uffb0\070\uffb0\071\uffb0\102" +
    "\uffb0\103\uffb0\115\uffb0\001\002\000\050\013\uffb1\035\uffb1" +
    "\036\uffb1\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\054\uffb1\055\uffb1\056\uffb1\061\uffb1\070\uffb1" +
    "\071\uffb1\102\uffb1\103\uffb1\115\uffb1\001\002\000\006\072" +
    "\uff8f\075\uff8f\001\002\000\004\075\206\001\002\000\010" +
    "\005\063\006\062\013\057\001\002\000\004\051\210\001" +
    "\002\000\004\113\211\001\002\000\006\052\213\053\212" +
    "\001\002\000\010\005\063\006\062\013\057\001\002\000" +
    "\026\013\017\036\012\041\031\046\011\050\016\055\035" +
    "\070\015\071\007\102\034\103\022\001\002\000\030\013" +
    "\017\036\012\041\031\046\011\050\016\054\223\055\035" +
    "\070\015\071\007\102\034\103\022\001\002\000\030\013" +
    "\uffe1\036\uffe1\041\uffe1\046\uffe1\050\uffe1\054\uffe1\055\uffe1" +
    "\070\uffe1\071\uffe1\102\uffe1\103\uffe1\001\002\000\030\013" +
    "\uffe0\036\uffe0\041\uffe0\046\uffe0\050\uffe0\054\uffe0\055\uffe0" +
    "\070\uffe0\071\uffe0\102\uffe0\103\uffe0\001\002\000\030\013" +
    "\uffe3\036\uffe3\041\uffe3\046\uffe3\050\uffe3\054\uffe3\055\uffe3" +
    "\070\uffe3\071\uffe3\102\uffe3\103\uffe3\001\002\000\030\013" +
    "\uffdf\036\uffdf\041\uffdf\046\uffdf\050\uffdf\054\uffdf\055\uffdf" +
    "\070\uffdf\071\uffdf\102\uffdf\103\uffdf\001\002\000\030\013" +
    "\uffe2\036\uffe2\041\uffe2\046\uffe2\050\uffe2\054\uffe2\055\uffe2" +
    "\070\uffe2\071\uffe2\102\uffe2\103\uffe2\001\002\000\030\013" +
    "\uffe4\036\uffe4\041\uffe4\046\uffe4\050\uffe4\054\uffe4\055\uffe4" +
    "\070\uffe4\071\uffe4\102\uffe4\103\uffe4\001\002\000\046\013" +
    "\uffe7\035\uffe7\036\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\061\uffe7\070" +
    "\uffe7\071\uffe7\102\uffe7\103\uffe7\115\uffe7\001\002\000\030" +
    "\013\uffe5\036\uffe5\041\uffe5\046\uffe5\050\uffe5\054\uffe5\055" +
    "\uffe5\070\uffe5\071\uffe5\102\uffe5\103\uffe5\001\002\000\004" +
    "\052\226\001\002\000\026\013\017\036\012\041\031\046" +
    "\011\050\016\055\035\070\015\071\007\102\034\103\022" +
    "\001\002\000\030\013\017\036\012\041\031\046\011\050" +
    "\016\054\230\055\035\070\015\071\007\102\034\103\022" +
    "\001\002\000\046\013\uffe6\035\uffe6\036\uffe6\041\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\054\uffe6" +
    "\055\uffe6\061\uffe6\070\uffe6\071\uffe6\102\uffe6\103\uffe6\115" +
    "\uffe6\001\002\000\004\074\uff98\001\002\000\004\074\uff96" +
    "\001\002\000\004\074\235\001\002\000\004\074\uff97\001" +
    "\002\000\050\013\uffee\035\uffee\036\uffee\041\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\054\uffee\055" +
    "\uffee\056\uffee\061\uffee\070\uffee\071\uffee\102\uffee\103\uffee" +
    "\115\uffee\001\002\000\004\035\240\001\002\000\032\013" +
    "\ufffe\035\ufffe\036\ufffe\041\ufffe\046\ufffe\050\ufffe\055\ufffe" +
    "\061\ufffe\070\ufffe\071\ufffe\102\ufffe\103\ufffe\001\002\000" +
    "\004\002\uffff\001\002\000\006\037\uff8c\072\uff8c\001\002" +
    "\000\006\037\244\072\243\001\002\000\004\013\331\001" +
    "\002\000\004\004\245\001\002\000\004\040\246\001\002" +
    "\000\030\005\253\006\254\007\247\011\265\012\250\013" +
    "\257\016\251\076\263\111\264\113\260\114\256\001\002" +
    "\000\004\074\330\001\002\000\004\074\327\001\002\000" +
    "\006\005\324\006\323\001\002\000\016\023\073\024\071" +
    "\025\064\026\065\027\072\030\067\001\002\000\022\022" +
    "\uff9f\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\074\320\001\002\000\022\022\uff9e\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\074\317\001\002\000\004" +
    "\074\316\001\002\000\004\074\315\001\002\000\032\014" +
    "\307\016\311\017\313\020\312\021\306\022\uff9d\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\001\002\000" +
    "\020\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\074\uffe9\001\002\000\004\074\305\001\002\000\004\022" +
    "\301\001\002\000\012\005\063\006\062\013\057\111\272" +
    "\001\002\000\006\021\267\074\uffbd\001\002\000\004\074" +
    "\266\001\002\000\050\013\uffa8\035\uffa8\036\uffa8\041\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\061\uffa8\070\uffa8\071\uffa8\102\uffa8" +
    "\103\uffa8\115\uffa8\001\002\000\004\111\270\001\002\000" +
    "\004\074\uffb7\001\002\000\004\022\274\001\002\000\004" +
    "\077\273\001\002\000\004\074\uffbc\001\002\000\004\112" +
    "\275\001\002\000\004\077\276\001\002\000\004\014\277" +
    "\001\002\000\004\111\300\001\002\000\004\074\uffb8\001" +
    "\002\000\004\112\302\001\002\000\006\014\303\074\uffba" +
    "\001\002\000\004\111\304\001\002\000\004\074\uffb9\001" +
    "\002\000\050\013\uffa5\035\uffa5\036\uffa5\041\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\061\uffa5\070\uffa5\071\uffa5\102\uffa5\103\uffa5" +
    "\115\uffa5\001\002\000\004\013\uffa0\001\002\000\004\013" +
    "\uffa4\001\002\000\004\013\314\001\002\000\004\013\uffa3" +
    "\001\002\000\004\013\uffa1\001\002\000\004\013\uffa2\001" +
    "\002\000\004\074\uffbb\001\002\000\050\013\uffa9\035\uffa9" +
    "\036\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\054\uffa9\055\uffa9\056\uffa9\061\uffa9\070\uffa9" +
    "\071\uffa9\102\uffa9\103\uffa9\115\uffa9\001\002\000\050\013" +
    "\uffa6\035\uffa6\036\uffa6\041\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\054\uffa6\055\uffa6\056\uffa6\061" +
    "\uffa6\070\uffa6\071\uffa6\102\uffa6\103\uffa6\115\uffa6\001\002" +
    "\000\050\013\uffac\035\uffac\036\uffac\041\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\054\uffac\055\uffac" +
    "\056\uffac\061\uffac\070\uffac\071\uffac\102\uffac\103\uffac\115" +
    "\uffac\001\002\000\050\013\uffae\035\uffae\036\uffae\041\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\054" +
    "\uffae\055\uffae\056\uffae\061\uffae\070\uffae\071\uffae\102\uffae" +
    "\103\uffae\115\uffae\001\002\000\012\005\160\006\157\013" +
    "\154\113\155\001\002\000\004\074\uffe8\001\002\000\004" +
    "\074\326\001\002\000\004\074\325\001\002\000\050\013" +
    "\uffad\035\uffad\036\uffad\041\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad\061" +
    "\uffad\070\uffad\071\uffad\102\uffad\103\uffad\115\uffad\001\002" +
    "\000\050\013\uffab\035\uffab\036\uffab\041\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\054\uffab\055\uffab" +
    "\056\uffab\061\uffab\070\uffab\071\uffab\102\uffab\103\uffab\115" +
    "\uffab\001\002\000\050\013\uffa7\035\uffa7\036\uffa7\041\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\061\uffa7\070\uffa7\071\uffa7\102\uffa7" +
    "\103\uffa7\115\uffa7\001\002\000\050\013\uffaa\035\uffaa\036" +
    "\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\054\uffaa\055\uffaa\056\uffaa\061\uffaa\070\uffaa\071" +
    "\uffaa\102\uffaa\103\uffaa\115\uffaa\001\002\000\006\037\uff8d" +
    "\072\uff8d\001\002\000\004\052\333\001\002\000\004\115" +
    "\335\001\002\000\010\043\343\047\uffd6\115\344\001\002" +
    "\000\004\042\340\001\002\000\004\047\337\001\002\000" +
    "\050\013\uffd7\035\uffd7\036\uffd7\041\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\061\uffd7\070\uffd7\071\uffd7\102\uffd7\103\uffd7\115\uffd7" +
    "\001\002\000\026\013\017\036\012\041\031\046\011\050" +
    "\016\055\035\070\015\071\007\102\034\103\022\001\002" +
    "\000\034\013\017\036\012\041\031\043\uffd3\046\011\047" +
    "\uffd3\050\016\055\035\070\015\071\007\102\034\103\022" +
    "\115\uffd3\001\002\000\004\047\uffd5\001\002\000\004\042" +
    "\347\001\002\000\004\042\345\001\002\000\026\013\017" +
    "\036\012\041\031\046\011\050\016\055\035\070\015\071" +
    "\007\102\034\103\022\001\002\000\034\013\017\036\012" +
    "\041\031\043\uffd4\046\011\047\uffd4\050\016\055\035\070" +
    "\015\071\007\102\034\103\022\115\uffd4\001\002\000\026" +
    "\013\017\036\012\041\031\046\011\050\016\055\035\070" +
    "\015\071\007\102\034\103\022\001\002\000\030\013\017" +
    "\036\012\041\031\046\011\047\uffd2\050\016\055\035\070" +
    "\015\071\007\102\034\103\022\001\002\000\004\074\352" +
    "\001\002\000\050\013\uffed\035\uffed\036\uffed\041\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\054\uffed" +
    "\055\uffed\056\uffed\061\uffed\070\uffed\071\uffed\102\uffed\103" +
    "\uffed\115\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\002\004\001\001\000\040\004\012\005" +
    "\007\006\037\007\031\015\035\016\036\017\024\021\025" +
    "\024\017\042\022\043\023\044\032\047\013\052\027\053" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\350\001\001\000\002\001\001\000\004\040\331\001" +
    "\001\000\004\020\241\001\001\000\040\005\007\006\037" +
    "\007\031\015\236\016\036\017\024\021\025\024\017\042" +
    "\022\043\023\044\032\047\013\052\027\053\020\054\235" +
    "\001\001\000\002\001\001\000\004\037\232\001\001\000" +
    "\004\040\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\155\001\001\000\002\001\001\000\004\040\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\044\006\053\016\052\017\050\021" +
    "\025\042\047\043\023\044\032\046\046\050\045\051\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\044" +
    "\006\053\016\052\017\050\021\025\042\047\043\023\044" +
    "\032\046\046\050\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\044\006\053\007\102\010\076\011\103" +
    "\016\104\017\100\021\025\026\135\042\077\043\023\044" +
    "\032\046\075\047\013\052\027\053\020\001\001\000\002" +
    "\001\001\000\004\040\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\044\006\053\007\102\010\076\011\103\016\104\017" +
    "\100\021\025\026\101\042\077\043\023\044\032\046\075" +
    "\047\013\052\027\053\020\001\001\000\002\001\001\000" +
    "\042\005\044\006\053\007\102\011\112\013\111\014\106" +
    "\016\104\017\100\021\025\042\077\043\023\044\032\046" +
    "\075\047\013\052\027\053\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\134\001\001\000\004\040\127\001\001\000\002\001" +
    "\001\000\004\014\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\116\001\001\000" +
    "\004\035\117\001\001\000\004\040\120\001\001\000\002" +
    "\001\001\000\040\005\044\006\053\007\102\010\122\011" +
    "\103\016\104\017\100\021\025\042\077\043\023\044\032" +
    "\046\075\047\013\052\027\053\020\001\001\000\036\005" +
    "\044\006\053\007\102\011\112\016\104\017\100\021\025" +
    "\042\077\043\023\044\032\046\075\047\013\052\027\053" +
    "\020\001\001\000\040\005\044\006\053\007\102\010\124" +
    "\011\103\016\104\017\100\021\025\042\077\043\023\044" +
    "\032\046\075\047\013\052\027\053\020\001\001\000\036" +
    "\005\044\006\053\007\102\011\112\016\104\017\100\021" +
    "\025\042\077\043\023\044\032\046\075\047\013\052\027" +
    "\053\020\001\001\000\040\005\044\006\053\007\102\010" +
    "\126\011\103\016\104\017\100\021\025\042\077\043\023" +
    "\044\032\046\075\047\013\052\027\053\020\001\001\000" +
    "\036\005\044\006\053\007\102\011\112\016\104\017\100" +
    "\021\025\042\077\043\023\044\032\046\075\047\013\052" +
    "\027\053\020\001\001\000\004\035\130\001\001\000\004" +
    "\040\131\001\001\000\002\001\001\000\040\005\044\006" +
    "\053\007\102\010\133\011\103\016\104\017\100\021\025" +
    "\042\077\043\023\044\032\046\075\047\013\052\027\053" +
    "\020\001\001\000\036\005\044\006\053\007\102\011\112" +
    "\016\104\017\100\021\025\042\077\043\023\044\032\046" +
    "\075\047\013\052\027\053\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\140\001" +
    "\001\000\004\035\142\001\001\000\002\001\001\000\004" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\044\006\053\007\102\010\076\011\103\016\104" +
    "\017\100\021\025\026\146\042\077\043\023\044\032\046" +
    "\075\047\013\052\027\053\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\044\006\053\007\102\010" +
    "\076\011\103\016\104\017\100\021\025\026\151\042\077" +
    "\043\023\044\032\046\075\047\013\052\027\053\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\224\001\001\000\040\005\044\006\053" +
    "\007\217\016\220\017\216\021\025\030\221\031\213\042" +
    "\215\043\023\044\032\046\214\047\013\052\027\053\020" +
    "\001\001\000\036\005\044\006\053\007\217\016\220\017" +
    "\216\021\025\030\223\042\215\043\023\044\032\046\214" +
    "\047\013\052\027\053\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\044\006\053\007\217" +
    "\016\220\017\216\021\025\030\221\031\226\042\215\043" +
    "\023\044\032\046\214\047\013\052\027\053\020\001\001" +
    "\000\036\005\044\006\053\007\217\016\220\017\216\021" +
    "\025\030\223\042\215\043\023\044\032\046\214\047\013" +
    "\052\027\053\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\254\023\260\036\251\040\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\333\033\335\001\001\000" +
    "\004\034\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\044\006\053\007\102\010" +
    "\340\011\103\016\104\017\100\021\025\042\077\043\023" +
    "\044\032\046\075\047\013\052\027\053\020\001\001\000" +
    "\036\005\044\006\053\007\102\011\112\016\104\017\100" +
    "\021\025\042\077\043\023\044\032\046\075\047\013\052" +
    "\027\053\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\044\006\053\007\102\010" +
    "\345\011\103\016\104\017\100\021\025\042\077\043\023" +
    "\044\032\046\075\047\013\052\027\053\020\001\001\000" +
    "\036\005\044\006\053\007\102\011\112\016\104\017\100" +
    "\021\025\042\077\043\023\044\032\046\075\047\013\052" +
    "\027\053\020\001\001\000\040\005\044\006\053\007\102" +
    "\010\347\011\103\016\104\017\100\021\025\042\077\043" +
    "\023\044\032\046\075\047\013\052\027\053\020\001\001" +
    "\000\036\005\044\006\053\007\102\011\112\016\104\017" +
    "\100\021\025\042\077\043\023\044\032\046\075\047\013" +
    "\052\027\053\020\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$testSintact$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$testSintact$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$testSintact$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    //golang
    public String golang="";
    public String pseudoG = "";
    public String tmp;
    public String tmp2;
    public String tmp3;
    public String tmp4;
    public String tmp5;
    public String tmp6;
    public String expG = "";
    public String printG = "";
    public String printnlG = "";
    public String metodG = "";
    public String loopG = "";
    public int cont = 0;


    public LinkedList<Errors> SyntaxErrors = new LinkedList<Errors>();
    public String resultado ="";

    
    public static Nodo raiz;
    
    public Nodo getRaiz(){
        return raiz;
    }

    public void syntax_Errors(Symbol s){
        System.out.println("Errors R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        try {
            Errors esR = new Errors(s.value.toString(), s.left + 1, s.right + 1, "Errors Sintactico Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esR);
        } catch (Exception ex) {
            Errors esR = new Errors("null", s.left + 1, s.right + 1, "Errors Sintactico Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esR);
        }
    }

    public void unrecovered_syntax_Errors(Symbol s) throws java.lang.Exception{ 
        System.out.println("Errors NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        try {
            Errors esNR = new Errors(s.value.toString(), s.left + 1, s.right + 1, "Errors Sintactico No Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esNR);
        } catch (Exception ex) { 
            Errors esNR = new Errors("null", s.left + 1, s.right + 1, "Errors Sintactico No Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esNR);
        }
    }

    





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$testSintact$actions {



String dEnteros(Object signo, String num, String nombres){
        String aux = "";
        aux += nombres;
        aux += " int = "; 
        for(int i = 1; i <= cont; i++){
            if(signo == null){aux += " "+num;
            }else{ aux += " "+signo+num; }
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dFlotantes(Object signo, String num, String nombres){
        String aux = "";
        aux += nombres;
        aux += " float64 = "; 
        for(int i = 1; i <= cont; i++){
            if(signo == null){aux += " "+num;
            }else{ aux += " "+signo+num; }
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dCadenas(String cadena, String nombres){
        String aux = "";
        aux += nombres;
        aux += " string = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+cadena;
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dChars(String chars, String nombres){
        String aux = "";
        aux += nombres;
        aux += " byte = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+chars;
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dCharAscii(String charse,String nombres){
        String aux = "";
        aux += nombres;
        aux += "  string = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+"string"+charse;
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dOpracion(String tipo, String exp, String nombres){

        String aux = "";
        aux += nombres;

        switch (tipo.toLowerCase()) {
            case "boolean":
                aux += " bool = "; 
                for(int i = 1; i <= cont; i++){
                    aux += " "+exp;
                    if(i != cont){ aux += ","; }
                } aux += "\n"; cont = 0;
                break;
            case "numero":
                aux += " float64 = "; 
                for(int i = 1; i <= cont; i++){
                    aux += " "+exp;
                    if(i != cont){ aux += ","; }
                } aux += "\n"; cont = 0;
                break;
        }
        return (aux);
    }

    String aGeneral(String exp, String nombres){
        String aux = "";
        aux += nombres;
        aux += "  =  ";
        switch (exp.toLowerCase()) {
            case "verdadero":
                for(int i = 1; i <= cont; i++){
                aux += " "+"true";
                if(i != cont){ aux += ","; }
                } aux += "\n"; cont = 0;
            case "falso":
                for(int i = 1; i <= cont; i++){
                aux += " "+"false";
                if(i != cont){ aux += ","; }
                } aux += "\n"; cont = 0;
                return (aux);
        }
        for(int i = 1; i <= cont; i++){
        aux += " "+exp;
        if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String relacional(String exp, String operador, String exp2){
        String aux = "";
        aux += " " +exp;

        switch (operador.toLowerCase()) {
            case "mayor":
                aux += " > ";
                break;
            case "menor":
                aux += " < ";
                break;
            case "mayor_o_igual":
                aux += " >= ";
                break;
            case "menor_o_igual":
                aux += " <= ";
                break;
            case "es_igual":
                aux += " == ";
                break;  
            case "es_diferente":
                aux += " != ";
                break;  
        }

        aux += " "+exp2;
        return (aux);
    }

    String pot1(String entero, String exp){
        String aux = "";
        String valores = String.format("%s , %s", entero, exp);
        aux += " "+"math.Pow(" +  valores +")";
        return(aux);
    }

    String pot2(String entero, String Pexp, String exp){
        String aux = "";
        String valores = String.format("%s , %s", entero, Pexp);
        aux += " "+"math.Pow(" +  valores +") " + "+"+exp ;
        return(aux);
    }

    String prt(String dato){
        String aux = " ";
        if(dato == "null"){
            aux = " ";
            return aux;
        }
        aux += "fmt.Print(" + dato + ")";
        return(aux);
    }

    String prtnl(String dato){
        String aux = " ";
        if(dato == "null"){
            aux = " ";
            return aux;
        }
        aux += "fmt.Println(" + dato + ")";
        return(aux);
    }

    String cicloif(String dato1, String operador, String dato2, String datas){
        String aux = "";

        aux += "\n\t" + "if " + dato1;

        switch (operador.toLowerCase()) {
            case "mayor":
                aux += " > ";
                break;
            case "menor":
                aux += " < ";
                break;
            case "mayor_o_igual":
                aux += " >= ";
                break;
            case "menor_o_igual":
                aux += " <= ";
                break;
            case "es_igual":
                aux += " == ";
                break;  
            case "es_diferente":
                aux += " != ";
                break;
            case "and":
                aux += " && ";
                break;  
            case "or":
                aux += " || ";
                break;
            case "not":
                aux += " ! ";
                break;  
        }

        aux += dato2 + " {";
        aux += "\t" + datas + "\n\t" + "}";
        return aux;
    }

    String cicloif2(String dato1, String datas){
        String aux = "";

        aux += "\n\t" + "if " + dato1;

        aux += " {";
        aux += "\t" + datas + "\n\t" + "}";
        return aux;
    }

    String cicloif3(String dato1, String datas){
        String aux = "";

        aux += "\n\t" + "if "+ "!(" + dato1 + ")";

        aux += " {";
        aux += "\t" + datas + "\n\t" + "}";
        return aux;
    }

    
    String cicloif4(String dato1, String operador, String dato2, String datas){
        String aux = "";

        aux += "\n\t" + "if " + "!(" + dato1;

        switch (operador.toLowerCase()) {
            case "mayor":
                aux += " > ";
                break;
            case "menor":
                aux += " < ";
                break;
            case "mayor_o_igual":
                aux += " >= ";
                break;
            case "menor_o_igual":
                aux += " <= ";
                break;
            case "es_igual":
                aux += " == ";
                break;  
            case "es_diferente":
                aux += " != ";
                break;
            case "and":
                aux += " && ";
                break;  
            case "or":
                aux += " || ";
                break;
            case "not":
                aux += " ! ";
                break;  
        }

        aux += dato2 + ") {";
        aux += "\t" + datas + "\n\t" + "}";
        return aux;
    }
    
    

    String elsif(String dato1, String operador, String dato2, String datas){
        String aux = "";

        aux += "\n\t" + "}else if " + dato1; 
    
        switch (operador.toLowerCase()) {
            case "mayor":
                aux += " > ";
                break;
            case "menor":
                aux += " < ";
                break;
            case "mayor_o_igual":
                aux += " >= ";
                break;
            case "menor_o_igual":
                aux += " <= ";
                break;
            case "es_igual":
                aux += " == ";
                break;  
            case "es_diferente":
                aux += " != ";
                break;
            case "and":
                aux += " && ";
                break;  
            case "or":
                aux += " || ";
                break;
            case "not":
                aux += " ! ";
                break;  
        }

        aux += dato2 + " {";
        aux += "\t" + datas + "\n\t";
        return aux;
    }

    String elses(String dato){
        String aux = "";
        aux += "\n\t" + "}else {"+"\n";
        aux += "\t" + dato;
        aux += "\n";
        return aux;
    }

    String concat(String dato1, String dato2, String dato3){
        String aux = "";
        if(dato3 == "null"){
            aux += "\n\t" + dato1 + " " + dato2 + " ";
            return aux;
        }
        aux += "\n\t" + dato1 + " " + dato2 + " " + dato3 + " ";
        return aux;
    }

    
    String switche(String dato1, String datas){
        String aux = "";

        aux += "\n\t" + "switch " + dato1 + "{";
        aux += "\t" + datas + "\n\t" + "}";
        return aux;
    }


    String cases(String dato1, String datas){
        String aux = "";
        aux += "\n\t\t" + "case " + dato1 + ": \n\t";
        aux += "\t" + datas + "\n";
        return aux;
    }

    String deflt(String datas){
        String aux = "";
        aux += "\n\t\t" + "default:";
        aux += "\t" + datas + "\n";
        return aux;
    }

    String cicloFor(String dato1,String dato2,String exp,String datas,String salto){
        String aux = "";
        if(salto == "null"){
            aux += "\n\t" + "for " + dato1 + " := " + dato2 + "; " + exp + " { \n";
            aux += "\t" + datas + "\n";
            aux += "\n\t }";
            return aux;
        }else{
            aux += "\n\t" + "for " + dato1 + " := " + dato2 + "; " + exp + "; " + salto +" { \n";
            aux += "\t" + datas + "\n";
            aux += "\n\t }";
            return aux;
        }
    }

    String cicloWhile(String dato1,String operador,String dato2,String datas){
        String aux = "";
        aux += "\n\t" + "for true { ";

        aux += "\n\t\t" + " if !("+ dato1;
        
                switch (operador.toLowerCase()) {
            case "mayor":
                aux += " > ";
                break;
            case "menor":
                aux += " < ";
                break;
            case "mayor_o_igual":
                aux += " >= ";
                break;
            case "menor_o_igual":
                aux += " <= ";
                break;
            case "es_igual":
                aux += " == ";
                break;  
            case "es_diferente":
                aux += " != ";
                break;
            case "and":
                aux += " && ";
                break;  
            case "or":
                aux += " || ";
                break;
            case "not":
                aux += " ! ";
                break;  
        }

        aux += dato2 + ") { ";
        aux += "\n\t break";
        aux += "\n\t }";

        aux += "\n\t\t" + datas + "\n }";
        return aux;
    }


    
  private final testSintact parser;

  /** Constructor */
  CUP$testSintact$actions(testSintact parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$testSintact$do_action_part00000000(
    int                        CUP$testSintact$act_num,
    java_cup.runtime.lr_parser CUP$testSintact$parser,
    java.util.Stack            CUP$testSintact$stack,
    int                        CUP$testSintact$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$testSintact$result;

      /* select the action based on the action number */
      switch (CUP$testSintact$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		RESULT = start_val;
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$testSintact$parser.done_parsing();
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;


    golang += "\npackage main" + "\nimport(" + "\n\t" + '"' + "fmt" + '"' + "\n\t" + '"' + "math" + '"' + "\n)";
    golang += "\nfunc main(){" + "\n"+ pseudoG + "\n" + "}";
    String aux = golang.replace("null"," ");
    System.out.println(aux); 
    
    
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO pseudo NT$0 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pseudo ::= pseudo opciones 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("pseudo",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pseudo ::= opciones 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("pseudo",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opciones ::= declaration 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a);  
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones ::= asignation 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones ::= coments 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones ::= prints 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones ::= retorn 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones ::= ciclos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opciones",11, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // basico ::= declaration 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("basico",36, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // basico ::= asignation 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("basico",36, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sentif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ciclos ::= ciclofor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclos",5, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ciclos ::= cicloDowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclos",5, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ciclos ::= ciclowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclos",5, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prints ::= IMPRIMIR type PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += "\n\t" + prt(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("prints",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prints ::= IMPRIMIRNL type PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += "\n\t" + prtnl(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("prints",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // coments ::= COMENTARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += "\t" + String.valueOf(a) +"\n"; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("coments",12, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // coments ::= COMENTARIOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT += "\t" + String.valueOf(a) +"\n"; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("coments",12, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // retorn ::= RETORNAR TYPES PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += "\t" + String.valueOf(a) +"\n"; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("retorn",18, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPR ::= EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPR ::= TYPES OPRS TYPES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = relacional(String.valueOf(a), String.valueOf(b), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ciclofor ::= PARA TYP ASIGNAR TYP HASTA EXPR HACER conntdos FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloFor(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d), "null"); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclofor",37, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-8)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ciclofor ::= PARA TYP ASIGNAR TYP HASTA EXPR CONINCREMENTAL TYP HACER conntdos FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloFor(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d),String.valueOf(e)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclofor",37, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-10)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // conntdos ::= conntdos conr_r 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp4 += String.valueOf(a);  RESULT = tmp4; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conntdos",23, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conntdos ::= conr_r 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp4 += String.valueOf(a); RESULT = tmp4; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conntdos",23, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conr_r ::= prints 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conr_r",22, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conr_r ::= coments 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conr_r",22, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conr_r ::= basico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conr_r",22, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conr_r ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conr_r",22, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conr_r ::= ciclos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conr_r",22, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ciclowhile ::= MIENTRAS EXPWH ORCF EXPWH HACER conntennido FINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloWhile(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclowhile",40, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conntennido ::= conntennido cont_r 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp5 += String.valueOf(a);  RESULT = tmp5; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conntennido",39, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conntennido ::= cont_r 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp5 += String.valueOf(a); RESULT = tmp5; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("conntennido",39, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cont_r ::= prints 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("cont_r",38, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cont_r ::= coments 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("cont_r",38, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cont_r ::= basico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("cont_r",38, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cont_r ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("cont_r",38, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // switch ::= SEGUN TYP HACER swithces FINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		  RESULT += switche(String.valueOf(a),String.valueOf(tmp)); tmp = " "; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("switch",34, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // swithces ::= casos 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("swithces",25, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // swithces ::= casos defolt 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("swithces",25, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // casos ::= casos EXPSC ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(a);
            String aux2 = aux.replace("¿", " ").replace("?"," ").replace("!", " ").replace("¡"," "); 
            tmp += cases(String.valueOf(aux2),String.valueOf(b));   
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("casos",24, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // casos ::= EXPSC ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(a);
            String aux2 = aux.replace("¿", " ").replace("?"," ").replace("!", " ").replace("¡"," "); 
            tmp += cases(String.valueOf(aux2),String.valueOf(b));    
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("casos",24, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // defolt ::= DELOCONTRARIO ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		   tmp += deflt(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("defolt",26, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentif ::= SI TYP OPRS TYP ENTONCES contenido FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloif(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentif",33, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentif ::= SI TYP ENTONCES contenido FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloif2(String.valueOf(a),String.valueOf(d)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentif",33, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentif ::= SI NOT PARABRE TYP PARCIERRA ENTONCES contenido FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloif3(String.valueOf(a),String.valueOf(d));    
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentif",33, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentif ::= SI NOT PARABRE TYP OPRS TYP PARCIERRA ENTONCES contenido FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = cicloif4(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d));    
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentif",33, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-9)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenido ::= opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = (String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",20, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido ::= opes contrario osi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		 RESULT = concat(String.valueOf(a), String.valueOf(tmp), String.valueOf(tmp2)); tmp = " "; tmp2 = " "; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",20, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido ::= opes osi contrario 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		 RESULT = concat(String.valueOf(a), String.valueOf(tmp2), String.valueOf(tmp)); tmp = " "; tmp2 = " "; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",20, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenido ::= opes osi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = concat(String.valueOf(a), String.valueOf(tmp2), "null"); tmp2 = " ";  
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",20, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenido ::= opes contrario 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT = concat(String.valueOf(a), String.valueOf(tmp), "null"); tmp = " ";  
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",20, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contrario ::= contrario DELOCONTRARIO ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp += elses(String.valueOf(a));   
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contrario",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contrario ::= DELOCONTRARIO ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  tmp += elses(String.valueOf(a));  
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contrario",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // osi ::= osi OSI TYP OPRS TYP ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp2 += elsif(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("osi",10, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // osi ::= OSI TYP OPRS TYP ENTONCES opes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp2 += elsif(String.valueOf(a),String.valueOf(b),String.valueOf(c),String.valueOf(d)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("osi",10, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opes ::= opes ntocs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp3 += String.valueOf(a);  RESULT = tmp3; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opes",6, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opes ::= ntocs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp3 += String.valueOf(a); RESULT = tmp3; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("opes",6, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ntocs ::= prints 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ntocs",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ntocs ::= coments 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ntocs",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ntocs ::= basico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ntocs",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ntocs ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ntocs",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ntocs ::= ciclos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT =  String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ntocs",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPB ::= EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPB ::= PARABRE EXP PARCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(String.valueOf(a) + String.valueOf(b) + String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPB ::= ID signo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(String.valueOf(a) + String.valueOf(b) + String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPB ::= TYP POT EXPPOT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(c);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot1(String.valueOf(a), String.valueOf(aux2)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPB ::= TYP POT EXPPOT MAS EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(b);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot2(String.valueOf(a), String.valueOf(aux2), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPB ::= PARABRE TYP POT EXPPOT PARCIERRA MAS EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(b);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot2(String.valueOf(a), String.valueOf(aux2), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPB ::= EXP MOD EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(String.valueOf(a) + " % " + String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignation ::= A ASIGNAR ENTERO PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignation ::= A ASIGNAR FLOTANTE PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignation ::= A ASIGNAR CADENA PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignation ::= A ASIGNAR CARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignation ::= A ASIGNAR CHARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignation ::= A ASIGNAR EXPBOOL PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignation ::= A ASIGNAR EXPR PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignation ::= A ASIGNAR EXP PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaration ::= INGRESAR V COMO TIPO CONVALOR ENTERO PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dEnteros(null, String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaration ::= INGRESAR V COMO TIPO CONVALOR MENOS ENTERO PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dEnteros(String.valueOf(a),String.valueOf(b), tmp); tmp= ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaration ::= INGRESAR V COMO TIPO CONVALOR FLOTANTE PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dFlotantes(null, String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaration ::= INGRESAR V COMO TIPO CONVALOR MENOS FLOTANTE PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dFlotantes(String.valueOf(a),String.valueOf(b),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaration ::= INGRESAR V COMO TIPO CONVALOR CADENA PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dCadenas(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaration ::= INGRESAR V COMO TIPO CONVALOR EXPBOOL PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += aGeneral(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaration ::= INGRESAR V COMO TIPO CONVALOR CARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dChars(String.valueOf(a),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaration ::= INGRESAR V COMO TIPO CONVALOR CHARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		  String aux = String.valueOf(a);
            String aux2 = aux.replace("'${", "(").replace("}'",")");
            RESULT += dCharAscii(String.valueOf(aux2),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaration ::= INGRESAR V COMO TIPO CONVALOR OPB PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dOpracion(String.valueOf(a),String.valueOf(b),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaration ::= INGRESAR V COMO TIPO CONVALOR OPR PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 RESULT += dOpracion(String.valueOf(a),String.valueOf(b),tmp); tmp = ""; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // signo ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",31, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // signo ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",31, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // signo ::= POR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",31, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // signo ::= DIV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",31, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // signo ::= MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",31, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYP ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYP",30, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYP ::= FLOTANTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYP",30, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TYP ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYP",30, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TYPES ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TYPES ::= FLOTANTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPES ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPES ::= EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type ::= EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPRS ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",27, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPRS ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",27, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPRS ::= MAYOROIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",27, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPRS ::= MENOROIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",27, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPRS ::= ESIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",27, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPRS ::= ESDIFERENTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",27, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // A ::= A COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp += ","+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("A",15, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // A ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp += "\n\t"+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("A",15, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // V ::= V COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp += ","+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("V",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // V ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 tmp += "\n\t"+"var"+" "+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("V",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$testSintact$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$testSintact$do_action(
    int                        CUP$testSintact$act_num,
    java_cup.runtime.lr_parser CUP$testSintact$parser,
    java.util.Stack            CUP$testSintact$stack,
    int                        CUP$testSintact$top)
    throws java.lang.Exception
    {
              return CUP$testSintact$do_action_part00000000(
                               CUP$testSintact$act_num,
                               CUP$testSintact$parser,
                               CUP$testSintact$stack,
                               CUP$testSintact$top);
    }
}

}
