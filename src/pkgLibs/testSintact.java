
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pkgLibs;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class testSintact extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public testSintact() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public testSintact(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public testSintact(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\032\002\000\002\002" +
    "\006\000\002\003\004\000\002\003\003\000\002\010\005" +
    "\000\002\010\005\000\002\007\003\000\002\007\003\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\004" +
    "\011\000\002\004\012\000\002\004\011\000\002\004\012" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\014\003\000\002\014\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\011\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\007\000\002\013\011" +
    "\000\002\013\007\000\002\013\011\000\002\013\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\012\005\000\002\012" +
    "\003\000\002\011\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\033\004\001\002\000\004\040\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\034\uffe1\040\uffe1\001\002\000\012\005\023\006" +
    "\022\013\017\112\020\001\002\000\006\034\uffe2\040\uffe2" +
    "\001\002\000\006\034\ufffd\040\ufffd\001\002\000\006\034" +
    "\000\040\010\001\002\000\004\034\016\001\002\000\006" +
    "\034\ufffe\040\ufffe\001\002\000\004\002\uffff\001\002\000" +
    "\022\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\041\uffca\073\uffca\001\002\000\022\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\041\uffc9\073\uffc9\001\002" +
    "\000\016\022\032\023\030\024\024\025\025\026\031\027" +
    "\026\001\002\000\022\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\041\uffcb\073\uffcb\001\002\000\022\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\041\uffcc" +
    "\073\uffcc\001\002\000\012\005\uffc3\006\uffc3\013\uffc3\112" +
    "\uffc3\001\002\000\012\005\uffc2\006\uffc2\013\uffc2\112\uffc2" +
    "\001\002\000\012\005\uffc0\006\uffc0\013\uffc0\112\uffc0\001" +
    "\002\000\012\005\023\006\022\013\017\112\020\001\002" +
    "\000\012\005\uffc4\006\uffc4\013\uffc4\112\uffc4\001\002\000" +
    "\012\005\uffc1\006\uffc1\013\uffc1\112\uffc1\001\002\000\012" +
    "\005\uffc5\006\uffc5\013\uffc5\112\uffc5\001\002\000\004\041" +
    "\034\001\002\000\016\013\044\035\046\067\052\070\041" +
    "\101\054\102\045\001\002\000\004\044\uffdc\001\002\000" +
    "\006\071\171\074\172\001\002\000\004\044\uffdd\001\002" +
    "\000\004\044\uffdb\001\002\000\010\007\060\013\055\112" +
    "\056\001\002\000\004\044\uffde\001\002\000\004\044\uffdf" +
    "\001\002\000\006\071\uffbe\074\uffbe\001\002\000\004\044" +
    "\ufff9\001\002\000\004\013\063\001\002\000\004\044\uffe4" +
    "\001\002\000\004\044\062\001\002\000\004\044\uffe3\001" +
    "\002\000\010\007\060\013\055\112\056\001\002\000\004" +
    "\044\uffe5\001\002\000\004\044\ufffa\001\002\000\004\073" +
    "\uffc8\001\002\000\004\073\uffc6\001\002\000\004\073\061" +
    "\001\002\000\004\073\uffc7\001\002\000\004\044\ufffc\001" +
    "\002\000\006\034\uffe0\040\uffe0\001\002\000\006\036\uffbc" +
    "\071\uffbc\001\002\000\006\036\066\071\065\001\002\000" +
    "\004\013\166\001\002\000\004\004\067\001\002\000\004" +
    "\037\070\001\002\000\032\005\076\006\077\007\071\011" +
    "\107\012\072\013\102\015\073\075\106\104\075\105\101" +
    "\110\105\112\103\001\002\000\004\073\165\001\002\000" +
    "\004\073\164\001\002\000\006\005\161\006\160\001\002" +
    "\000\016\022\032\023\030\024\024\025\025\026\031\027" +
    "\026\001\002\000\004\073\155\001\002\000\022\021\150" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\073" +
    "\151\001\002\000\022\021\143\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\073\144\001\002\000\004\073" +
    "\142\001\002\000\004\073\141\001\002\000\030\014\133" +
    "\015\135\016\137\017\136\020\132\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\001\002\000\020\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\073\uffe7\001" +
    "\002\000\004\073\131\001\002\000\006\020\127\073\uffda" +
    "\001\002\000\010\005\113\006\112\110\111\001\002\000" +
    "\004\073\110\001\002\000\004\044\uffeb\001\002\000\004" +
    "\076\126\001\002\000\004\021\121\001\002\000\004\021" +
    "\114\001\002\000\004\111\115\001\002\000\004\076\116" +
    "\001\002\000\004\014\117\001\002\000\004\110\120\001" +
    "\002\000\004\073\uffd5\001\002\000\004\111\122\001\002" +
    "\000\004\076\123\001\002\000\004\014\124\001\002\000" +
    "\004\110\125\001\002\000\004\073\uffd3\001\002\000\004" +
    "\073\uffd9\001\002\000\004\110\130\001\002\000\004\073" +
    "\uffd2\001\002\000\004\044\uffe8\001\002\000\004\013\uffcd" +
    "\001\002\000\004\013\uffd1\001\002\000\004\013\140\001" +
    "\002\000\004\013\uffd0\001\002\000\004\013\uffce\001\002" +
    "\000\004\013\uffcf\001\002\000\004\073\uffd8\001\002\000" +
    "\004\044\uffec\001\002\000\004\044\uffe9\001\002\000\004" +
    "\111\145\001\002\000\004\044\ufff0\001\002\000\004\014" +
    "\146\001\002\000\004\110\147\001\002\000\004\073\uffd4" +
    "\001\002\000\004\111\152\001\002\000\004\044\ufff2\001" +
    "\002\000\006\014\153\073\uffd7\001\002\000\004\110\154" +
    "\001\002\000\004\073\uffd6\001\002\000\004\044\uffed\001" +
    "\002\000\012\005\023\006\022\013\017\112\020\001\002" +
    "\000\004\073\uffe6\001\002\000\004\073\163\001\002\000" +
    "\004\073\162\001\002\000\004\044\ufff1\001\002\000\004" +
    "\044\uffef\001\002\000\004\044\uffea\001\002\000\004\044" +
    "\uffee\001\002\000\006\036\uffbd\071\uffbd\001\002\000\004" +
    "\073\170\001\002\000\004\044\ufffb\001\002\000\004\013" +
    "\207\001\002\000\016\005\200\006\175\007\177\010\176" +
    "\011\174\012\173\001\002\000\004\073\206\001\002\000" +
    "\004\073\205\001\002\000\004\073\204\001\002\000\004" +
    "\073\203\001\002\000\004\073\202\001\002\000\004\073" +
    "\201\001\002\000\004\044\ufff8\001\002\000\004\044\ufff6" +
    "\001\002\000\004\044\ufff3\001\002\000\004\044\ufff7\001" +
    "\002\000\004\044\ufff5\001\002\000\004\044\ufff4\001\002" +
    "\000\006\071\uffbf\074\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\002\004\001\001\000\012\003\012\024" +
    "\011\025\010\026\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\014\025\010" +
    "\026\006\032\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\036" +
    "\005\034\006\037\007\041\010\042\012\035\017\047\027" +
    "\052\030\046\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\077\014\103\021\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$testSintact$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$testSintact$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$testSintact$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //golang
    public String golang="";
    public String pseudoG = "";



    public String expG = "";
    
    public String printG = "";
    public String printnlG = "";
    public String metodG = "";
    public String loopG = "";



    public int cont = 0;
    public LinkedList<Errors> SyntaxErrors = new LinkedList<Errors>();
    public String resultado ="";

    public void syntax_Errors(Symbol s){
        System.out.println("Errors R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        try {
            Errors esR = new Errors(s.value.toString(), s.left + 1, s.right + 1, "Errors Sintactico Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esR);
        } catch (Exception ex) {
            Errors esR = new Errors("null", s.left + 1, s.right + 1, "Errors Sintactico Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esR);
        }
    }

    public void unrecovered_syntax_Errors(Symbol s) throws java.lang.Exception{ 
        System.out.println("Errors NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        try {
            Errors esNR = new Errors(s.value.toString(), s.left + 1, s.right + 1, "Errors Sintactico No Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esNR);
        } catch (Exception ex) { 
            Errors esNR = new Errors("null", s.left + 1, s.right + 1, "Errors Sintactico No Recuperable", "Token o Simbolo no esperado");
            SyntaxErrors.add(esNR);
        }
    }

        String dEnteros(Object signo, String num){
        String aux = "";
        aux += " int = "; 
        for(int i = 1; i <= cont; i++){
            if(signo == null){aux += " "+num;
            }else{ aux += " "+signo+num; }
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dFlotantes(Object signo, String num){
        String aux = "";
        aux += " float64 = "; 
        for(int i = 1; i <= cont; i++){
            if(signo == null){aux += " "+num;
            }else{ aux += " "+signo+num; }
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dCadenas(String cadena){
        String aux = "";
        aux += " string = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+cadena;
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dBoolT(){
        String aux = "";
        aux += " bool = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+"true";
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dBoolF(){
        String aux = "";
        aux += " bool = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+"false";
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dChars(String chars){
        String aux = "";
        aux += " byte = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+chars;
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dCharAscii(String charse){
        String aux = "";
        aux += "  string = "; 
        for(int i = 1; i <= cont; i++){
            aux += " "+"string"+charse;
            if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String dOpracion(String tipo, String exp){

        String aux = "";

        switch (tipo.toLowerCase()) {
            case "boolean":
                aux += " bool = "; 
                for(int i = 1; i <= cont; i++){
                    aux += " "+exp;
                    if(i != cont){ aux += ","; }
                } aux += "\n"; cont = 0;
                break;
            case "numero":
                aux += " float64 = "; 
                for(int i = 1; i <= cont; i++){
                    aux += " "+exp;
                    if(i != cont){ aux += ","; }
                } aux += "\n"; cont = 0;
                break;
        }
        return (aux);
    }

    String aGeneral(String exp){
        String aux = "";
        aux += "  =  "; 
        for(int i = 1; i <= cont; i++){
        aux += " "+exp;
        if(i != cont){ aux += ","; }
        } aux += "\n"; cont = 0;
        return (aux);
    }

    String relacional(String exp, String operador, String exp2){
        String aux = "";
        aux += " " +exp;

        switch (operador.toLowerCase()) {
            case "mayor":
                aux += " > ";
                break;
            case "menor":
                aux += " < ";
                break;
            case "mayor_o_igual":
                aux += " >= ";
                break;
            case "menor_o_igual":
                aux += " <= ";
                break;
            case "es_igual":
                aux += " == ";
                break;  
            case "es_diferente":
                aux += " != ";
                break;  
        }

        aux += " "+exp2;
        return (aux);
    }

    String pot1(String entero, String exp){
        String aux = "";
        String valores = String.format("%s , %s", entero, exp);
        aux += " "+"math.Pow(" +  valores +")";
        return(aux);
    }

    String pot2(String entero, String Pexp, String exp){
        String aux = "";
        String valores = String.format("%s , %s", entero, Pexp);
        aux += " "+"math.Pow(" +  valores +") " + "+"+exp ;
        return(aux);
    }

    String prt(String dato){
        String aux = "";
        aux += "fmt.Print(" + dato + ")";
        return(aux);
    }

    String prtnl(String dato){
        String aux = "";
        aux += "fmt.Println(" + dato + ")";
        return(aux);
    }

    String cicloif(String dato1, String oper, String dato2){
        String aux = "";

        aux += "\t" + "if " + dato1 + " " + oper + " " + dato2 " {";

        aux += "}";

        return aux;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$testSintact$actions {

 
  private final testSintact parser;

  /** Constructor */
  CUP$testSintact$actions(testSintact parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$testSintact$do_action_part00000000(
    int                        CUP$testSintact$act_num,
    java_cup.runtime.lr_parser CUP$testSintact$parser,
    java.util.Stack            CUP$testSintact$stack,
    int                        CUP$testSintact$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$testSintact$result;

      /* select the action based on the action number */
      switch (CUP$testSintact$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		RESULT = start_val;
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$testSintact$parser.done_parsing();
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 

    golang += "\npackage main" + "\nimport(" + "\n\t" + '"' + "fmt" + '"' + "\n\t" + '"' + "math" + '"' + "\n)";
    golang += "\nfunc main(){" + "\n"+ pseudoG + "\n" + "}";
    System.out.println(golang); 
    
    
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO pseudo NT$0 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pseudo ::= pseudo sentencia 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("pseudo",1, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pseudo ::= sentencia 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("pseudo",1, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prints ::= IMPRIMIR type PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += "\n\t" + prt(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("prints",6, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prints ::= IMPRIMIRNL type PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += "\n\t" + prtnl(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("prints",6, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // coments ::= COMENTARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += "\t" + String.valueOf(a) +"\n"; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("coments",5, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // coments ::= COMENTARIOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += "\t" + String.valueOf(a) +"\n"; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("coments",5, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asignation ::= A ASIGNAR ENTERO PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += aGeneral(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignation ::= A ASIGNAR FLOTANTE PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += aGeneral(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignation ::= A ASIGNAR CADENA PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += aGeneral(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignation ::= A ASIGNAR CARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += aGeneral(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignation ::= A ASIGNAR CHARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += aGeneral(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignation ::= A ASIGNAR BOOLEAN PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += aGeneral(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("asignation",3, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= INGRESAR V COMO TIPO CONVALOR ENTERO PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dEnteros(null, String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= INGRESAR V COMO TIPO CONVALOR MENOS ENTERO PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dEnteros(String.valueOf(a),String.valueOf(b)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= INGRESAR V COMO TIPO CONVALOR FLOTANTE PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dFlotantes(null, String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= INGRESAR V COMO TIPO CONVALOR MENOS FLOTANTE PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dFlotantes(String.valueOf(a),String.valueOf(b)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-7)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= INGRESAR V COMO TIPO CONVALOR CADENA PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dCadenas(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= INGRESAR V COMO TIPO CONVALOR TRUE PYC 
            {
              Object RESULT =null;
		 pseudoG += dBoolT(); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= INGRESAR V COMO TIPO CONVALOR FALSE PYC 
            {
              Object RESULT =null;
		 pseudoG += dBoolF(); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= INGRESAR V COMO TIPO CONVALOR CARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dChars(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= INGRESAR V COMO TIPO CONVALOR CHARACTER PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		  String aux = String.valueOf(a);
            String aux2 = aux.replace("'${", "(").replace("}'",")");
            pseudoG += dCharAscii(String.valueOf(aux2)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= INGRESAR V COMO TIPO CONVALOR OPB PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dOpracion(String.valueOf(a),String.valueOf(b)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= INGRESAR V COMO TIPO CONVALOR OPR PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		 pseudoG += dOpracion(String.valueOf(a),String.valueOf(b)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPR ::= EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPR ::= TYPES OPRS TYPES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = relacional(String.valueOf(a), String.valueOf(b), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ciclos ::= ciclofor 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclos",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ciclos ::= ciclowhle 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclos",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ciclos ::= cicloDowhile 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("ciclos",4, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= sentif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += "\n\t" + prt(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += "\n\t" + prt(String.valueOf(a)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentif ::= SI TYPES OPRS TYPES ENTONCES contenido FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		 pseudoG += cicloif(String.valueOf(a),String.valueOf(b),String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("sentif",19, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contenido ::= prints 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contenido ::= coments 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contenido ::= declaration 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contenido ::= asignation 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenido ::= ciclos 
            {
              Object RESULT =null;

              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("contenido",13, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPB ::= EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPB ::= PARABRE EXP PARCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(String.valueOf(a) + String.valueOf(b) + String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPB ::= ID signo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(String.valueOf(a) + String.valueOf(b) + String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPB ::= ENTERO POT EXPPOT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(c);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot1(String.valueOf(a), String.valueOf(aux2)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPB ::= ENTERO POT EXPPOT MAS EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(b);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot2(String.valueOf(a), String.valueOf(aux2), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPB ::= PARABRE ENTERO POT EXPPOT PARCIERRA MAS EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(b);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot2(String.valueOf(a), String.valueOf(aux2), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPB ::= FLOTANTE POT EXPPOT MAS EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(b);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot2(String.valueOf(a), String.valueOf(aux2), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-4)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPB ::= PARABRE FLOTANTE POT EXPPOT PARCIERRA MAS EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		  String aux = String.valueOf(b);
        String aux2 = aux.replace("[","(").replace("]",")");
        RESULT = pot2(String.valueOf(a), String.valueOf(aux2), String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-6)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPB ::= EXP MOD EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(String.valueOf(a) + " % " + String.valueOf(c)); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPB",9, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // signo ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // signo ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // signo ::= POR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // signo ::= DIV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // signo ::= MOD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TYPES ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",15, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TYPES ::= FLOTANTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",15, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TYPES ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",15, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TYPES ::= EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("TYPES",15, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPRS ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPRS ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPRS ::= MAYOROIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPRS ::= MENOROIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPRS ::= ESIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPRS ::= ESDIFERENTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 RESULT = String.valueOf(a); 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("OPRS",14, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // A ::= A COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += ","+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("A",8, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // A ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += "\t"+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("A",8, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // V ::= V COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += ","+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("V",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.elementAt(CUP$testSintact$top-2)), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // V ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$testSintact$stack.peek()).value;
		 pseudoG += "\t"+"var"+" "+a; cont += 1; 
              CUP$testSintact$result = parser.getSymbolFactory().newSymbol("V",7, ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), ((java_cup.runtime.Symbol)CUP$testSintact$stack.peek()), RESULT);
            }
          return CUP$testSintact$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$testSintact$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$testSintact$do_action(
    int                        CUP$testSintact$act_num,
    java_cup.runtime.lr_parser CUP$testSintact$parser,
    java.util.Stack            CUP$testSintact$stack,
    int                        CUP$testSintact$top)
    throws java.lang.Exception
    {
              return CUP$testSintact$do_action_part00000000(
                               CUP$testSintact$act_num,
                               CUP$testSintact$parser,
                               CUP$testSintact$stack,
                               CUP$testSintact$top);
    }
}

}
