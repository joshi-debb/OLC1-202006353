/* The following code was generated by JFlex 1.7.0 */


package pkgLibs;
import java_cup.runtime.*;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/pkgLibs/analisisLexico.jflex</tt>
 */
public class testLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 24, 51, 26, 26,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    43,  1, 18,  0, 20,  0,  0, 19, 27, 28, 25, 35, 46, 36, 17, 23, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0, 47,  1,  1, 48, 49, 
     0, 12, 14, 11, 13,  8, 32, 41, 42, 39, 45,  2, 15,  7,  5, 10, 
    37, 44,  9, 34, 16,  6, 31,  2,  2, 40,  2, 29,  2, 30,  2,  4, 
     2, 12, 14, 11, 13,  8, 32, 41, 42, 39, 45,  2, 15,  7,  5, 10, 
    37, 44,  9, 34, 16,  6, 31,  2,  2, 40,  2, 21,  0, 22,  0,  0, 
     0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 50, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\11\1\1\5"+
    "\2\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\4\1\1\15\1\16\4\1\1\17\1\20\1\21\1\22"+
    "\1\0\1\2\1\23\2\0\2\4\1\0\2\23\15\0"+
    "\1\4\1\24\6\0\1\25\2\0\2\2\15\0\1\26"+
    "\1\0\1\26\1\27\10\0\2\23\1\30\4\0\1\31"+
    "\2\0\1\32\5\0\1\4\11\0\1\33\1\4\1\0"+
    "\1\34\1\0\2\35\1\2\1\23\1\35\2\0\1\2"+
    "\1\23\5\0\1\36\1\0\1\36\3\0\2\37\15\0"+
    "\1\30\17\0\2\40\1\4\1\0\1\41\5\0\1\23"+
    "\1\35\1\23\6\35\1\0\1\23\1\0\1\23\15\0"+
    "\1\4\3\0\1\42\12\0\1\43\1\0\1\44\22\0"+
    "\6\35\1\45\5\0\1\45\6\0\2\46\10\0\2\47"+
    "\7\0\1\50\2\51\1\52\1\4\1\53\1\4\17\0"+
    "\1\4\1\0\1\54\2\35\1\0\1\45\1\0\1\45"+
    "\7\0\1\55\5\0\1\55\2\0\1\56\2\0\1\56"+
    "\3\0\1\4\13\0\2\57\6\0\2\60\22\0\2\4"+
    "\2\61\2\62\1\0\1\63\1\0\1\63\1\64\1\65"+
    "\11\0\1\66\4\0\1\66\2\67\1\70\1\71\1\70"+
    "\1\71\10\0\1\72\3\0\1\73\3\0\1\74\3\0"+
    "\1\74\1\0\1\4\2\75\11\0\1\76\2\0\1\76"+
    "\16\0\1\77\1\0\1\77\2\100\4\0\2\101\3\0"+
    "\2\102\2\103\2\104\3\0\2\105\3\0\1\106\2\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\64"+
    "\0\u030c\0\u0340\0\u0374\0\64\0\150\0\u03a8\0\64\0\u03dc"+
    "\0\234\0\u0410\0\u0444\0\u0478\0\u04ac\0\150\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\64\0\64\0\64\0\64\0\u05e4"+
    "\0\u0618\0\u064c\0\u03a8\0\234\0\u0680\0\u06b4\0\u06e8\0\u071c"+
    "\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc"+
    "\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\234"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u030c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\64\0\u0f08\0\234\0\150\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u0680\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\234\0\u1214\0\u1248\0\234\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\234\0\u1588"+
    "\0\u15bc\0\64\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4"+
    "\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894"+
    "\0\u18c8\0\64\0\u18fc\0\234\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\64\0\234"+
    "\0\u2018\0\u204c\0\234\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630"+
    "\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\234\0\u279c"+
    "\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c"+
    "\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c"+
    "\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\64\0\u2f20\0\u2f54\0\u2f88"+
    "\0\u2fbc\0\u2ff0\0\u0c64\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4"+
    "\0\u3128\0\64\0\234\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c"+
    "\0\u3260\0\u3294\0\u32c8\0\64\0\234\0\u32fc\0\u3330\0\u3364"+
    "\0\u3398\0\u33cc\0\u3400\0\u3434\0\234\0\u3468\0\u349c\0\234"+
    "\0\u34d0\0\234\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608"+
    "\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8"+
    "\0\u37dc\0\u3810\0\u3844\0\u3878\0\64\0\u38ac\0\u38e0\0\u3914"+
    "\0\u1178\0\u3948\0\u1860\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c"+
    "\0\u3a80\0\u3ab4\0\64\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8"+
    "\0\234\0\u3bec\0\u3c20\0\64\0\u3c54\0\u3c88\0\234\0\u3cbc"+
    "\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c"+
    "\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94\0\64\0\234"+
    "\0\u3fc8\0\u3ffc\0\u4030\0\u4064\0\u4098\0\u40cc\0\64\0\234"+
    "\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238\0\u426c"+
    "\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4\0\u43d8\0\u440c"+
    "\0\u4440\0\u4474\0\u44a8\0\u44dc\0\64\0\234\0\64\0\234"+
    "\0\u4510\0\64\0\u4544\0\234\0\234\0\234\0\u4578\0\u45ac"+
    "\0\u45e0\0\u4614\0\u4648\0\u467c\0\u46b0\0\u46e4\0\u4718\0\64"+
    "\0\u474c\0\u4780\0\u47b4\0\u47e8\0\234\0\64\0\234\0\64"+
    "\0\u481c\0\234\0\u4850\0\u4884\0\u48b8\0\u48ec\0\u4920\0\u4954"+
    "\0\u4988\0\u49bc\0\u49f0\0\234\0\u4a24\0\u4a58\0\u4a8c\0\234"+
    "\0\u4ac0\0\u4af4\0\u4b28\0\64\0\u4b5c\0\u4b90\0\u4bc4\0\234"+
    "\0\u4bf8\0\u4c2c\0\64\0\234\0\u4c60\0\u4c94\0\u4cc8\0\u4cfc"+
    "\0\u4d30\0\u4d64\0\u4d98\0\u4dcc\0\u4e00\0\64\0\u4e34\0\u4e68"+
    "\0\234\0\u4e9c\0\u4ed0\0\u4f04\0\u4f38\0\u4f6c\0\u4fa0\0\u4fd4"+
    "\0\u5008\0\u503c\0\u5070\0\u50a4\0\u50d8\0\u510c\0\u5140\0\64"+
    "\0\u5174\0\234\0\64\0\234\0\u51a8\0\u51dc\0\u5210\0\u5244"+
    "\0\64\0\234\0\u5278\0\u52ac\0\u52e0\0\64\0\234\0\64"+
    "\0\234\0\64\0\234\0\u5314\0\u5348\0\u537c\0\64\0\234"+
    "\0\u53b0\0\u53e4\0\u5418\0\64\0\64\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\4"+
    "\1\20\1\21\1\22\3\2\1\23\1\24\1\25\1\24"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\4\1\43\1\24"+
    "\2\4\1\44\1\45\1\3\1\46\1\47\66\0\1\3"+
    "\1\50\1\51\1\52\14\50\6\0\1\3\1\0\1\3"+
    "\1\0\1\53\1\0\4\50\1\0\1\50\2\3\1\50"+
    "\1\0\4\50\1\0\2\50\2\0\1\3\5\0\2\54"+
    "\1\55\14\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\7\0\1\3\1\54\1\5"+
    "\1\56\14\54\1\57\5\0\1\3\1\0\1\3\1\0"+
    "\1\53\1\0\4\54\1\0\1\54\2\3\1\54\1\0"+
    "\4\54\1\0\2\54\2\0\1\3\4\0\1\60\1\55"+
    "\1\61\1\56\14\55\6\0\1\60\1\0\1\60\1\0"+
    "\1\62\1\0\4\55\1\0\1\55\2\60\1\55\1\0"+
    "\4\55\1\0\2\55\2\0\1\60\5\0\2\54\1\55"+
    "\1\54\1\63\3\54\1\64\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\3\54\1\65\1\54\1\66\1\54\1\67"+
    "\4\54\14\0\4\54\1\0\1\54\2\0\1\54\1\70"+
    "\1\71\3\54\1\0\2\54\10\0\2\54\1\55\1\72"+
    "\13\54\14\0\4\54\1\73\1\74\2\0\1\54\1\0"+
    "\4\54\1\0\1\54\1\75\10\0\2\54\1\55\3\54"+
    "\1\76\10\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\77\4\54"+
    "\1\100\7\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\5\54"+
    "\1\101\1\54\1\102\4\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\1\103\13\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\3\54\1\104\10\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\5\54\1\105\6\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\6\0\22\106\1\107"+
    "\41\106\2\0\1\110\1\0\15\110\3\0\1\111\10\0"+
    "\4\110\1\0\1\110\2\0\1\110\1\0\4\110\1\0"+
    "\2\110\7\0\1\3\1\50\1\51\1\52\14\50\6\0"+
    "\1\112\1\0\1\113\1\0\1\53\1\0\4\50\1\0"+
    "\1\50\2\3\1\50\1\0\4\50\1\0\2\50\2\0"+
    "\1\3\4\0\1\114\1\115\1\116\1\117\14\115\6\0"+
    "\1\114\1\0\1\114\1\0\1\120\1\0\4\115\1\0"+
    "\1\115\2\114\1\115\1\0\4\115\1\0\2\115\2\0"+
    "\1\114\4\0\1\121\1\54\1\122\1\55\14\54\6\0"+
    "\1\121\1\0\1\121\3\0\4\54\1\0\1\54\2\121"+
    "\1\54\1\0\4\54\1\0\2\54\2\0\1\121\5\0"+
    "\2\54\1\55\3\54\1\123\10\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\1\54\1\124\5\54\1\125\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\126\1\127\3\54"+
    "\1\0\2\54\16\0\1\130\35\0\2\131\16\0\2\54"+
    "\1\55\3\54\1\132\10\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\131\1\133\3\54\1\0\2\54\7\0"+
    "\1\3\1\50\1\51\1\52\14\50\6\0\1\3\1\0"+
    "\1\3\1\0\1\53\1\0\4\50\1\0\1\50\2\3"+
    "\1\50\1\0\4\50\1\0\2\50\2\0\1\134\5\0"+
    "\2\54\1\55\5\54\1\135\1\54\1\136\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\13\0\1\137\1\0\1\140\56\0\2\54\1\55"+
    "\1\141\1\54\1\142\11\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\7\54\1\143\4\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\50"+
    "\1\60\14\50\14\0\4\50\1\0\1\50\2\0\1\50"+
    "\1\0\4\50\1\0\2\50\7\0\1\3\1\50\1\51"+
    "\1\52\14\50\1\144\5\0\1\3\1\0\1\3\1\0"+
    "\1\53\1\0\4\50\1\0\1\50\2\3\1\50\1\0"+
    "\4\50\1\0\2\50\2\0\1\3\4\0\2\60\1\145"+
    "\1\52\14\60\6\0\1\60\1\0\1\60\1\0\1\62"+
    "\1\0\4\60\1\0\4\60\1\0\4\60\1\0\2\60"+
    "\2\0\1\60\4\0\1\60\1\54\1\61\1\56\14\54"+
    "\6\0\1\60\1\0\1\60\1\0\1\62\1\0\4\54"+
    "\1\0\1\54\2\60\1\54\1\0\4\54\1\0\2\54"+
    "\2\0\1\60\4\0\1\60\1\146\1\61\1\56\14\146"+
    "\6\0\1\60\1\0\1\60\1\0\1\62\1\0\4\146"+
    "\1\0\1\146\2\60\1\146\1\0\4\146\1\0\2\146"+
    "\2\0\1\60\6\0\1\147\61\0\1\60\1\50\1\145"+
    "\1\52\14\50\6\0\1\60\1\0\1\60\1\0\1\62"+
    "\1\0\4\50\1\0\1\50\2\60\1\50\1\0\4\50"+
    "\1\0\2\50\2\0\1\60\4\0\1\60\1\54\1\61"+
    "\1\56\14\54\1\150\5\0\1\60\1\0\1\60\1\0"+
    "\1\62\1\0\4\54\1\0\1\54\2\60\1\54\1\0"+
    "\4\54\1\0\2\54\2\0\1\60\4\0\1\151\1\115"+
    "\1\152\1\117\14\115\6\0\1\151\1\0\1\151\1\0"+
    "\1\120\1\0\4\115\1\0\1\115\2\151\1\115\1\0"+
    "\4\115\1\0\2\115\2\0\1\151\5\0\2\54\1\55"+
    "\2\54\1\153\11\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\13\54\1\154\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\1\155"+
    "\12\54\1\156\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\10\54"+
    "\1\157\3\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\14\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\1\54"+
    "\1\160\2\54\1\0\2\54\16\0\1\161\55\0\2\54"+
    "\1\55\3\54\1\162\10\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\13\54\1\163\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\12\0\1\164\61\0"+
    "\2\54\1\165\14\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\3\54\1\166\10\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\13\54\1\167\14\0\4\54\1\0\1\54\2\0\1\170"+
    "\1\0\4\54\1\0\2\54\7\0\1\60\1\54\1\61"+
    "\1\56\14\54\6\0\1\60\1\0\1\60\1\0\1\62"+
    "\1\0\4\54\1\171\1\172\2\60\1\54\1\0\4\54"+
    "\1\0\2\54\2\0\1\60\5\0\2\54\1\55\1\173"+
    "\1\54\1\174\11\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\4\54\1\175\3\54\1\176\3\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\10\54\1\177\3\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\200\14\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\5\54\1\201\6\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\30\0\1\106\43\0"+
    "\1\110\1\0\15\110\2\0\1\202\11\0\4\110\1\0"+
    "\1\110\2\0\1\110\1\0\4\110\1\0\2\110\33\0"+
    "\1\203\36\0\1\204\1\112\1\205\1\206\1\207\14\205"+
    "\6\204\1\112\1\0\1\112\1\204\1\210\1\204\4\205"+
    "\1\204\1\205\2\112\1\205\1\204\4\205\1\204\2\205"+
    "\2\204\1\112\3\204\1\211\1\113\1\212\1\213\1\214"+
    "\14\212\6\211\1\113\1\211\1\3\1\211\1\215\1\211"+
    "\4\212\1\211\1\212\2\113\1\212\1\211\4\212\1\211"+
    "\2\212\2\211\1\113\3\211\1\0\1\114\1\115\1\116"+
    "\1\117\14\115\6\0\1\114\1\0\1\114\1\0\1\120"+
    "\1\3\4\115\1\0\1\115\2\114\1\115\1\0\4\115"+
    "\1\0\2\115\2\0\1\114\5\0\2\115\1\151\14\115"+
    "\14\0\4\115\1\0\1\115\2\0\1\115\1\0\4\115"+
    "\1\0\2\115\7\0\1\114\1\115\1\116\1\117\14\115"+
    "\1\216\5\0\1\114\1\0\1\114\1\0\1\120\1\3"+
    "\4\115\1\0\1\115\2\114\1\115\1\0\4\115\1\0"+
    "\2\115\2\0\1\114\4\0\2\151\1\152\1\117\14\151"+
    "\6\0\1\151\1\0\1\151\1\0\1\120\1\60\4\151"+
    "\1\0\4\151\1\0\4\151\1\0\2\151\2\0\1\151"+
    "\4\0\1\217\1\0\1\220\23\0\1\217\1\0\1\217"+
    "\11\0\2\217\13\0\1\217\4\0\1\121\1\0\1\221"+
    "\23\0\1\121\1\0\1\121\4\0\1\222\4\0\2\121"+
    "\13\0\1\121\4\0\1\121\1\54\1\122\1\55\14\54"+
    "\1\223\5\0\1\121\1\0\1\121\3\0\1\54\1\224"+
    "\2\54\1\0\1\54\2\121\1\54\1\0\4\54\1\0"+
    "\2\54\2\0\1\121\5\0\2\54\1\55\4\54\1\225"+
    "\7\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\1\226\13\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\12\54\1\227\1\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\13\0\1\230\60\0\2\54\1\55\1\231"+
    "\13\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\57\0\1\232\14\0\2\54\1\55"+
    "\14\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\2\54\1\233\1\54\1\0\2\54\10\0\2\54\1\55"+
    "\13\54\1\234\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\4\54"+
    "\1\235\7\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\54\0\2\236\1\0\1\237"+
    "\57\0\1\240\20\0\2\54\1\55\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\236\1\241\1\54\1\242"+
    "\1\54\1\0\2\54\10\0\2\54\1\55\14\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\243\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\6\54\1\244\5\54\14\0"+
    "\4\54\1\245\1\246\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\11\0\1\3\61\0\1\60\1\50\1\145\1\52"+
    "\14\50\1\150\5\0\1\60\1\0\1\60\1\0\1\62"+
    "\1\0\4\50\1\0\1\50\2\60\1\50\1\0\4\50"+
    "\1\0\2\50\2\0\1\60\4\0\1\3\1\50\1\247"+
    "\1\52\14\50\6\0\1\3\1\0\1\3\1\0\1\53"+
    "\1\0\4\50\1\0\1\50\2\3\1\50\1\0\4\50"+
    "\1\0\2\50\2\0\1\3\6\0\1\60\61\0\1\151"+
    "\1\115\1\152\1\117\14\115\6\0\1\151\1\0\1\151"+
    "\1\0\1\120\1\60\4\115\1\0\1\115\2\151\1\115"+
    "\1\0\4\115\1\0\2\115\2\0\1\151\4\0\1\151"+
    "\1\115\1\152\1\117\14\115\1\250\5\0\1\151\1\0"+
    "\1\151\1\0\1\120\1\60\4\115\1\0\1\115\2\151"+
    "\1\115\1\0\4\115\1\0\2\115\2\0\1\151\5\0"+
    "\2\54\1\55\3\54\1\251\10\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\5\54\1\252\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\5\54\1\253\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\5\54\1\254\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\13\0"+
    "\1\255\60\0\2\54\1\55\1\256\13\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\5\54\1\257\6\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\23\0\1\260\30\0\2\261\15\0\1\60\1\54\1\61"+
    "\1\56\10\54\1\262\3\54\6\0\1\60\1\0\1\60"+
    "\1\0\1\62\1\0\4\54\1\0\1\54\2\60\1\54"+
    "\1\261\1\263\3\54\1\0\2\54\2\0\1\60\5\0"+
    "\2\54\1\55\6\54\1\264\5\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\5\54\1\265\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\3\54\1\266\10\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\54\0"+
    "\2\267\16\0\2\54\1\55\14\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\267\1\270\3\54\1\0\2\54"+
    "\10\0\2\54\1\271\14\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\272\2\54\10\0\2\54"+
    "\1\55\5\54\1\273\6\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\7\54\1\274\4\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\3\54\1\275\10\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\7\0\1\60"+
    "\1\54\1\61\1\56\12\54\1\276\1\54\6\0\1\60"+
    "\1\0\1\60\1\0\1\62\1\0\4\54\1\0\1\54"+
    "\2\60\1\54\1\0\4\54\1\0\2\54\2\0\1\60"+
    "\5\0\2\54\1\55\12\54\1\277\1\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\11\0\1\300\60\0\30\204\1\0\35\204\2\205\1\301"+
    "\14\205\7\204\1\0\4\204\4\205\1\204\1\205\2\204"+
    "\1\205\1\204\4\205\1\204\2\205\7\204\1\112\1\205"+
    "\1\206\1\207\14\205\1\302\5\204\1\112\1\0\1\112"+
    "\1\204\1\210\1\204\4\205\1\204\1\205\2\112\1\205"+
    "\1\204\4\205\1\204\2\205\2\204\1\112\4\204\2\301"+
    "\1\303\1\207\14\301\6\204\1\301\1\0\1\301\1\204"+
    "\1\304\1\204\4\301\1\204\4\301\1\204\4\301\1\204"+
    "\2\301\2\204\1\301\4\204\1\305\1\306\1\307\1\310"+
    "\14\306\6\204\1\305\1\0\1\305\1\204\1\311\1\204"+
    "\4\306\1\204\1\306\2\305\1\306\1\204\4\306\1\204"+
    "\2\306\2\204\1\305\3\204\31\211\1\312\34\211\2\212"+
    "\1\313\14\212\10\211\1\312\3\211\4\212\1\211\1\212"+
    "\2\211\1\212\1\211\4\212\1\211\2\212\7\211\1\113"+
    "\1\212\1\213\1\214\14\212\1\314\5\211\1\113\1\211"+
    "\1\3\1\211\1\215\1\211\4\212\1\211\1\212\2\113"+
    "\1\212\1\211\4\212\1\211\2\212\2\211\1\113\4\211"+
    "\2\313\1\315\1\214\14\313\6\211\1\313\1\211\1\60"+
    "\1\211\1\316\1\211\4\313\1\211\4\313\1\211\4\313"+
    "\1\211\2\313\2\211\1\313\4\211\1\317\1\320\1\321"+
    "\1\322\14\320\6\211\1\317\1\211\1\323\1\211\1\324"+
    "\1\211\4\320\1\211\1\320\2\317\1\320\1\211\4\320"+
    "\1\211\2\320\2\211\1\317\3\211\3\0\1\114\61\0"+
    "\1\217\1\0\1\220\23\0\1\217\1\0\1\217\2\0"+
    "\1\151\6\0\2\217\13\0\1\217\4\0\1\217\1\0"+
    "\1\220\15\0\1\325\5\0\1\217\1\0\1\217\2\0"+
    "\1\151\6\0\2\217\13\0\1\217\4\0\1\121\1\0"+
    "\1\221\15\0\1\223\5\0\1\121\1\0\1\121\4\0"+
    "\1\222\4\0\2\121\13\0\1\121\6\0\1\121\62\0"+
    "\2\54\1\55\10\54\1\326\3\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\6\54\1\327\5\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\14\54\14\0\4\54\1\330\1\331\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\12\0\1\332\61\0"+
    "\2\54\1\333\14\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\14\0\1\334\57\0"+
    "\2\54\1\55\1\54\1\335\12\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\3\54\1\336\10\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\7\54\1\337\4\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\21\0"+
    "\1\340\61\0\1\341\63\0\1\342\54\0\2\54\1\55"+
    "\6\54\1\343\5\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\4\54\1\344\7\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\4\54\1\345\7\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\3\54\1\346\10\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\26\0\1\347\45\0"+
    "\2\54\1\55\13\54\1\350\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\7\0\1\3"+
    "\1\50\1\247\1\52\14\50\1\144\5\0\1\3\1\0"+
    "\1\3\1\0\1\53\1\0\4\50\1\0\1\50\2\3"+
    "\1\50\1\0\4\50\1\0\2\50\2\0\1\3\6\0"+
    "\1\151\62\0\2\54\1\55\4\54\1\351\7\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\4\54\1\352\7\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\10\54\1\353\3\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\4\54\1\354\7\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\26\0\1\355\45\0\2\54\1\55\13\54\1\356"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\1\357\13\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\54\0\2\360\65\0\1\361\14\0\2\54\1\55"+
    "\14\54\14\0\4\54\1\0\1\54\2\0\1\54\1\360"+
    "\1\362\3\54\1\0\2\54\10\0\2\54\1\55\14\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\2\54"+
    "\1\363\1\54\1\0\2\54\10\0\2\54\1\55\1\54"+
    "\1\364\12\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\4\54"+
    "\1\365\7\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\13\54"+
    "\1\366\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\7\0\1\60\1\54\1\61\1\56"+
    "\14\54\6\0\1\60\1\0\1\60\1\0\1\62\1\0"+
    "\2\54\1\367\1\54\1\0\1\54\2\60\1\370\1\0"+
    "\4\54\1\0\2\54\2\0\1\60\51\0\2\371\16\0"+
    "\2\54\1\55\6\54\1\372\5\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\1\373\13\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\5\54\1\374\6\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\3\54\1\375\10\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\11\0\1\300"+
    "\22\0\1\376\35\0\1\204\1\301\1\205\1\303\1\207"+
    "\14\205\6\204\1\301\1\0\1\301\1\204\1\304\1\204"+
    "\4\205\1\204\1\205\2\301\1\205\1\204\4\205\1\204"+
    "\2\205\2\204\1\301\6\204\1\112\24\204\1\0\34\204"+
    "\1\301\1\205\1\303\1\207\14\205\1\377\5\204\1\301"+
    "\1\0\1\301\1\204\1\304\1\204\4\205\1\204\1\205"+
    "\2\301\1\205\1\204\4\205\1\204\2\205\2\204\1\301"+
    "\4\204\1\u0100\1\306\1\u0101\1\310\14\306\6\204\1\u0100"+
    "\1\0\1\u0100\1\204\1\311\1\204\4\306\1\204\1\306"+
    "\2\u0100\1\306\1\204\4\306\1\204\2\306\2\204\1\u0100"+
    "\4\204\1\305\1\306\1\307\1\310\14\306\6\204\1\305"+
    "\1\0\1\305\1\204\1\311\1\112\4\306\1\204\1\306"+
    "\2\305\1\306\1\204\4\306\1\204\2\306\2\204\1\305"+
    "\5\204\2\306\1\u0100\14\306\7\204\1\0\4\204\4\306"+
    "\1\204\1\306\2\204\1\306\1\204\4\306\1\204\2\306"+
    "\7\204\1\305\1\306\1\307\1\310\14\306\1\u0102\5\204"+
    "\1\305\1\0\1\305\1\204\1\311\1\112\4\306\1\204"+
    "\1\306\2\305\1\306\1\204\4\306\1\204\2\306\2\204"+
    "\1\305\4\204\2\u0100\1\u0101\1\310\14\u0100\6\204\1\u0100"+
    "\1\0\1\u0100\1\204\1\311\1\301\4\u0100\1\204\4\u0100"+
    "\1\204\4\u0100\1\204\2\u0100\2\204\1\u0100\4\204\1\u0103"+
    "\1\204\1\u0104\23\204\1\u0103\1\0\1\u0103\11\204\2\u0103"+
    "\13\204\1\u0103\3\204\27\0\1\u0105\34\0\1\211\1\313"+
    "\1\212\1\315\1\214\14\212\6\211\1\313\1\211\1\60"+
    "\1\211\1\316\1\211\4\212\1\211\1\212\2\313\1\212"+
    "\1\211\4\212\1\211\2\212\2\211\1\313\6\211\1\113"+
    "\25\211\1\312\33\211\1\313\1\212\1\315\1\214\14\212"+
    "\1\u0106\5\211\1\313\1\211\1\60\1\211\1\316\1\211"+
    "\4\212\1\211\1\212\2\313\1\212\1\211\4\212\1\211"+
    "\2\212\2\211\1\313\4\211\1\u0107\1\320\1\u0108\1\322"+
    "\14\320\6\211\1\u0107\1\211\1\u0109\1\211\1\324\1\211"+
    "\4\320\1\211\1\320\2\u0107\1\320\1\211\4\320\1\211"+
    "\2\320\2\211\1\u0107\4\211\1\317\1\320\1\321\1\322"+
    "\14\320\6\211\1\317\1\211\1\323\1\211\1\324\1\113"+
    "\4\320\1\211\1\320\2\317\1\320\1\211\4\320\1\211"+
    "\2\320\2\211\1\317\5\211\2\320\1\u0107\14\320\10\211"+
    "\1\312\3\211\4\320\1\211\1\320\2\211\1\320\1\211"+
    "\4\320\1\211\2\320\7\211\1\317\1\320\1\321\1\322"+
    "\14\320\1\u010a\5\211\1\317\1\211\1\323\1\211\1\324"+
    "\1\113\4\320\1\211\1\320\2\317\1\320\1\211\4\320"+
    "\1\211\2\320\2\211\1\317\4\211\2\u0107\1\u0108\1\322"+
    "\14\u0107\6\211\1\u0107\1\211\1\u0109\1\211\1\324\1\313"+
    "\4\u0107\1\211\4\u0107\1\211\4\u0107\1\211\2\u0107\2\211"+
    "\1\u0107\3\211\1\0\1\114\1\115\1\116\1\117\14\115"+
    "\6\0\1\u010b\1\0\1\114\1\0\1\120\1\3\4\115"+
    "\1\0\1\115\2\114\1\115\1\0\4\115\1\0\2\115"+
    "\2\0\1\114\3\0\1\211\1\u010c\1\211\1\u010d\23\211"+
    "\1\u010c\1\211\1\u010e\11\211\2\u010c\13\211\1\u010c\3\211"+
    "\3\0\1\217\62\0\2\54\1\55\7\54\1\u010f\4\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\u0110\1\u0111\3\54\1\0"+
    "\2\54\20\0\1\u0112\53\0\2\54\1\55\5\54\1\u0113"+
    "\6\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\15\0\1\u0114\30\0\1\u0115\2\u0116"+
    "\2\0\1\u0117\17\0\1\60\1\54\1\61\1\56\2\54"+
    "\1\u0118\11\54\6\0\1\60\1\0\1\60\1\0\1\62"+
    "\1\0\3\54\1\u0119\1\u0116\1\u011a\2\60\1\u011b\1\0"+
    "\4\54\1\0\2\54\2\0\1\60\10\0\1\u011c\60\0"+
    "\2\54\1\55\1\u011d\13\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\1\u011e\13\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\54\0\2\u011f\24\0"+
    "\1\u0120\121\0\2\u0121\16\0\2\54\1\55\14\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\u011f\1\u0122\3\54"+
    "\1\0\2\54\10\0\2\54\1\55\3\54\1\u0123\10\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\u0121\1\u0124\3\54\1\0"+
    "\2\54\10\0\2\54\1\55\4\54\1\u0125\7\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\22\0\1\u0126\51\0\2\54\1\55\7\54\1\u0127"+
    "\4\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\5\54\1\u0128"+
    "\6\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\u0129\14\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\5\54\1\u012a\6\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\u012b\14\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\17\0"+
    "\1\u012c\54\0\2\54\1\55\4\54\1\u012d\7\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\6\54\1\u012e\5\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\46\0\1\u012f\31\0\1\u0130\57\0\2\54\1\55"+
    "\14\54\14\0\3\54\1\u0131\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\1\54"+
    "\1\u0132\12\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\13\54"+
    "\1\u0133\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\1\u0134\13\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\u0135\1\u0136\3\54\1\0"+
    "\2\54\10\0\2\54\1\55\7\54\1\u0137\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\7\54\1\u0138\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\13\0\1\u0139\60\0\2\54\1\55\13\54\1\u013a"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\7\54\1\u0128\4\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\u013b\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\7\54\1\u013c\4\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\31\0\1\u013d\40\0\3\204\1\301\24\204\1\0\34\204"+
    "\1\u0100\1\306\1\u0101\1\310\14\306\6\204\1\u0100\1\0"+
    "\1\u0100\1\204\1\311\1\301\4\306\1\204\1\306\2\u0100"+
    "\1\306\1\204\4\306\1\204\2\306\2\204\1\u0100\4\204"+
    "\1\u0100\1\306\1\u0101\1\310\14\306\1\u013e\5\204\1\u0100"+
    "\1\0\1\u0100\1\204\1\311\1\301\4\306\1\204\1\306"+
    "\2\u0100\1\306\1\204\4\306\1\204\2\306\2\204\1\u0100"+
    "\6\204\1\305\24\204\1\0\34\204\1\u0103\1\204\1\u0104"+
    "\23\204\1\u0103\1\0\1\u0103\2\204\1\u0100\6\204\2\u0103"+
    "\13\204\1\u0103\4\204\1\u0103\1\204\1\u0104\15\204\1\u013f"+
    "\5\204\1\u0103\1\0\1\u0103\2\204\1\u0100\6\204\2\u0103"+
    "\13\204\1\u0103\3\204\3\211\1\313\25\211\1\312\33\211"+
    "\1\u0107\1\320\1\u0108\1\322\14\320\6\211\1\u0107\1\211"+
    "\1\u0109\1\211\1\324\1\313\4\320\1\211\1\320\2\u0107"+
    "\1\320\1\211\4\320\1\211\2\320\2\211\1\u0107\4\211"+
    "\1\u0107\1\320\1\u0108\1\322\14\320\1\u0140\5\211\1\u0107"+
    "\1\211\1\u0109\1\211\1\324\1\313\4\320\1\211\1\320"+
    "\2\u0107\1\320\1\211\4\320\1\211\2\320\2\211\1\u0107"+
    "\3\211\1\0\1\151\1\115\1\152\1\117\14\115\6\0"+
    "\1\u0141\1\0\1\151\1\0\1\120\1\60\4\115\1\0"+
    "\1\115\2\151\1\115\1\0\4\115\1\0\2\115\2\0"+
    "\1\151\3\0\3\211\1\317\25\211\1\312\33\211\1\u010c"+
    "\1\211\1\u010d\23\211\1\u010c\1\211\1\u010e\2\211\1\u0107"+
    "\6\211\2\u010c\13\211\1\u010c\4\211\1\u010c\1\211\1\u010d"+
    "\15\211\1\u0142\5\211\1\u010c\1\211\1\u010e\2\211\1\u0107"+
    "\6\211\2\u010c\13\211\1\u010c\3\211\1\0\1\217\1\0"+
    "\1\220\23\0\1\u0143\1\0\1\217\2\0\1\151\6\0"+
    "\2\217\13\0\1\217\5\0\2\54\1\55\10\54\1\u0144"+
    "\3\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\20\0\1\u0145\53\0\2\54\1\55"+
    "\5\54\1\u0146\6\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\16\0\1\u0147\35\0"+
    "\2\u0148\22\0\1\u0149\65\0\1\u014a\35\0\2\u014b\30\0"+
    "\1\u014c\51\0\2\54\1\55\3\54\1\u014d\10\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\u0148\1\u014e\3\54"+
    "\1\0\2\54\10\0\2\54\1\55\1\54\1\u014f\12\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\3\54\1\u0150\10\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\u014b\1\u0151"+
    "\3\54\1\0\2\54\10\0\2\54\1\55\7\54\1\u0152"+
    "\4\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\6\54\1\u0153"+
    "\5\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\20\0\1\u0154\112\0\2\u0155\30\0"+
    "\1\u0156\56\0\2\54\1\55\5\54\1\u0157\6\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\14\54\14\0\4\54\1\u0155"+
    "\1\u0158\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\2\54\1\u0159\11\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\12\0"+
    "\1\u015a\61\0\2\54\1\u015b\14\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\7\0"+
    "\1\60\1\54\1\61\1\56\5\54\1\u015c\6\54\6\0"+
    "\1\60\1\0\1\60\1\0\1\62\1\0\4\54\1\0"+
    "\1\54\2\60\1\54\1\0\4\54\1\0\2\54\2\0"+
    "\1\60\4\0\1\60\1\54\1\61\1\56\5\54\1\u015d"+
    "\6\54\6\0\1\60\1\0\1\60\1\0\1\62\1\0"+
    "\4\54\1\0\1\54\2\60\1\54\1\0\4\54\1\0"+
    "\2\54\2\0\1\60\17\0\1\u015e\51\0\2\54\1\55"+
    "\7\54\1\u015f\4\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\3\54\1\u0160\10\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\16\0\1\u0161\67\0"+
    "\1\u0162\51\0\2\54\1\55\3\54\1\u0163\10\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\7\54\1\u0164\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\7\54\1\u0165\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\7\54\1\u0166\4\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\17\0\1\u0167\54\0\2\54\1\55\4\54\1\u0168"+
    "\7\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\12\54\1\u0169"+
    "\1\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\4\54\1\u016a"+
    "\7\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\21\0\1\u016b\52\0\2\54\1\55"+
    "\3\54\1\u016c\10\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\7\0\1\60\1\54"+
    "\1\61\1\56\6\54\1\u016d\5\54\6\0\1\60\1\0"+
    "\1\60\1\0\1\62\1\0\4\54\1\0\1\54\2\60"+
    "\1\54\1\0\4\54\1\0\2\54\2\0\1\60\5\0"+
    "\2\54\1\55\1\u0128\13\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\6\0\3\204"+
    "\1\u0100\24\204\1\0\36\204\1\u0103\24\204\1\0\33\204"+
    "\3\211\1\u0107\25\211\1\312\35\211\1\u010c\25\211\1\312"+
    "\32\211\2\0\2\54\1\55\3\54\1\u016e\10\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\13\0\1\u016f\60\0\2\54\1\55\1\u0170\13\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\26\0\1\u0171\53\0\1\u0172\60\0\1\u0173"+
    "\127\0\1\u0174\23\0\1\u0175\54\0\2\54\1\55\13\54"+
    "\1\u0176\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\3\54\1\u0177"+
    "\10\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\1\u0178\13\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\2\54\1\u0179\1\54"+
    "\1\0\2\54\10\0\2\54\1\55\4\54\1\u017a\7\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\14\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\u017b\1\u017c\3\54\1\0"+
    "\2\54\22\0\1\u017d\115\0\2\u017e\16\0\2\54\1\55"+
    "\7\54\1\u017f\4\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\14\54\14\0\4\54\1\0\1\54\2\0\1\54\1\u017e"+
    "\1\u0180\3\54\1\0\2\54\62\0\1\u0181\10\0\1\60"+
    "\1\54\1\61\1\56\14\54\6\0\1\60\1\0\1\60"+
    "\1\0\1\62\1\0\4\54\1\0\1\54\2\60\1\54"+
    "\1\0\4\54\1\0\1\u0182\1\54\2\0\1\60\5\0"+
    "\2\54\1\u0183\14\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\u0184"+
    "\14\54\14\0\4\54\1\0\1\54\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\47\0\2\u0185\23\0\2\54\1\55"+
    "\14\54\14\0\4\54\1\u0185\1\u0186\2\0\1\54\1\0"+
    "\4\54\1\0\2\54\10\0\2\54\1\55\14\54\14\0"+
    "\4\54\1\u0187\1\u0188\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\17\0\1\u0189\71\0\1\u018a\46\0\2\54\1\55"+
    "\4\54\1\u018b\7\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\12\54\1\u018c\1\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\4\54\1\u018d\7\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\4\54\1\u018e\7\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\5\54\1\u018f\6\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\7\54\1\u0190\4\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\17\0\1\u0191\54\0"+
    "\2\54\1\55\4\54\1\u0128\7\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\5\54\1\u0192\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\10\0"+
    "\2\54\1\55\4\54\1\u0193\7\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\20\0"+
    "\1\u0194\56\0\1\u0195\71\0\1\u0196\56\0\1\u0197\71\0"+
    "\1\u0198\51\0\2\54\1\55\5\54\1\u0199\6\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\1\u019a\13\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\6\54\1\u019b\5\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\1\54\1\u019c\12\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\7\54\1\u019d\4\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\22\0\1\u019e\51\0\2\54\1\55\7\54\1\u019f\4\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\17\0\1\u01a0\63\0\1\u01a1\54\0\2\54"+
    "\1\55\4\54\1\u01a2\7\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\10\0\2\54"+
    "\1\55\4\54\1\u01a3\7\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\14\0\1\u01a4"+
    "\57\0\2\54\1\55\1\54\1\u01a5\12\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\7\0\1\60\1\54\1\61\1\56\14\54\6\0\1\60"+
    "\1\0\1\60\1\0\1\62\1\0\4\54\1\0\1\54"+
    "\2\60\1\54\1\u01a6\1\u01a7\3\54\1\0\2\54\2\0"+
    "\1\60\4\0\1\60\1\54\1\61\1\56\14\54\6\0"+
    "\1\60\1\0\1\60\1\0\1\62\1\0\4\54\1\0"+
    "\1\54\2\60\1\54\1\u01a8\1\u01a9\3\54\1\0\2\54"+
    "\2\0\1\60\13\0\1\u01aa\55\0\2\54\1\55\3\54"+
    "\1\u01ab\10\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\4\54"+
    "\1\u01ac\7\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\2\54"+
    "\1\u01ad\11\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\16\0\1\u01ae\55\0\2\54"+
    "\1\55\1\u01af\13\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\5\54\1\u01b0\6\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\23\0\1\u01b1\66\0"+
    "\1\u01b2\111\0\2\u01b3\21\0\1\u01b4\60\0\2\54\1\55"+
    "\10\54\1\u01b5\3\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\13\54\1\u01b6\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\14\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\u01b3\1\u01b7"+
    "\3\54\1\0\2\54\10\0\2\54\1\55\1\u01b8\13\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\12\0\1\u01b9\61\0\2\54\1\u01ba\14\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\16\0\1\u01bb\55\0\2\54\1\55\3\54"+
    "\1\u01bc\10\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\57\0\1\u01bd\14\0\2\54"+
    "\1\55\14\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\2\54\1\u01be\1\54\1\0\2\54\57\0\1\u01bf"+
    "\14\0\2\54\1\55\14\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\2\54\1\u01c0\1\54\1\0\2\54"+
    "\13\0\1\u01c1\60\0\2\54\1\55\1\u01c2\13\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\10\0\2\54\1\55\3\54\1\u01c3\10\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\15\0\1\u01c4\56\0\2\54\1\55\13\54\1\u01c5"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\20\0\1\u01c6\62\0\1\u01c7\64\0\1\u01c8"+
    "\53\0\2\54\1\55\5\54\1\u01c9\6\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\4\54\1\u01ca\7\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\5\54\1\u01cb\6\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\13\0\1\u01cc\57\0\1\60\1\54\1\61\1\56\1\u01cd"+
    "\13\54\6\0\1\60\1\0\1\60\1\0\1\62\1\0"+
    "\4\54\1\0\1\54\2\60\1\54\1\0\4\54\1\0"+
    "\2\54\2\0\1\60\11\0\1\u01ce\57\0\2\54\1\55"+
    "\1\54\1\u01cf\12\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\14\0\1\u01d0\57\0"+
    "\2\54\1\55\1\54\1\u01d1\12\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\26\0"+
    "\1\u01d2\45\0\2\54\1\55\13\54\1\u01d3\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\10\0\2\54\1\55\13\54\1\u01d4\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\16\0"+
    "\1\u01d5\55\0\2\54\1\55\4\54\1\u01d6\7\54\14\0"+
    "\4\54\1\0\1\54\2\0\1\54\1\0\4\54\1\0"+
    "\2\54\22\0\1\u01d7\54\0\1\u01d8\60\0\2\54\1\55"+
    "\7\54\1\u01d9\4\54\14\0\4\54\1\0\1\54\2\0"+
    "\1\54\1\0\4\54\1\0\2\54\10\0\2\54\1\55"+
    "\1\u01da\13\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\25\0\1\u01db\46\0\2\54"+
    "\1\55\12\54\1\u01dc\1\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\22\0\1\u01dd"+
    "\51\0\2\54\1\55\7\54\1\u01de\4\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\22\0\1\u01df\51\0\2\54\1\55\7\54\1\u01e0\4\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\16\0\1\u01e1\55\0\2\54\1\55\3\54"+
    "\1\u01e2\10\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\4\54"+
    "\1\u01e3\7\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\13\0\1\u01e4\60\0\2\54"+
    "\1\55\7\54\1\u01e5\4\54\14\0\4\54\1\0\1\54"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\47\0\2\u01e6"+
    "\23\0\2\54\1\55\14\54\14\0\4\54\1\u01e6\1\u01e7"+
    "\2\0\1\54\1\0\4\54\1\0\2\54\25\0\1\u01e8"+
    "\46\0\2\54\1\55\12\54\1\u01e9\1\54\14\0\4\54"+
    "\1\0\1\54\2\0\1\54\1\0\4\54\1\0\2\54"+
    "\25\0\1\u01ea\46\0\2\54\1\55\12\54\1\u01eb\1\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\10\0\2\54\1\55\5\54\1\u01ec\6\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\26\0\1\u01ed\45\0\2\54\1\55\4\54"+
    "\1\u01ee\7\54\14\0\4\54\1\0\1\54\2\0\1\54"+
    "\1\0\4\54\1\0\2\54\10\0\2\54\1\55\14\54"+
    "\14\0\4\54\1\u01ef\1\u01f0\2\0\1\54\1\0\4\54"+
    "\1\0\2\54\22\0\1\u01f1\51\0\2\54\1\55\14\54"+
    "\14\0\4\54\1\0\1\54\2\0\1\54\1\u01f2\1\u01f3"+
    "\3\54\1\0\2\54\25\0\1\u01f4\56\0\1\u01f5\53\0"+
    "\2\54\1\55\5\54\1\u01f6\6\54\14\0\4\54\1\0"+
    "\1\54\2\0\1\54\1\0\4\54\1\0\2\54\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\3\1\1\11\2\1\1\11"+
    "\14\1\4\11\1\0\2\1\2\0\2\1\1\0\2\1"+
    "\15\0\2\1\6\0\1\1\2\0\2\1\15\0\1\11"+
    "\1\0\2\1\10\0\3\1\4\0\1\1\2\0\1\1"+
    "\5\0\1\1\11\0\2\1\1\0\1\11\1\0\5\1"+
    "\2\0\2\1\5\0\1\11\1\0\1\1\3\0\2\1"+
    "\15\0\1\1\17\0\1\11\2\1\1\0\1\1\5\0"+
    "\11\1\1\0\1\1\1\0\1\1\15\0\1\1\3\0"+
    "\1\1\12\0\1\1\1\0\1\1\22\0\6\1\1\11"+
    "\5\0\1\1\6\0\1\11\1\1\10\0\1\11\1\1"+
    "\7\0\7\1\17\0\1\1\1\0\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\7\0\1\11\5\0\1\1\2\0"+
    "\1\11\2\0\1\1\3\0\1\1\13\0\1\11\1\1"+
    "\6\0\1\11\1\1\22\0\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\3\1\11\0\1\11\4\0"+
    "\1\1\1\11\1\1\1\11\3\1\10\0\1\1\3\0"+
    "\1\1\3\0\1\11\3\0\1\1\1\0\1\1\1\11"+
    "\1\1\11\0\1\11\2\0\1\1\16\0\1\11\1\0"+
    "\1\1\1\11\1\1\4\0\1\11\1\1\3\0\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\3\0\1\11\1\1"+
    "\3\0\2\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<Errors> LexicError = new LinkedList<Errors>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public testLex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: "+yytext()+ " Linea: "+yyline+1+" Columna: "+yycolumn+1);
        Errors datos = new Errors(yytext(), yyline+1, yycolumn+1, "Error Léxico", "Simbolo no existe en el lenguaje");
        LexicError.add(datos);
            } 
            // fall through
          case 72: break;
          case 2: 
            { System.out.println("tk_expresion, lexema:"+yytext());
                    return new Symbol(sym.EXP, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 73: break;
          case 3: 
            { System.out.println("tk_int, lexema:"+yytext());
                    return new Symbol(sym.ENTERO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 74: break;
          case 4: 
            { System.out.println("tk_id, lexema:"+yytext());
                    return new Symbol(sym.ID, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 75: break;
          case 5: 
            { System.out.println("tk_punto, lexema:"+yytext());
                    return new Symbol(sym.PUNTO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 76: break;
          case 6: 
            { System.out.println("tk_div, lexema:"+yytext());
                    return new Symbol(sym.DIV, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 77: break;
          case 7: 
            { /* omitirlos */
            } 
            // fall through
          case 78: break;
          case 8: 
            { System.out.println("tk_mult, lexema:"+yytext());
                    return new Symbol(sym.POR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 79: break;
          case 9: 
            { System.out.println("tk_parabre, lexema:"+yytext());
                    return new Symbol(sym.PARABRE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 80: break;
          case 10: 
            { System.out.println("tk_parcierra, lexema:"+yytext());
                    return new Symbol(sym.PARCIERRA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 81: break;
          case 11: 
            { System.out.println("tk_parabre, lexema:"+yytext());
                    return new Symbol(sym.CORABRE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 82: break;
          case 12: 
            { System.out.println("tk_parcierra, lexema:"+yytext());
                    return new Symbol(sym.CORCIERRA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 83: break;
          case 13: 
            { System.out.println("tk_suma, lexema:"+yytext());
                    return new Symbol(sym.MAS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 84: break;
          case 14: 
            { System.out.println("tk_resta, lexema:"+yytext());
                    return new Symbol(sym.MENOS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 85: break;
          case 15: 
            { System.out.println("tk_coma, lexema:"+yytext());
                    return new Symbol(sym.COMA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 86: break;
          case 16: 
            { System.out.println("tk_puntoycoma, lexema:"+yytext());
                    return new Symbol(sym.PYC, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 87: break;
          case 17: 
            { System.out.println("tk_intabre, lexema:"+yytext());
                    return new Symbol(sym.INTABRE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 88: break;
          case 18: 
            { System.out.println("tk_intcierra, lexema:"+yytext());
                    return new Symbol(sym.INTCIERRA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 89: break;
          case 19: 
            { System.out.println("tk_expR, lexema:"+yytext());
                    return new Symbol(sym.EXPR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 90: break;
          case 20: 
            { System.out.println("tk_or, lexema:"+yytext());
                    return new Symbol(sym.OR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 91: break;
          case 21: 
            { System.out.println("tk_string, lexema:"+yytext());
                    return new Symbol(sym.CADENA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 92: break;
          case 22: 
            { System.out.println("tk_si, lexema:"+yytext());
                    return new Symbol(sym.SI, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 93: break;
          case 23: 
            { System.out.println("tk_asignar, lexema:"+yytext());
                    return new Symbol(sym.ASIGNAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 94: break;
          case 24: 
            { System.out.println("tk_float, lexema:"+yytext());
                    return new Symbol(sym.FLOTANTE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 95: break;
          case 25: 
            { System.out.println("tk_not, lexema:"+yytext());
                    return new Symbol(sym.NOT, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 96: break;
          case 26: 
            { System.out.println("tk_mod, lexema:"+yytext());
                    return new Symbol(sym.MOD, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 97: break;
          case 27: 
            { System.out.println("tk_and, lexema:"+yytext());
                    return new Symbol(sym.AND, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 98: break;
          case 28: 
            { System.out.println("tk_car, lexema:"+yytext());
                    return new Symbol(sym.CARACTER, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 99: break;
          case 29: 
            { System.out.println("tk_comentario, lexema:"+yytext());
                    return new Symbol(sym.COMENTARIO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 100: break;
          case 30: 
            { System.out.println("tk_expPot, lexema:"+yytext());
                    return new Symbol(sym.EXPPOT, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 101: break;
          case 31: 
            { System.out.println("tk_fin, lexema:"+yytext());
                    return new Symbol(sym.FIN, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 102: break;
          case 32: 
            { System.out.println("tk_osi, lexema:"+yytext());
                    return new Symbol(sym.OSI, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 103: break;
          case 33: 
            { System.out.println("tk_como, lexema:"+yytext());
                    return new Symbol(sym.COMO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 104: break;
          case 34: 
            { System.out.println("tk_para, lexema:"+yytext());
                    return new Symbol(sym.PARA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 105: break;
          case 35: 
            { System.out.println("tk_menor, lexema:"+yytext());
                    return new Symbol(sym.MENOR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 106: break;
          case 36: 
            { System.out.println("tk_mayor, lexema:"+yytext());
                    return new Symbol(sym.MAYOR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 107: break;
          case 37: 
            { System.out.println("tk_comentarios, lexema:"+yytext());
                    return new Symbol(sym.COMENTARIOS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 108: break;
          case 38: 
            { System.out.println("tk_false, lexema:"+yytext());
                    return new Symbol(sym.FALSE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 109: break;
          case 39: 
            { System.out.println("tk_segun, lexema:"+yytext());
                    return new Symbol(sym.SEGUN, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 110: break;
          case 40: 
            { System.out.println("tk_hacer, lexema:"+yytext());
                    return new Symbol(sym.HACER, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 111: break;
          case 41: 
            { System.out.println("tk_hasta, lexema:"+yytext());
                    return new Symbol(sym.HASTA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 112: break;
          case 42: 
            { System.out.println("tk_tipo, lexema:"+yytext());
                    return new Symbol(sym.TIPO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 113: break;
          case 43: 
            { System.out.println("tk_metodo, lexema:"+yytext());
                    return new Symbol(sym.METODO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 114: break;
          case 44: 
            { System.out.println("tk_char, lexema:"+yytext());
                    return new Symbol(sym.CHARACTER, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 115: break;
          case 45: 
            { System.out.println("tk_finsi, lexema:"+yytext());
                    return new Symbol(sym.FINSI, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 116: break;
          case 46: 
            { System.out.println("tk_inicio, lexema:"+yytext());
                    return new Symbol(sym.INICIO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 117: break;
          case 47: 
            { System.out.println("tk_repetir, lexema:"+yytext());
                    return new Symbol(sym.REPETIR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 118: break;
          case 48: 
            { System.out.println("tk_funcion, lexema:"+yytext());
                    return new Symbol(sym.FUNCION, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 119: break;
          case 49: 
            { System.out.println("tk_mientras, lexema:"+yytext());
                    return new Symbol(sym.MIENTRAS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 120: break;
          case 50: 
            { System.out.println("tk_entonces, lexema:"+yytext());
                    return new Symbol(sym.ENTONCES, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 121: break;
          case 51: 
            { System.out.println("tk_igual, lexema:"+yytext());
                    return new Symbol(sym.ESIGUAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 122: break;
          case 52: 
            { System.out.println("tk_ejecutar, lexema:"+yytext());
                    return new Symbol(sym.EJECUTAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 123: break;
          case 53: 
            { System.out.println("tk_retornar, lexema:"+yytext());
                    return new Symbol(sym.RETORNAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 124: break;
          case 54: 
            { System.out.println("tk_finpara, lexema:"+yytext());
                    return new Symbol(sym.FINPARA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 125: break;
          case 55: 
            { System.out.println("tk_pot, lexema:"+yytext());
                    return new Symbol(sym.POT, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 126: break;
          case 56: 
            { System.out.println("tk_ingresar, lexema:"+yytext());
                    return new Symbol(sym.INGRESAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 127: break;
          case 57: 
            { System.out.println("tk_imprimir, lexema:"+yytext());
                    return new Symbol(sym.IMPRIMIR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 128: break;
          case 58: 
            { System.out.println("tk_convalor, lexema:"+yytext());
                    return new Symbol(sym.CONVALOR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 129: break;
          case 59: 
            { System.out.println("tk_true, lexema:"+yytext());
                    return new Symbol(sym.TRUE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 130: break;
          case 60: 
            { System.out.println("tk_finsegun, lexema:"+yytext());
                    return new Symbol(sym.FINSEGUN, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 131: break;
          case 61: 
            { System.out.println("tk_hastaque, lexema:"+yytext());
                    return new Symbol(sym.HASTAQUE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 132: break;
          case 62: 
            { System.out.println("tk_finmetodo, lexema:"+yytext());
                    return new Symbol(sym.FINMETODO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 133: break;
          case 63: 
            { System.out.println("tk_finfuncion, lexema:"+yytext());
                    return new Symbol(sym.FINFUNCION, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 134: break;
          case 64: 
            { System.out.println("tk_imprimirnl, lexema:"+yytext());
                    return new Symbol(sym.IMPRIMIRNL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 135: break;
          case 65: 
            { System.out.println("tk_diferente, lexema:"+yytext());
                    return new Symbol(sym.ESDIFERENTE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 136: break;
          case 66: 
            { System.out.println("tk_finmientras, lexema:"+yytext());
                    return new Symbol(sym.FINMIENTRAS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 137: break;
          case 67: 
            { System.out.println("tk_menorigual, lexema:"+yytext());
                    return new Symbol(sym.MENOROIGUAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 138: break;
          case 68: 
            { System.out.println("tk_mayorigual, lexema:"+yytext());
                    return new Symbol(sym.MAYOROIGUAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 139: break;
          case 69: 
            { System.out.println("tk_conparametros, lexema:"+yytext());
                    return new Symbol(sym.CONPARAMETROS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 140: break;
          case 70: 
            { System.out.println("tk_conincremental, lexema:"+yytext());
                    return new Symbol(sym.CONINCREMENTAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 141: break;
          case 71: 
            { System.out.println("tk_delocontrario, lexema:"+yytext());
                    return new Symbol(sym.DELOCONTRARIO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
