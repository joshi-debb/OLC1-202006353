/* The following code was generated by JFlex 1.7.0 */


package pkgLibs;
import pkgProject.*;
import java_cup.runtime.*;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/pkgLibs/analisisLexico.jflex</tt>
 */
public class testLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 30, 55, 32, 32,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    48,  5, 24,  0, 26,  0,  0, 25, 33, 34, 31, 42, 50, 43, 23, 29, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0, 51,  1,  1, 52, 53, 
     0, 14, 16, 13, 15, 10, 20, 46, 47, 38, 41, 40, 17,  9,  7, 12, 
    44, 49, 11, 22, 18,  8, 19,  2,  2, 45,  2, 35,  2, 36,  2,  6, 
     2, 14, 16, 13, 15, 10, 20, 46, 47, 38, 41, 40, 17,  9,  7, 12, 
    44, 49, 11, 22, 18,  8, 19,  2,  2, 45,  2, 27,  0, 28,  0,  0, 
     0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 54, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\2\1\4"+
    "\15\1\1\5\2\1\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\4\15\1\16\1\17\2\1\1\20\1\21"+
    "\1\22\1\23\1\0\1\2\1\24\1\0\1\15\1\0"+
    "\2\4\4\0\1\2\2\24\15\0\1\4\1\25\13\0"+
    "\1\26\1\0\1\26\1\0\1\27\2\0\2\2\10\0"+
    "\1\4\1\0\2\15\2\0\1\15\1\4\2\0\1\30"+
    "\4\0\1\24\1\15\2\24\1\31\1\32\3\0\1\32"+
    "\5\0\1\33\2\0\1\34\5\0\1\4\11\0\1\35"+
    "\1\4\4\0\2\36\2\0\1\37\1\0\2\40\1\2"+
    "\1\24\1\40\2\15\2\0\1\2\1\24\1\0\2\15"+
    "\1\2\1\0\1\24\5\0\1\41\1\4\1\0\1\41"+
    "\1\24\1\0\1\24\1\4\1\41\1\15\15\0\1\31"+
    "\1\2\13\0\2\15\3\0\2\42\1\4\1\0\1\43"+
    "\11\0\1\4\3\0\1\24\1\40\1\24\7\40\3\15"+
    "\1\24\1\0\1\24\1\0\1\24\10\0\3\15\1\24"+
    "\1\0\1\2\2\24\1\0\1\41\1\15\1\0\2\24"+
    "\1\41\1\15\1\0\1\24\1\41\2\15\1\4\10\0"+
    "\1\44\4\0\1\45\1\0\1\46\25\0\2\47\10\0"+
    "\2\50\1\0\3\40\1\2\1\40\1\24\3\40\1\51"+
    "\4\0\1\2\1\0\1\24\1\51\6\0\1\15\1\4"+
    "\1\41\1\15\1\24\1\0\2\15\1\41\1\15\1\0"+
    "\1\41\11\0\1\52\2\53\1\54\1\4\1\55\1\4"+
    "\20\0\1\4\10\0\1\56\5\0\1\56\1\0\1\57"+
    "\2\40\1\2\2\24\1\40\1\0\1\51\1\0\1\2"+
    "\2\24\1\0\1\51\3\41\2\15\2\60\4\0\1\60"+
    "\4\0\1\4\14\0\2\61\6\0\2\62\12\0\2\40"+
    "\2\0\1\41\12\0\2\4\2\63\2\64\1\0\1\65"+
    "\1\0\2\65\1\66\1\67\10\0\1\70\4\0\1\70"+
    "\2\71\2\72\1\71\1\72\2\73\2\0\4\15\2\0"+
    "\1\74\6\0\1\75\3\0\1\75\1\0\1\15\1\4"+
    "\2\76\11\0\1\77\2\0\1\77\17\0\1\100\1\0"+
    "\1\100\3\101\4\0\2\102\3\0\2\103\2\104\2\105"+
    "\3\0\2\106\3\0\1\107\2\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\70\0\u0498\0\u04d0"+
    "\0\u0508\0\70\0\160\0\u0540\0\70\0\u0578\0\250\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\160\0\u0690\0\u06c8\0\u0700\0\70"+
    "\0\70\0\u0118\0\u0118\0\u0738\0\u0770\0\u07a8\0\u0540\0\u07e0"+
    "\0\250\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\250\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\70\0\u0f88\0\250\0\u0498"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\160"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u0818"+
    "\0\u1650\0\70\0\u1688\0\u16c0\0\u16f8\0\160\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\250\0\u1848\0\u1880\0\250\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\250\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\70\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48"+
    "\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2258\0\u2300\0\u2338\0\u1228\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u23a8\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\70\0\250\0\u2b50\0\u2b88\0\250\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u11f0\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3678\0\u3720\0\u3758\0\u2300\0\u2300"+
    "\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918"+
    "\0\u3950\0\u3988\0\u39c0\0\250\0\u39f8\0\u3a30\0\u3a68\0\u3aa0"+
    "\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0"+
    "\0\70\0\250\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130"+
    "\0\u4168\0\u41a0\0\70\0\250\0\u41d8\0\u4210\0\u4248\0\u4280"+
    "\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0\0\70\0\u4408"+
    "\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u10d8\0\u4590"+
    "\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u2370"+
    "\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u47c0\0\u4868\0\u48a0"+
    "\0\u2450\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28"+
    "\0\u4a60\0\u4a98\0\250\0\u4ad0\0\u4b08\0\250\0\u4b40\0\250"+
    "\0\u4b78\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00"+
    "\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0"+
    "\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080"+
    "\0\u50b8\0\u50f0\0\70\0\u5128\0\u5160\0\u5198\0\u51d0\0\u5208"+
    "\0\250\0\u5240\0\70\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358"+
    "\0\u5390\0\u53c8\0\u17a0\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0"+
    "\0\u21e8\0\u3640\0\u3720\0\u3790\0\u5518\0\u5550\0\70\0\u12d0"+
    "\0\u5588\0\u55c0\0\u55f8\0\u5630\0\250\0\u5668\0\u56a0\0\u56d8"+
    "\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898"+
    "\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8\0\70\0\250"+
    "\0\u5a20\0\u5a58\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\70\0\250"+
    "\0\u5b70\0\u5ba8\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8"+
    "\0\u5d30\0\u5d68\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u4868\0\u5e80"+
    "\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040"+
    "\0\u6078\0\u60b0\0\u60e8\0\70\0\250\0\70\0\250\0\u6120"+
    "\0\70\0\u6158\0\u12d0\0\250\0\250\0\250\0\u6190\0\u61c8"+
    "\0\u6200\0\u6238\0\u6270\0\u62a8\0\u62e0\0\u6318\0\70\0\u6350"+
    "\0\u6388\0\u63c0\0\u63f8\0\250\0\70\0\u12d0\0\u6430\0\u6468"+
    "\0\250\0\u64a0\0\70\0\250\0\u64d8\0\u6510\0\u6548\0\u6580"+
    "\0\u65b8\0\u65f0\0\u6628\0\u6660\0\250\0\u6698\0\u66d0\0\u6708"+
    "\0\u6740\0\u6778\0\u67b0\0\70\0\u67e8\0\u6820\0\u6858\0\250"+
    "\0\u6890\0\u68c8\0\u6900\0\70\0\250\0\u6938\0\u6970\0\u69a8"+
    "\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0\0\u6af8\0\70\0\u6b30"+
    "\0\u6b68\0\250\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48\0\u6c80\0\u6cb8"+
    "\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08\0\u6e40\0\u6e78"+
    "\0\u6eb0\0\70\0\u6ee8\0\250\0\70\0\u12d0\0\250\0\u6f20"+
    "\0\u6f58\0\u6f90\0\u6fc8\0\70\0\250\0\u7000\0\u7038\0\u7070"+
    "\0\70\0\250\0\u12d0\0\250\0\u12d0\0\250\0\u70a8\0\u70e0"+
    "\0\u7118\0\70\0\250\0\u7150\0\u7188\0\u71c0\0\70\0\70"+
    "\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\2\4\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\2\1\31\1\32\1\33\1\32\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\43\1\44\1\45"+
    "\1\46\2\4\1\47\1\32\1\4\1\50\1\51\1\3"+
    "\1\52\1\53\72\0\1\3\1\54\1\55\1\0\1\3"+
    "\1\56\16\54\1\0\1\54\6\0\1\3\1\0\1\3"+
    "\1\0\1\57\1\0\2\54\1\42\1\60\1\42\2\60"+
    "\2\3\4\54\1\0\1\54\2\0\1\3\5\0\2\61"+
    "\2\0\1\62\16\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\7\0"+
    "\1\3\1\61\1\5\1\0\1\3\1\63\16\61\1\0"+
    "\1\61\1\64\5\0\1\3\1\0\1\3\1\0\1\57"+
    "\1\0\2\61\1\42\1\43\1\42\2\43\2\3\4\61"+
    "\1\0\1\61\2\0\1\3\6\0\1\65\24\0\1\66"+
    "\1\67\37\0\1\3\1\54\1\70\1\0\1\3\1\56"+
    "\16\54\1\0\1\54\1\0\1\66\1\67\3\0\1\3"+
    "\1\0\1\3\1\0\1\57\1\0\2\54\1\42\1\60"+
    "\1\42\2\60\2\3\4\54\1\0\1\54\2\0\1\3"+
    "\4\0\1\71\1\62\1\72\1\0\1\71\1\63\16\62"+
    "\1\0\1\62\6\0\1\71\1\0\1\71\1\0\1\73"+
    "\1\0\2\62\1\42\1\62\1\42\2\62\2\71\4\62"+
    "\1\0\1\62\2\0\1\71\5\0\2\61\2\0\1\62"+
    "\1\61\1\74\3\61\1\75\10\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\3\61\1\76\1\61"+
    "\1\77\1\61\1\100\6\61\1\0\1\61\14\0\2\61"+
    "\1\101\1\102\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\1\103\15\61\1\104\1\105"+
    "\14\0\2\61\1\0\1\61\1\0\1\61\1\106\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\3\61"+
    "\1\107\12\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\110\4\61\1\111\11\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\5\61\1\112\1\61"+
    "\1\113\6\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\1\114\15\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\3\61\1\115\12\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\5\61"+
    "\1\116\10\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\3\61\1\117\12\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\1\61\1\120\5\61"+
    "\1\121\6\61\1\0\1\61\14\0\2\61\1\122\1\123"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\20\0\1\124"+
    "\32\0\2\125\23\0\2\61\2\0\1\62\3\61\1\126"+
    "\12\61\1\0\1\61\14\0\2\61\1\125\1\127\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\6\0\30\130\1\131"+
    "\37\130\2\0\1\132\3\0\17\132\1\0\1\132\3\0"+
    "\1\133\10\0\2\132\1\0\1\132\1\0\2\132\2\0"+
    "\4\132\1\0\1\132\7\0\1\3\1\54\1\55\1\0"+
    "\1\3\1\56\16\54\1\0\1\54\6\0\1\134\1\0"+
    "\1\135\1\0\1\57\1\0\2\54\1\42\1\60\1\42"+
    "\2\60\2\3\4\54\1\0\1\54\2\0\1\3\4\0"+
    "\1\136\1\137\1\140\1\0\1\136\1\141\16\137\1\0"+
    "\1\137\6\0\1\136\1\0\1\136\1\0\1\142\1\0"+
    "\2\137\1\0\1\137\1\0\2\137\2\136\4\137\1\0"+
    "\1\137\2\0\1\136\4\0\1\143\1\144\1\145\1\0"+
    "\1\143\1\146\16\144\1\0\1\144\6\0\1\143\1\0"+
    "\1\143\3\0\2\144\1\0\1\144\1\0\2\144\2\143"+
    "\4\144\1\0\1\144\2\0\1\143\4\0\1\42\1\147"+
    "\1\150\1\0\1\42\1\151\1\152\1\147\1\153\13\147"+
    "\1\0\1\147\6\0\1\42\1\0\1\42\3\0\2\147"+
    "\7\42\4\147\1\0\1\147\2\0\1\42\4\0\1\42"+
    "\1\61\1\154\1\0\1\42\1\155\1\156\1\61\1\157"+
    "\13\61\1\0\1\61\6\0\1\42\1\0\1\42\3\0"+
    "\2\61\1\42\1\43\1\42\2\43\2\42\4\61\1\0"+
    "\1\61\2\0\1\42\4\0\1\42\1\147\1\150\1\0"+
    "\1\42\1\151\16\147\1\0\1\147\6\0\1\42\1\0"+
    "\1\42\3\0\2\147\7\42\4\147\1\0\1\147\2\0"+
    "\1\42\4\0\1\42\1\61\1\154\1\0\1\42\1\155"+
    "\16\61\1\0\1\61\6\0\1\42\1\0\1\42\3\0"+
    "\2\61\1\42\1\43\1\42\2\43\2\42\4\61\1\0"+
    "\1\61\2\0\1\42\4\0\1\3\1\54\1\55\1\0"+
    "\1\3\1\56\16\54\1\0\1\54\6\0\1\3\1\0"+
    "\1\3\1\0\1\57\1\0\2\54\1\42\1\60\1\42"+
    "\2\60\2\3\4\54\1\0\1\54\2\0\1\160\5\0"+
    "\2\61\2\0\1\62\5\61\1\161\1\61\1\162\6\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\7\61\1\163\6\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\54\2\0\1\71\16\54\1\0\1\54\14\0\2\54"+
    "\1\0\1\54\1\0\2\54\2\0\4\54\1\0\1\54"+
    "\7\0\1\3\1\54\1\55\1\0\1\3\1\56\16\54"+
    "\1\0\1\54\1\164\5\0\1\3\1\0\1\3\1\0"+
    "\1\57\1\0\2\54\1\42\1\60\1\42\2\60\2\3"+
    "\4\54\1\0\1\54\2\0\1\3\4\0\2\71\1\165"+
    "\1\0\1\71\1\56\16\71\1\0\1\71\6\0\1\71"+
    "\1\0\1\71\1\0\1\73\1\0\2\71\1\42\1\71"+
    "\1\42\10\71\1\0\1\71\2\0\1\71\4\0\1\42"+
    "\1\54\1\166\1\0\1\42\1\167\16\54\1\0\1\54"+
    "\6\0\1\42\1\0\1\42\3\0\2\54\1\42\1\60"+
    "\1\42\2\60\2\42\4\54\1\0\1\54\2\0\1\42"+
    "\4\0\1\71\1\61\1\72\1\0\1\71\1\63\16\61"+
    "\1\0\1\61\6\0\1\71\1\0\1\71\1\0\1\73"+
    "\1\0\2\61\1\42\1\43\1\42\2\43\2\71\4\61"+
    "\1\0\1\61\2\0\1\71\4\0\1\71\1\170\1\72"+
    "\1\0\1\71\1\63\16\170\1\0\1\170\6\0\1\71"+
    "\1\0\1\71\1\0\1\73\1\0\2\170\1\42\1\170"+
    "\1\42\2\170\2\71\4\170\1\0\1\170\2\0\1\71"+
    "\6\0\1\171\67\0\1\65\2\172\21\0\1\173\1\66"+
    "\1\67\33\0\2\172\1\0\30\66\1\174\37\66\2\0"+
    "\1\175\3\0\17\175\1\0\1\175\14\0\2\175\1\0"+
    "\1\175\1\0\2\175\2\0\4\175\1\0\1\175\7\0"+
    "\1\3\1\54\1\70\1\172\1\176\1\56\16\54\1\0"+
    "\1\54\1\177\1\66\1\67\3\0\1\3\1\0\1\3"+
    "\1\0\1\57\1\0\2\54\1\42\1\60\1\42\2\60"+
    "\2\3\4\54\1\0\1\54\2\0\1\3\2\172\2\0"+
    "\1\71\1\54\1\165\1\0\1\71\1\56\16\54\1\0"+
    "\1\54\6\0\1\71\1\0\1\71\1\0\1\73\1\0"+
    "\2\54\1\42\1\60\1\42\2\60\2\71\4\54\1\0"+
    "\1\54\2\0\1\71\4\0\1\71\1\61\1\72\1\0"+
    "\1\71\1\63\16\61\1\0\1\61\1\200\5\0\1\71"+
    "\1\0\1\71\1\0\1\73\1\0\2\61\1\42\1\43"+
    "\1\42\2\43\2\71\4\61\1\0\1\61\2\0\1\71"+
    "\4\0\1\201\1\137\1\202\1\0\1\201\1\141\16\137"+
    "\1\0\1\137\6\0\1\201\1\0\1\201\1\0\1\142"+
    "\1\0\2\137\1\0\1\137\1\0\2\137\2\201\4\137"+
    "\1\0\1\137\2\0\1\201\5\0\2\61\2\0\1\62"+
    "\2\61\1\203\13\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\13\61\1\204\2\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\1\205\12\61"+
    "\1\206\2\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\10\61\1\207\5\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\16\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\1\61"+
    "\1\210\2\61\1\0\1\61\20\0\1\211\57\0\2\61"+
    "\2\0\1\62\3\61\1\212\12\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\13\61\1\213\2\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\14\0\1\214\63\0\2\61"+
    "\2\0\1\215\16\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\3\61\1\216\12\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\13\61\1\217"+
    "\2\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\1\220\3\61\1\0\1\61\7\0\1\71"+
    "\1\61\1\72\1\0\1\71\1\63\16\61\1\221\1\222"+
    "\6\0\1\71\1\0\1\71\1\0\1\73\1\0\2\61"+
    "\1\42\1\43\1\42\2\43\2\71\4\61\1\0\1\61"+
    "\2\0\1\71\5\0\2\61\2\0\1\62\1\223\1\61"+
    "\1\224\13\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\4\61\1\225\3\61\1\226\5\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\10\61"+
    "\1\227\5\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\230\16\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\5\61\1\231\10\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\4\61\1\232"+
    "\11\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\1\233\15\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\12\61\1\234\3\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\15\0\1\235\62\0\2\61\2\0\1\62"+
    "\1\236\15\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\64\0\1\237"+
    "\13\0\2\61\2\0\1\62\16\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\2\61\1\240"+
    "\1\61\1\0\1\61\36\0\1\130\41\0\1\132\3\0"+
    "\17\132\1\0\1\132\2\0\1\241\11\0\2\132\1\0"+
    "\1\132\1\0\2\132\2\0\4\132\1\0\1\132\41\0"+
    "\1\242\34\0\1\243\1\134\1\244\1\245\1\243\1\134"+
    "\1\246\16\244\1\243\1\244\6\243\1\134\1\0\1\134"+
    "\1\243\1\247\1\243\2\244\1\250\1\251\1\250\2\251"+
    "\2\134\4\244\1\243\1\244\2\243\1\134\3\243\1\252"+
    "\1\135\1\253\1\254\1\252\1\135\1\255\16\253\1\252"+
    "\1\253\6\252\1\135\1\252\1\3\1\252\1\256\1\252"+
    "\2\253\1\257\1\260\1\257\2\260\2\135\4\253\1\252"+
    "\1\253\2\252\1\135\3\252\1\0\1\136\1\137\1\140"+
    "\1\0\1\136\1\141\16\137\1\0\1\137\6\0\1\136"+
    "\1\0\1\136\1\0\1\142\1\261\2\137\1\0\1\137"+
    "\1\0\2\137\2\136\4\137\1\0\1\137\2\0\1\136"+
    "\5\0\2\137\2\0\1\201\16\137\1\0\1\137\14\0"+
    "\2\137\1\0\1\137\1\0\2\137\2\0\4\137\1\0"+
    "\1\137\7\0\1\136\1\137\1\140\1\0\1\136\1\141"+
    "\16\137\1\0\1\137\1\262\5\0\1\136\1\0\1\136"+
    "\1\0\1\142\1\261\2\137\1\0\1\137\1\0\2\137"+
    "\2\136\4\137\1\0\1\137\2\0\1\136\4\0\2\201"+
    "\1\202\1\0\1\201\1\141\16\201\1\0\1\201\6\0"+
    "\1\201\1\0\1\201\1\0\1\142\1\263\2\201\1\0"+
    "\1\201\1\0\10\201\1\0\1\201\2\0\1\201\4\0"+
    "\1\264\1\0\1\265\1\0\1\264\27\0\1\264\1\0"+
    "\1\264\12\0\2\264\10\0\1\264\4\0\1\143\1\266"+
    "\1\267\1\0\1\143\1\270\16\266\1\0\1\266\6\0"+
    "\1\143\1\0\1\143\3\0\1\266\1\271\1\0\1\266"+
    "\1\0\2\266\2\143\4\266\1\0\1\266\2\0\1\143"+
    "\5\0\2\144\2\0\1\272\16\144\1\0\1\144\14\0"+
    "\2\144\1\0\1\144\1\0\2\144\2\0\4\144\1\0"+
    "\1\144\7\0\1\143\1\144\1\145\1\0\1\143\1\146"+
    "\16\144\1\0\1\144\1\273\5\0\1\143\1\0\1\143"+
    "\3\0\1\144\1\274\1\0\1\144\1\0\2\144\2\143"+
    "\4\144\1\0\1\144\2\0\1\143\4\0\1\275\1\276"+
    "\1\277\1\0\1\275\1\300\16\276\1\0\1\276\6\0"+
    "\1\275\1\0\1\275\1\0\1\73\1\0\1\276\1\301"+
    "\1\42\1\302\1\42\2\302\2\275\4\276\1\0\1\276"+
    "\2\0\1\275\5\0\2\147\2\0\1\42\16\147\1\0"+
    "\1\147\14\0\2\147\1\0\1\147\1\0\2\147\2\0"+
    "\4\147\1\0\1\147\7\0\1\42\1\147\1\150\1\0"+
    "\1\42\1\151\16\147\1\0\1\147\1\303\5\0\1\42"+
    "\1\0\1\42\3\0\2\147\7\42\4\147\1\0\1\147"+
    "\2\0\1\42\4\0\2\42\1\150\1\0\1\42\1\151"+
    "\16\42\1\0\1\42\6\0\1\42\1\0\1\42\3\0"+
    "\15\42\1\0\1\42\2\0\1\42\5\0\2\147\2\0"+
    "\1\42\16\147\1\0\1\147\14\0\2\147\1\304\1\305"+
    "\1\0\2\147\2\0\2\147\1\306\1\147\1\0\1\147"+
    "\10\0\2\147\2\0\1\42\16\147\1\0\1\147\14\0"+
    "\2\147\1\0\1\147\1\0\2\147\2\0\1\307\3\147"+
    "\1\0\1\147\7\0\1\42\1\61\1\154\1\0\1\42"+
    "\1\155\16\61\1\0\1\61\1\303\5\0\1\42\1\0"+
    "\1\42\3\0\2\61\1\42\1\43\1\42\2\43\2\42"+
    "\4\61\1\0\1\61\2\0\1\42\4\0\1\71\1\43"+
    "\1\72\1\0\1\71\1\63\16\43\1\0\1\43\6\0"+
    "\1\71\1\0\1\71\1\0\1\73\1\0\2\43\1\42"+
    "\1\43\1\42\2\43\2\71\4\43\1\0\1\43\2\0"+
    "\1\71\5\0\2\61\2\0\1\62\16\61\1\0\1\61"+
    "\14\0\2\61\1\304\1\310\1\0\2\61\2\0\2\61"+
    "\1\311\1\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\16\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\1\312\3\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\13\61\1\313\2\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\4\61\1\314\11\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\6\61\1\315\7\61\1\316\1\317\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\11\0"+
    "\1\3\65\0\1\71\1\54\1\165\1\0\1\71\1\56"+
    "\16\54\1\0\1\54\1\200\5\0\1\71\1\0\1\71"+
    "\1\0\1\73\1\0\2\54\1\42\1\60\1\42\2\60"+
    "\2\71\4\54\1\0\1\54\2\0\1\71\4\0\1\42"+
    "\1\54\1\166\1\0\1\42\1\167\16\54\1\0\1\54"+
    "\1\303\5\0\1\42\1\0\1\42\3\0\2\54\1\42"+
    "\1\60\1\42\2\60\2\42\4\54\1\0\1\54\2\0"+
    "\1\42\4\0\1\71\1\60\1\165\1\0\1\71\1\56"+
    "\16\60\1\0\1\60\6\0\1\71\1\0\1\71\1\0"+
    "\1\73\1\0\2\60\1\42\1\60\1\42\2\60\2\71"+
    "\4\60\1\0\1\60\2\0\1\71\4\0\1\3\1\54"+
    "\1\320\1\0\1\3\1\56\16\54\1\0\1\54\6\0"+
    "\1\3\1\0\1\3\1\0\1\57\1\0\2\54\1\42"+
    "\1\60\1\42\2\60\2\3\4\54\1\0\1\54\2\0"+
    "\1\3\6\0\1\174\67\0\1\65\2\172\22\0\1\66"+
    "\1\67\33\0\2\172\3\0\1\175\3\0\17\175\1\0"+
    "\1\175\2\0\1\174\11\0\2\175\1\0\1\175\1\0"+
    "\2\175\2\0\4\175\1\0\1\175\11\0\1\321\67\0"+
    "\1\71\65\0\1\201\1\137\1\202\1\0\1\201\1\141"+
    "\16\137\1\0\1\137\6\0\1\201\1\0\1\201\1\0"+
    "\1\142\1\263\2\137\1\0\1\137\1\0\2\137\2\201"+
    "\4\137\1\0\1\137\2\0\1\201\4\0\1\201\1\137"+
    "\1\202\1\0\1\201\1\141\16\137\1\0\1\137\1\322"+
    "\5\0\1\201\1\0\1\201\1\0\1\142\1\263\2\137"+
    "\1\0\1\137\1\0\2\137\2\201\4\137\1\0\1\137"+
    "\2\0\1\201\5\0\2\61\2\0\1\62\3\61\1\323"+
    "\12\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\5\61\1\324\10\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\5\61\1\325\10\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\5\61"+
    "\1\326\10\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\15\0\1\327"+
    "\62\0\2\61\2\0\1\62\1\330\15\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\5\61\1\331"+
    "\10\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\25\0\1\332\25\0"+
    "\2\333\22\0\1\71\1\61\1\72\1\0\1\71\1\63"+
    "\10\61\1\334\5\61\1\0\1\61\6\0\1\71\1\0"+
    "\1\71\1\0\1\73\1\0\2\61\1\335\1\336\1\42"+
    "\2\43\2\71\4\61\1\0\1\61\2\0\1\71\5\0"+
    "\2\61\2\0\1\62\6\61\1\337\7\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\5\61\1\340"+
    "\10\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\3\61\1\341\12\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\53\0\2\342\23\0\2\61\2\0\1\62\16\61\1\0"+
    "\1\61\14\0\2\61\1\342\1\343\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\344\16\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\345\1\61\10\0\2\61\2\0\1\62"+
    "\5\61\1\346\10\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\7\61\1\347\6\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\3\61\1\350"+
    "\12\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\7\0\1\71\1\61"+
    "\1\72\1\0\1\71\1\63\12\61\1\351\3\61\1\0"+
    "\1\61\6\0\1\71\1\0\1\71\1\0\1\73\1\0"+
    "\2\61\1\42\1\43\1\42\2\43\2\71\4\61\1\0"+
    "\1\61\2\0\1\71\5\0\2\61\2\0\1\62\12\61"+
    "\1\352\3\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\10\61\1\353\5\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\6\61\1\354\7\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\16\61\1\355\1\356\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\14\0\1\357\63\0"+
    "\2\61\2\0\1\360\16\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\16\0\1\361\61\0\2\61\2\0\1\62\1\61\1\362"+
    "\14\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\11\0\1\363\64\0"+
    "\36\243\1\0\33\243\2\244\2\243\1\364\16\244\1\243"+
    "\1\244\7\243\1\0\4\243\2\244\1\243\1\244\1\243"+
    "\2\244\2\243\4\244\1\243\1\244\7\243\1\134\1\244"+
    "\1\245\1\243\1\134\1\246\16\244\1\243\1\244\1\365"+
    "\5\243\1\134\1\0\1\134\1\243\1\247\1\243\2\244"+
    "\1\250\1\251\1\250\2\251\2\134\4\244\1\243\1\244"+
    "\2\243\1\134\4\243\2\364\1\366\1\243\1\364\1\246"+
    "\16\364\1\243\1\364\6\243\1\364\1\0\1\364\1\243"+
    "\1\367\1\243\2\364\1\250\1\364\1\250\10\364\1\243"+
    "\1\364\2\243\1\364\4\243\1\370\1\371\1\372\1\243"+
    "\1\370\1\373\16\371\1\243\1\371\6\243\1\370\1\0"+
    "\1\370\1\243\1\374\1\243\2\371\1\243\1\371\1\243"+
    "\2\371\2\370\4\371\1\243\1\371\2\243\1\370\4\243"+
    "\1\250\1\375\1\376\1\243\1\250\1\377\16\375\1\243"+
    "\1\375\6\243\1\250\1\0\1\250\3\243\2\375\7\250"+
    "\4\375\1\243\1\375\2\243\1\250\4\243\1\250\1\244"+
    "\1\u0100\1\243\1\250\1\u0101\16\244\1\243\1\244\6\243"+
    "\1\250\1\0\1\250\3\243\2\244\1\250\1\251\1\250"+
    "\2\251\2\250\4\244\1\243\1\244\2\243\1\250\3\243"+
    "\37\252\1\u0102\32\252\2\253\2\252\1\u0103\16\253\1\252"+
    "\1\253\10\252\1\u0102\3\252\2\253\1\252\1\253\1\252"+
    "\2\253\2\252\4\253\1\252\1\253\7\252\1\135\1\253"+
    "\1\254\1\252\1\135\1\255\16\253\1\252\1\253\1\u0104"+
    "\5\252\1\135\1\252\1\3\1\252\1\256\1\252\2\253"+
    "\1\257\1\260\1\257\2\260\2\135\4\253\1\252\1\253"+
    "\2\252\1\135\4\252\2\u0103\1\u0105\1\252\1\u0103\1\255"+
    "\16\u0103\1\252\1\u0103\6\252\1\u0103\1\252\1\71\1\252"+
    "\1\u0106\1\252\2\u0103\1\257\1\u0103\1\257\10\u0103\1\252"+
    "\1\u0103\2\252\1\u0103\4\252\1\u0107\1\u0108\1\u0109\1\252"+
    "\1\u0107\1\u010a\16\u0108\1\252\1\u0108\6\252\1\u0107\1\252"+
    "\1\u010b\1\252\1\u010c\1\252\2\u0108\1\252\1\u0108\1\252"+
    "\2\u0108\2\u0107\4\u0108\1\252\1\u0108\2\252\1\u0107\4\252"+
    "\1\257\1\u010d\1\u010e\1\252\1\257\1\u010f\16\u010d\1\252"+
    "\1\u010d\6\252\1\257\1\252\1\42\3\252\2\u010d\7\257"+
    "\4\u010d\1\252\1\u010d\2\252\1\257\4\252\1\257\1\253"+
    "\1\u0110\1\252\1\257\1\u0111\16\253\1\252\1\253\6\252"+
    "\1\257\1\252\1\42\3\252\2\253\1\257\1\260\1\257"+
    "\2\260\2\257\4\253\1\252\1\253\2\252\1\257\3\252"+
    "\1\0\1\261\1\u0112\1\u0113\1\0\1\261\1\u0114\16\u0112"+
    "\1\0\1\u0112\6\0\1\261\1\0\1\261\1\0\1\57"+
    "\1\0\2\u0112\1\0\1\u0112\1\0\2\u0112\2\261\4\u0112"+
    "\1\0\1\u0112\2\0\1\261\6\0\1\136\65\0\1\263"+
    "\1\u0112\1\u0115\1\0\1\263\1\u0114\16\u0112\1\0\1\u0112"+
    "\6\0\1\263\1\0\1\263\1\0\1\73\1\0\2\u0112"+
    "\1\0\1\u0112\1\0\2\u0112\2\263\4\u0112\1\0\1\u0112"+
    "\2\0\1\263\4\0\1\264\1\0\1\265\1\0\1\264"+
    "\27\0\1\264\1\0\1\264\2\0\1\201\7\0\2\264"+
    "\10\0\1\264\4\0\1\264\1\0\1\265\1\0\1\264"+
    "\21\0\1\u0116\5\0\1\264\1\0\1\264\2\0\1\201"+
    "\7\0\2\264\10\0\1\264\5\0\2\266\2\0\1\143"+
    "\16\266\1\0\1\266\14\0\2\266\1\0\1\266\1\0"+
    "\2\266\2\0\4\266\1\0\1\266\7\0\1\143\1\266"+
    "\1\267\1\0\1\143\1\270\16\266\1\0\1\266\1\273"+
    "\5\0\1\143\1\0\1\143\3\0\1\266\1\271\1\0"+
    "\1\266\1\0\2\266\2\143\4\266\1\0\1\266\2\0"+
    "\1\143\4\0\2\143\1\267\1\0\1\143\1\270\16\143"+
    "\1\0\1\143\6\0\1\143\1\0\1\143\3\0\1\143"+
    "\1\u0117\1\0\1\143\1\0\10\143\1\0\1\143\2\0"+
    "\1\143\4\0\1\275\1\144\1\277\1\0\1\275\1\300"+
    "\16\144\1\0\1\144\6\0\1\275\1\0\1\275\1\0"+
    "\1\73\1\0\1\144\1\274\1\42\1\u0118\1\42\2\u0118"+
    "\2\275\4\144\1\0\1\144\2\0\1\275\6\0\1\143"+
    "\65\0\1\275\1\u0119\1\u011a\1\0\1\275\1\u011b\16\u0119"+
    "\1\0\1\u0119\6\0\1\275\1\0\1\275\1\0\1\73"+
    "\1\0\1\u0119\1\u011c\1\42\1\u011d\1\42\2\u011d\2\275"+
    "\4\u0119\1\0\1\u0119\2\0\1\275\4\0\1\143\1\144"+
    "\1\145\1\0\1\143\1\146\16\144\1\0\1\144\6\0"+
    "\1\143\1\0\1\143\3\0\1\144\1\274\1\0\1\144"+
    "\1\0\2\144\2\143\4\144\1\0\1\144\2\0\1\143"+
    "\4\0\1\275\1\144\1\277\1\0\1\275\1\300\16\144"+
    "\1\0\1\144\1\u011e\5\0\1\275\1\0\1\275\1\0"+
    "\1\73\1\0\1\144\1\274\1\42\1\u0118\1\42\2\u0118"+
    "\2\275\4\144\1\0\1\144\2\0\1\275\4\0\1\275"+
    "\1\u011f\1\277\1\0\1\275\1\300\16\u011f\1\0\1\u011f"+
    "\6\0\1\275\1\0\1\275\1\0\1\73\1\0\1\u011f"+
    "\1\u0120\1\42\1\u011f\1\42\2\u011f\2\275\4\u011f\1\0"+
    "\1\u011f\2\0\1\275\4\0\1\u0121\1\144\1\u0122\1\0"+
    "\1\u0121\1\u0123\16\144\1\0\1\144\6\0\1\u0121\1\0"+
    "\1\u0121\3\0\1\144\1\274\1\42\1\u0118\1\42\2\u0118"+
    "\2\u0121\4\144\1\0\1\144\2\0\1\u0121\6\0\1\42"+
    "\101\0\1\u0124\54\0\2\147\2\0\1\42\6\147\1\u0125"+
    "\7\147\1\0\1\147\14\0\2\147\1\0\1\147\1\0"+
    "\2\147\2\0\4\147\1\0\1\147\10\0\2\147\2\0"+
    "\1\42\4\147\1\u0126\11\147\1\0\1\147\14\0\2\147"+
    "\1\0\1\147\1\0\2\147\2\0\4\147\1\0\1\147"+
    "\10\0\2\147\2\0\1\42\4\147\1\u0127\11\147\1\0"+
    "\1\147\14\0\2\147\1\0\1\147\1\0\2\147\2\0"+
    "\4\147\1\0\1\147\10\0\2\61\2\0\1\62\6\61"+
    "\1\u0128\7\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\4\61\1\u0129\11\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\4\61\1\u012a\11\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\3\61\1\u012b\12\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\7\61\1\u012c\6\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\3\61\1\u012d"+
    "\12\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\30\0\1\u012e\47\0"+
    "\2\61\2\0\1\62\13\61\1\u012f\2\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\7\0\1\3\1\54\1\320\1\0\1\3"+
    "\1\56\16\54\1\0\1\54\1\164\5\0\1\3\1\0"+
    "\1\3\1\0\1\57\1\0\2\54\1\42\1\60\1\42"+
    "\2\60\2\3\4\54\1\0\1\54\2\0\1\3\4\0"+
    "\1\3\1\54\1\70\1\172\1\176\1\56\16\54\1\0"+
    "\1\54\1\0\1\66\1\67\3\0\1\3\1\0\1\3"+
    "\1\0\1\57\1\0\2\54\1\42\1\60\1\42\2\60"+
    "\2\3\4\54\1\0\1\54\2\0\1\3\2\172\4\0"+
    "\1\201\66\0\2\61\2\0\1\62\4\61\1\u0130\11\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\4\61\1\u0131\11\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\10\61\1\u0132\5\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\4\61\1\u0133"+
    "\11\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\30\0\1\u0134\47\0"+
    "\2\61\2\0\1\62\13\61\1\u0135\2\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\1\u0136\15\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\53\0\2\u0137\77\0\1\u0138"+
    "\13\0\2\61\2\0\1\62\16\61\1\0\1\61\14\0"+
    "\2\61\1\u0137\1\u0139\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\7\0\1\42\1\147\1\150\1\0\1\42\1\151"+
    "\16\147\1\0\1\147\6\0\1\42\1\0\1\42\3\0"+
    "\2\147\7\42\2\147\1\u013a\1\147\1\0\1\147\2\0"+
    "\1\42\4\0\1\42\1\61\1\154\1\0\1\42\1\155"+
    "\16\61\1\0\1\61\6\0\1\42\1\0\1\42\3\0"+
    "\2\61\1\42\1\43\1\42\2\43\2\42\2\61\1\u013b"+
    "\1\61\1\0\1\61\2\0\1\42\5\0\2\61\2\0"+
    "\1\62\1\61\1\u013c\14\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\4\61\1\u013d\11\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\13\61"+
    "\1\u013e\2\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\7\0\1\71"+
    "\1\61\1\72\1\0\1\71\1\63\14\61\1\u013f\1\61"+
    "\1\0\1\61\6\0\1\71\1\0\1\71\1\0\1\73"+
    "\1\0\2\61\1\42\1\43\1\42\2\43\2\71\1\u0140"+
    "\3\61\1\0\1\61\2\0\1\71\50\0\2\u0141\23\0"+
    "\2\61\2\0\1\62\6\61\1\u0142\7\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\1\u0143\15\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\5\61\1\u0144\10\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\3\61\1\u0145\12\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\7\61\1\u0146"+
    "\6\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\16\61\1\0\1\61\14\0\2\61\1\u0147\1\u0148"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\22\0\1\u0149"+
    "\55\0\2\61\2\0\1\62\5\61\1\u014a\10\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\17\0\1\u014b\12\0\1\u014c\2\u014d"+
    "\25\0\1\u014e\14\0\1\71\1\61\1\72\1\0\1\71"+
    "\1\63\2\61\1\u014f\12\61\1\u0150\1\u014d\1\u0151\6\0"+
    "\1\71\1\0\1\71\1\0\1\73\1\0\2\61\1\42"+
    "\1\43\1\42\2\43\2\71\1\u0152\3\61\1\0\1\61"+
    "\2\0\1\71\12\0\1\u0153\62\0\2\61\2\0\1\62"+
    "\1\u0154\15\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\11\0\1\363"+
    "\30\0\1\u0155\33\0\1\243\1\364\1\244\1\366\1\243"+
    "\1\364\1\246\16\244\1\243\1\244\6\243\1\364\1\0"+
    "\1\364\1\243\1\367\1\243\2\244\1\250\1\251\1\250"+
    "\2\251\2\364\4\244\1\243\1\244\2\243\1\364\6\243"+
    "\1\134\32\243\1\0\32\243\1\364\1\244\1\366\1\243"+
    "\1\364\1\246\16\244\1\243\1\244\1\u0156\5\243\1\364"+
    "\1\0\1\364\1\243\1\367\1\243\2\244\1\250\1\251"+
    "\1\250\2\251\2\364\4\244\1\243\1\244\2\243\1\364"+
    "\4\243\1\u0157\1\371\1\u0158\1\243\1\u0157\1\373\16\371"+
    "\1\243\1\371\6\243\1\u0157\1\0\1\u0157\1\243\1\374"+
    "\1\243\2\371\1\243\1\371\1\243\2\371\2\u0157\4\371"+
    "\1\243\1\371\2\243\1\u0157\4\243\1\370\1\371\1\372"+
    "\1\243\1\370\1\373\16\371\1\243\1\371\6\243\1\370"+
    "\1\0\1\370\1\243\1\374\1\u0159\2\371\1\243\1\371"+
    "\1\243\2\371\2\370\4\371\1\243\1\371\2\243\1\370"+
    "\5\243\2\371\2\243\1\u0157\16\371\1\243\1\371\7\243"+
    "\1\0\4\243\2\371\1\243\1\371\1\243\2\371\2\243"+
    "\4\371\1\243\1\371\7\243\1\370\1\371\1\372\1\243"+
    "\1\370\1\373\16\371\1\243\1\371\1\u015a\5\243\1\370"+
    "\1\0\1\370\1\243\1\374\1\u0159\2\371\1\243\1\371"+
    "\1\243\2\371\2\370\4\371\1\243\1\371\2\243\1\370"+
    "\4\243\2\u0157\1\u0158\1\243\1\u0157\1\373\16\u0157\1\243"+
    "\1\u0157\6\243\1\u0157\1\0\1\u0157\1\243\1\374\1\u015b"+
    "\2\u0157\1\243\1\u0157\1\243\10\u0157\1\243\1\u0157\2\243"+
    "\1\u0157\4\243\1\u015c\1\243\1\u015d\1\243\1\u015c\27\243"+
    "\1\u015c\1\0\1\u015c\12\243\2\u015c\10\243\1\u015c\5\243"+
    "\2\375\2\243\1\250\16\375\1\243\1\375\7\243\1\0"+
    "\4\243\2\375\1\243\1\375\1\243\2\375\2\243\4\375"+
    "\1\243\1\375\7\243\1\250\1\375\1\376\1\243\1\250"+
    "\1\377\16\375\1\243\1\375\1\u015e\5\243\1\250\1\0"+
    "\1\250\3\243\2\375\7\250\4\375\1\243\1\375\2\243"+
    "\1\250\4\243\2\250\1\376\1\243\1\250\1\377\16\250"+
    "\1\243\1\250\6\243\1\250\1\0\1\250\3\243\15\250"+
    "\1\243\1\250\2\243\1\250\4\243\1\250\1\244\1\u0100"+
    "\1\243\1\250\1\u0101\16\244\1\243\1\244\1\u015e\5\243"+
    "\1\250\1\0\1\250\3\243\2\244\1\250\1\251\1\250"+
    "\2\251\2\250\4\244\1\243\1\244\2\243\1\250\4\243"+
    "\1\364\1\251\1\366\1\243\1\364\1\246\16\251\1\243"+
    "\1\251\6\243\1\364\1\0\1\364\1\243\1\367\1\243"+
    "\2\251\1\250\1\251\1\250\2\251\2\364\4\251\1\243"+
    "\1\251\2\243\1\364\3\243\35\0\1\u015f\32\0\1\252"+
    "\1\u0103\1\253\1\u0105\1\252\1\u0103\1\255\16\253\1\252"+
    "\1\253\6\252\1\u0103\1\252\1\71\1\252\1\u0106\1\252"+
    "\2\253\1\257\1\260\1\257\2\260\2\u0103\4\253\1\252"+
    "\1\253\2\252\1\u0103\6\252\1\135\33\252\1\u0102\31\252"+
    "\1\u0103\1\253\1\u0105\1\252\1\u0103\1\255\16\253\1\252"+
    "\1\253\1\u0160\5\252\1\u0103\1\252\1\71\1\252\1\u0106"+
    "\1\252\2\253\1\257\1\260\1\257\2\260\2\u0103\4\253"+
    "\1\252\1\253\2\252\1\u0103\4\252\1\u0161\1\u0108\1\u0162"+
    "\1\252\1\u0161\1\u010a\16\u0108\1\252\1\u0108\6\252\1\u0161"+
    "\1\252\1\u0163\1\252\1\u010c\1\252\2\u0108\1\252\1\u0108"+
    "\1\252\2\u0108\2\u0161\4\u0108\1\252\1\u0108\2\252\1\u0161"+
    "\4\252\1\u0107\1\u0108\1\u0109\1\252\1\u0107\1\u010a\16\u0108"+
    "\1\252\1\u0108\6\252\1\u0107\1\252\1\u010b\1\252\1\u010c"+
    "\1\u0164\2\u0108\1\252\1\u0108\1\252\2\u0108\2\u0107\4\u0108"+
    "\1\252\1\u0108\2\252\1\u0107\5\252\2\u0108\2\252\1\u0161"+
    "\16\u0108\1\252\1\u0108\10\252\1\u0102\3\252\2\u0108\1\252"+
    "\1\u0108\1\252\2\u0108\2\252\4\u0108\1\252\1\u0108\7\252"+
    "\1\u0107\1\u0108\1\u0109\1\252\1\u0107\1\u010a\16\u0108\1\252"+
    "\1\u0108\1\u0165\5\252\1\u0107\1\252\1\u010b\1\252\1\u010c"+
    "\1\u0164\2\u0108\1\252\1\u0108\1\252\2\u0108\2\u0107\4\u0108"+
    "\1\252\1\u0108\2\252\1\u0107\4\252\2\u0161\1\u0162\1\252"+
    "\1\u0161\1\u010a\16\u0161\1\252\1\u0161\6\252\1\u0161\1\252"+
    "\1\u0163\1\252\1\u010c\1\u0166\2\u0161\1\252\1\u0161\1\252"+
    "\10\u0161\1\252\1\u0161\2\252\1\u0161\3\252\1\0\1\136"+
    "\1\137\1\140\1\0\1\136\1\141\16\137\1\0\1\137"+
    "\6\0\1\u0167\1\0\1\136\1\0\1\142\1\261\2\137"+
    "\1\0\1\137\1\0\2\137\2\136\4\137\1\0\1\137"+
    "\2\0\1\136\3\0\1\252\1\u0168\1\252\1\u0169\1\252"+
    "\1\u0168\27\252\1\u0168\1\252\1\u016a\12\252\2\u0168\10\252"+
    "\1\u0168\5\252\2\u010d\2\252\1\257\16\u010d\1\252\1\u010d"+
    "\10\252\1\u0102\3\252\2\u010d\1\252\1\u010d\1\252\2\u010d"+
    "\2\252\4\u010d\1\252\1\u010d\7\252\1\257\1\u010d\1\u010e"+
    "\1\252\1\257\1\u010f\16\u010d\1\252\1\u010d\1\u016b\5\252"+
    "\1\257\1\252\1\42\3\252\2\u010d\7\257\4\u010d\1\252"+
    "\1\u010d\2\252\1\257\4\252\2\257\1\u010e\1\252\1\257"+
    "\1\u010f\16\257\1\252\1\257\6\252\1\257\1\252\1\42"+
    "\3\252\15\257\1\252\1\257\2\252\1\257\4\252\1\257"+
    "\1\253\1\u0110\1\252\1\257\1\u0111\16\253\1\252\1\253"+
    "\1\u016b\5\252\1\257\1\252\1\42\3\252\2\253\1\257"+
    "\1\260\1\257\2\260\2\257\4\253\1\252\1\253\2\252"+
    "\1\257\4\252\1\u0103\1\260\1\u0105\1\252\1\u0103\1\255"+
    "\16\260\1\252\1\260\6\252\1\u0103\1\252\1\71\1\252"+
    "\1\u0106\1\252\2\260\1\257\1\260\1\257\2\260\2\u0103"+
    "\4\260\1\252\1\260\2\252\1\u0103\3\252\2\0\2\u0112"+
    "\2\0\1\263\16\u0112\1\0\1\u0112\14\0\2\u0112\1\0"+
    "\1\u0112\1\0\2\u0112\2\0\4\u0112\1\0\1\u0112\7\0"+
    "\1\261\1\u0112\1\u0113\1\0\1\261\1\u0114\16\u0112\1\0"+
    "\1\u0112\1\u016c\5\0\1\261\1\0\1\261\1\0\1\57"+
    "\1\0\2\u0112\1\0\1\u0112\1\0\2\u0112\2\261\4\u0112"+
    "\1\0\1\u0112\2\0\1\261\4\0\2\263\1\u0115\1\0"+
    "\1\263\1\u0114\16\263\1\0\1\263\6\0\1\263\1\0"+
    "\1\263\1\0\1\73\1\0\2\263\1\0\1\263\1\0"+
    "\10\263\1\0\1\263\2\0\1\263\4\0\1\263\1\u0112"+
    "\1\u0115\1\0\1\263\1\u0114\16\u0112\1\0\1\u0112\1\u016d"+
    "\5\0\1\263\1\0\1\263\1\0\1\73\1\0\2\u0112"+
    "\1\0\1\u0112\1\0\2\u0112\2\263\4\u0112\1\0\1\u0112"+
    "\2\0\1\263\6\0\1\264\65\0\1\42\1\144\1\u016e"+
    "\1\0\1\42\1\u016f\16\144\1\0\1\144\6\0\1\42"+
    "\1\0\1\42\3\0\2\144\1\42\1\u0118\1\42\2\u0118"+
    "\2\42\4\144\1\0\1\144\2\0\1\42\5\0\2\u0119"+
    "\2\0\1\275\16\u0119\1\0\1\u0119\14\0\2\u0119\1\0"+
    "\1\u0119\1\0\2\u0119\2\0\4\u0119\1\0\1\u0119\7\0"+
    "\1\275\1\u0119\1\u011a\1\0\1\275\1\u011b\16\u0119\1\0"+
    "\1\u0119\1\u011e\5\0\1\275\1\0\1\275\1\0\1\73"+
    "\1\0\1\u0119\1\u011c\1\42\1\u011d\1\42\2\u011d\2\275"+
    "\4\u0119\1\0\1\u0119\2\0\1\275\4\0\2\275\1\u011a"+
    "\1\0\1\275\1\u011b\16\275\1\0\1\275\6\0\1\275"+
    "\1\0\1\275\1\0\1\73\1\0\1\275\1\u0170\1\42"+
    "\1\275\1\42\10\275\1\0\1\275\2\0\1\275\4\0"+
    "\1\42\1\u0119\1\u0171\1\0\1\42\1\u0172\16\u0119\1\0"+
    "\1\u0119\6\0\1\42\1\0\1\42\3\0\2\u0119\1\42"+
    "\1\u011d\1\42\2\u011d\2\42\4\u0119\1\0\1\u0119\2\0"+
    "\1\42\6\0\1\275\65\0\1\u0121\1\u0173\1\u0174\1\0"+
    "\1\u0121\1\u0175\16\u0173\1\0\1\u0173\6\0\1\u0121\1\0"+
    "\1\u0121\3\0\1\u0173\1\u0176\1\42\1\u0177\1\42\2\u0177"+
    "\2\u0121\4\u0173\1\0\1\u0173\2\0\1\u0121\4\0\1\u0121"+
    "\1\144\1\u0122\1\0\1\u0121\1\u0123\16\144\1\0\1\144"+
    "\1\u0178\5\0\1\u0121\1\0\1\u0121\3\0\1\144\1\274"+
    "\1\42\1\u0118\1\42\2\u0118\2\u0121\4\144\1\0\1\144"+
    "\2\0\1\u0121\4\0\1\275\1\302\1\277\1\0\1\275"+
    "\1\300\16\302\1\0\1\302\6\0\1\275\1\0\1\275"+
    "\1\0\1\73\1\0\1\302\1\u0179\1\42\1\302\1\42"+
    "\2\302\2\275\4\302\1\0\1\302\2\0\1\275\50\0"+
    "\2\u017a\23\0\2\147\2\0\1\42\16\147\1\0\1\147"+
    "\14\0\2\147\1\u017a\1\u017b\1\0\2\147\2\0\4\147"+
    "\1\0\1\147\10\0\2\147\2\0\1\42\3\147\1\u017c"+
    "\12\147\1\0\1\147\14\0\2\147\1\0\1\147\1\0"+
    "\2\147\2\0\4\147\1\0\1\147\10\0\2\147\2\0"+
    "\1\42\16\147\1\0\1\147\14\0\2\147\1\u017d\1\u017e"+
    "\1\0\2\147\2\0\4\147\1\0\1\147\10\0\2\61"+
    "\2\0\1\62\16\61\1\0\1\61\14\0\2\61\1\u017a"+
    "\1\u017f\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\3\61\1\u0180\12\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\16\61\1\0"+
    "\1\61\14\0\2\61\1\u017d\1\u0181\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\1\u0182"+
    "\15\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\4\61\1\u0183\11\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\24\0\1\u0184\53\0\2\61\2\0\1\62\7\61\1\u0185"+
    "\6\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\5\61\1\u0186\10\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\u0187\16\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\5\61\1\u0188\10\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\u0189"+
    "\16\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\21\0\1\u018a\56\0"+
    "\2\61\2\0\1\62\4\61\1\u018b\11\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\6\61\1\u018c"+
    "\7\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\32\0\1\u018d\53\0"+
    "\1\u018e\61\0\2\61\2\0\1\62\15\61\1\u018f\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\147\2\0\1\42\1\147"+
    "\1\u0190\14\147\1\0\1\147\14\0\2\147\1\0\1\147"+
    "\1\0\2\147\2\0\4\147\1\0\1\147\10\0\2\61"+
    "\2\0\1\62\1\61\1\u0191\14\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\13\61\1\u0192\2\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\1\u0193\15\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\16\61\1\0\1\61\14\0\2\61\1\u0194"+
    "\1\u0195\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\7\61\1\u0196\6\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\7\61\1\u0197"+
    "\6\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\15\0\1\u0198\62\0"+
    "\2\61\2\0\1\62\13\61\1\u0199\2\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\7\61\1\u0186"+
    "\6\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\u019a\16\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\7\61\1\u019b\6\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\10\61\1\u019c\5\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\22\0\1\u019d\55\0\2\61"+
    "\2\0\1\62\5\61\1\u019e\10\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\20\0\1\u019f\32\0\2\u01a0\31\0\1\u01a1\71\0"+
    "\1\u01a2\32\0\2\u01a3\37\0\1\u01a4\53\0\2\61\2\0"+
    "\1\62\3\61\1\u01a5\12\61\1\0\1\61\14\0\2\61"+
    "\1\u01a0\1\u01a6\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\1\61\1\u01a7\14\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\3\61"+
    "\1\u01a8\12\61\1\0\1\61\14\0\2\61\1\u01a3\1\u01a9"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\7\61\1\u01aa\6\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\37\0\1\u01ab\36\0\3\243\1\364\32\243\1\0"+
    "\32\243\1\u0157\1\371\1\u0158\1\243\1\u0157\1\373\16\371"+
    "\1\243\1\371\6\243\1\u0157\1\0\1\u0157\1\243\1\374"+
    "\1\u015b\2\371\1\243\1\371\1\243\2\371\2\u0157\4\371"+
    "\1\243\1\371\2\243\1\u0157\4\243\1\u0157\1\371\1\u0158"+
    "\1\243\1\u0157\1\373\16\371\1\243\1\371\1\u01ac\5\243"+
    "\1\u0157\1\0\1\u0157\1\243\1\374\1\u015b\2\371\1\243"+
    "\1\371\1\243\2\371\2\u0157\4\371\1\243\1\371\2\243"+
    "\1\u0157\4\243\1\u0159\1\u01ad\1\u01ae\1\243\1\u0159\1\u01af"+
    "\16\u01ad\1\243\1\u01ad\6\243\1\u0159\1\0\1\u0159\1\243"+
    "\1\247\1\243\2\u01ad\1\243\1\u01ad\1\243\2\u01ad\2\u0159"+
    "\4\u01ad\1\243\1\u01ad\2\243\1\u0159\6\243\1\370\32\243"+
    "\1\0\32\243\1\u015b\1\u01ad\1\u01b0\1\243\1\u015b\1\u01af"+
    "\16\u01ad\1\243\1\u01ad\6\243\1\u015b\1\0\1\u015b\1\243"+
    "\1\367\1\243\2\u01ad\1\243\1\u01ad\1\243\2\u01ad\2\u015b"+
    "\4\u01ad\1\243\1\u01ad\2\243\1\u015b\4\243\1\u015c\1\243"+
    "\1\u015d\1\243\1\u015c\27\243\1\u015c\1\0\1\u015c\2\243"+
    "\1\u0157\7\243\2\u015c\10\243\1\u015c\4\243\1\u015c\1\243"+
    "\1\u015d\1\243\1\u015c\21\243\1\u01b1\5\243\1\u015c\1\0"+
    "\1\u015c\2\243\1\u0157\7\243\2\u015c\10\243\1\u015c\6\243"+
    "\1\250\32\243\1\0\31\243\3\252\1\u0103\33\252\1\u0102"+
    "\31\252\1\u0161\1\u0108\1\u0162\1\252\1\u0161\1\u010a\16\u0108"+
    "\1\252\1\u0108\6\252\1\u0161\1\252\1\u0163\1\252\1\u010c"+
    "\1\u0166\2\u0108\1\252\1\u0108\1\252\2\u0108\2\u0161\4\u0108"+
    "\1\252\1\u0108\2\252\1\u0161\4\252\1\u0161\1\u0108\1\u0162"+
    "\1\252\1\u0161\1\u010a\16\u0108\1\252\1\u0108\1\u01b2\5\252"+
    "\1\u0161\1\252\1\u0163\1\252\1\u010c\1\u0166\2\u0108\1\252"+
    "\1\u0108\1\252\2\u0108\2\u0161\4\u0108\1\252\1\u0108\2\252"+
    "\1\u0161\3\252\1\0\1\201\1\137\1\202\1\0\1\201"+
    "\1\141\16\137\1\0\1\137\6\0\1\u01b3\1\0\1\201"+
    "\1\0\1\142\1\263\2\137\1\0\1\137\1\0\2\137"+
    "\2\201\4\137\1\0\1\137\2\0\1\201\3\0\1\252"+
    "\1\u0164\1\u01b4\1\u01b5\1\252\1\u0164\1\u01b6\16\u01b4\1\252"+
    "\1\u01b4\6\252\1\u0164\1\252\1\261\1\252\1\256\1\252"+
    "\2\u01b4\1\252\1\u01b4\1\252\2\u01b4\2\u0164\4\u01b4\1\252"+
    "\1\u01b4\2\252\1\u0164\6\252\1\u0107\33\252\1\u0102\31\252"+
    "\1\u0166\1\u01b4\1\u01b7\1\252\1\u0166\1\u01b6\16\u01b4\1\252"+
    "\1\u01b4\6\252\1\u0166\1\252\1\263\1\252\1\u0106\1\252"+
    "\2\u01b4\1\252\1\u01b4\1\252\2\u01b4\2\u0166\4\u01b4\1\252"+
    "\1\u01b4\2\252\1\u0166\4\252\1\u0168\1\252\1\u0169\1\252"+
    "\1\u0168\27\252\1\u0168\1\252\1\u016a\2\252\1\u0161\7\252"+
    "\2\u0168\10\252\1\u0168\4\252\1\u0168\1\252\1\u0169\1\252"+
    "\1\u0168\21\252\1\u01b8\5\252\1\u0168\1\252\1\u016a\2\252"+
    "\1\u0161\7\252\2\u0168\10\252\1\u0168\3\252\1\0\1\264"+
    "\1\0\1\265\1\0\1\264\27\0\1\u01b9\1\0\1\264"+
    "\2\0\1\201\7\0\2\264\10\0\1\264\3\0\3\252"+
    "\1\257\33\252\1\u0102\30\252\3\0\1\261\67\0\1\263"+
    "\65\0\1\42\1\144\1\u016e\1\0\1\42\1\u016f\16\144"+
    "\1\0\1\144\1\303\5\0\1\42\1\0\1\42\3\0"+
    "\2\144\1\42\1\u0118\1\42\2\u0118\2\42\4\144\1\0"+
    "\1\144\2\0\1\42\4\0\1\275\1\u0118\1\277\1\0"+
    "\1\275\1\300\16\u0118\1\0\1\u0118\6\0\1\275\1\0"+
    "\1\275\1\0\1\73\1\0\1\u0118\1\u01ba\1\42\1\u0118"+
    "\1\42\2\u0118\2\275\4\u0118\1\0\1\u0118\2\0\1\275"+
    "\4\0\1\42\1\u0119\1\u0171\1\0\1\42\1\u0172\16\u0119"+
    "\1\0\1\u0119\1\303\5\0\1\42\1\0\1\42\3\0"+
    "\2\u0119\1\42\1\u011d\1\42\2\u011d\2\42\4\u0119\1\0"+
    "\1\u0119\2\0\1\42\4\0\1\275\1\u011d\1\u011a\1\0"+
    "\1\275\1\u011b\16\u011d\1\0\1\u011d\6\0\1\275\1\0"+
    "\1\275\1\0\1\73\1\0\1\u011d\1\u01bb\1\42\1\u011d"+
    "\1\42\2\u011d\2\275\4\u011d\1\0\1\u011d\2\0\1\275"+
    "\5\0\2\u0173\2\0\1\u0121\16\u0173\1\0\1\u0173\14\0"+
    "\2\u0173\1\0\1\u0173\1\0\2\u0173\2\0\4\u0173\1\0"+
    "\1\u0173\7\0\1\u0121\1\u0173\1\u0174\1\0\1\u0121\1\u0175"+
    "\16\u0173\1\0\1\u0173\1\u0178\5\0\1\u0121\1\0\1\u0121"+
    "\3\0\1\u0173\1\u0176\1\42\1\u0177\1\42\2\u0177\2\u0121"+
    "\4\u0173\1\0\1\u0173\2\0\1\u0121\4\0\2\u0121\1\u0174"+
    "\1\0\1\u0121\1\u0175\16\u0121\1\0\1\u0121\6\0\1\u0121"+
    "\1\0\1\u0121\3\0\1\u0121\1\u01bc\1\42\1\u0121\1\42"+
    "\10\u0121\1\0\1\u0121\2\0\1\u0121\4\0\1\42\1\u0173"+
    "\1\u01bd\1\0\1\42\1\u01be\16\u0173\1\0\1\u0173\6\0"+
    "\1\42\1\0\1\42\3\0\2\u0173\1\42\1\u0177\1\42"+
    "\2\u0177\2\42\4\u0173\1\0\1\u0173\2\0\1\42\6\0"+
    "\1\u0121\100\0\1\u01bf\55\0\2\147\2\0\1\42\5\147"+
    "\1\u01c0\10\147\1\0\1\147\14\0\2\147\1\0\1\147"+
    "\1\0\2\147\2\0\4\147\1\0\1\147\10\0\2\147"+
    "\2\0\1\42\16\147\1\u01c1\1\u01c2\14\0\2\147\1\0"+
    "\1\147\1\0\2\147\2\0\4\147\1\0\1\147\17\0"+
    "\1\u01c3\60\0\2\147\2\0\1\42\2\147\1\u01c4\13\147"+
    "\1\0\1\147\14\0\2\147\1\0\1\147\1\0\2\147"+
    "\2\0\4\147\1\0\1\147\10\0\2\61\2\0\1\62"+
    "\5\61\1\u01c5\10\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\16\61\1\u01c1\1\u01c6\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\2\61\1\u01c7\13\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\6\61"+
    "\1\u01c8\7\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\14\0\1\u01c9"+
    "\63\0\2\61\2\0\1\u01ca\16\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\7\0\1\71\1\61\1\72\1\0\1\71\1\63"+
    "\5\61\1\u01cb\10\61\1\0\1\61\6\0\1\71\1\0"+
    "\1\71\1\0\1\73\1\0\2\61\1\42\1\43\1\42"+
    "\2\43\2\71\4\61\1\0\1\61\2\0\1\71\4\0"+
    "\1\71\1\61\1\72\1\0\1\71\1\63\5\61\1\u01cc"+
    "\10\61\1\0\1\61\6\0\1\71\1\0\1\71\1\0"+
    "\1\73\1\0\2\61\1\42\1\43\1\42\2\43\2\71"+
    "\4\61\1\0\1\61\2\0\1\71\21\0\1\u01cd\53\0"+
    "\2\61\2\0\1\62\7\61\1\u01ce\6\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\3\61\1\u01cf"+
    "\12\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\20\0\1\u01d0\73\0"+
    "\1\u01d1\53\0\2\61\2\0\1\62\3\61\1\u01d2\12\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\147\2\0\1\42"+
    "\7\147\1\u01d3\6\147\1\0\1\147\14\0\2\147\1\0"+
    "\1\147\1\0\2\147\2\0\4\147\1\0\1\147\10\0"+
    "\2\61\2\0\1\62\7\61\1\u01d4\6\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\7\61\1\u01d5"+
    "\6\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\7\61\1\u01d6\6\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\21\0\1\u01d7\56\0\2\61\2\0\1\62\4\61\1\u01d8"+
    "\11\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\12\61\1\u01d9\3\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\4\61\1\u01da\11\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\23\0\1\u01db\54\0\2\61\2\0"+
    "\1\62\3\61\1\u01dc\12\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\7\0\1\71\1\61\1\72\1\0\1\71\1\63\6\61"+
    "\1\u01dd\7\61\1\0\1\61\6\0\1\71\1\0\1\71"+
    "\1\0\1\73\1\0\2\61\1\42\1\43\1\42\2\43"+
    "\2\71\4\61\1\0\1\61\2\0\1\71\5\0\2\61"+
    "\2\0\1\62\1\u0186\15\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\3\61\1\u01de\12\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\15\0\1\u01df\62\0\2\61\2\0"+
    "\1\62\1\u01e0\15\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\30\0"+
    "\1\u01e1\57\0\1\u01e2\64\0\1\u01e3\136\0\1\u01e4\24\0"+
    "\1\u01e5\56\0\2\61\2\0\1\62\13\61\1\u01e6\2\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\3\61\1\u01e7\12\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\1\u01e8\15\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\16\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\2\61"+
    "\1\u01e9\1\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\4\61\1\u01ea\11\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\6\0"+
    "\3\243\1\u0157\32\243\1\0\33\243\2\u01ad\2\243\1\u015b"+
    "\16\u01ad\1\243\1\u01ad\7\243\1\0\4\243\2\u01ad\1\243"+
    "\1\u01ad\1\243\2\u01ad\2\243\4\u01ad\1\243\1\u01ad\7\243"+
    "\1\u0159\1\u01ad\1\u01ae\1\243\1\u0159\1\u01af\16\u01ad\1\243"+
    "\1\u01ad\1\u01eb\5\243\1\u0159\1\0\1\u0159\1\243\1\247"+
    "\1\243\2\u01ad\1\243\1\u01ad\1\243\2\u01ad\2\u0159\4\u01ad"+
    "\1\243\1\u01ad\2\243\1\u0159\4\243\2\u015b\1\u01b0\1\243"+
    "\1\u015b\1\u01af\16\u015b\1\243\1\u015b\6\243\1\u015b\1\0"+
    "\1\u015b\1\243\1\367\1\243\2\u015b\1\243\1\u015b\1\243"+
    "\10\u015b\1\243\1\u015b\2\243\1\u015b\4\243\1\u015b\1\u01ad"+
    "\1\u01b0\1\243\1\u015b\1\u01af\16\u01ad\1\243\1\u01ad\1\u01ec"+
    "\5\243\1\u015b\1\0\1\u015b\1\243\1\367\1\243\2\u01ad"+
    "\1\243\1\u01ad\1\243\2\u01ad\2\u015b\4\u01ad\1\243\1\u01ad"+
    "\2\243\1\u015b\6\243\1\u015c\32\243\1\0\31\243\3\252"+
    "\1\u0161\33\252\1\u0102\32\252\2\u01b4\2\252\1\u0166\16\u01b4"+
    "\1\252\1\u01b4\10\252\1\u0102\3\252\2\u01b4\1\252\1\u01b4"+
    "\1\252\2\u01b4\2\252\4\u01b4\1\252\1\u01b4\7\252\1\u0164"+
    "\1\u01b4\1\u01b5\1\252\1\u0164\1\u01b6\16\u01b4\1\252\1\u01b4"+
    "\1\u01ed\5\252\1\u0164\1\252\1\261\1\252\1\256\1\252"+
    "\2\u01b4\1\252\1\u01b4\1\252\2\u01b4\2\u0164\4\u01b4\1\252"+
    "\1\u01b4\2\252\1\u0164\4\252\2\u0166\1\u01b7\1\252\1\u0166"+
    "\1\u01b6\16\u0166\1\252\1\u0166\6\252\1\u0166\1\252\1\263"+
    "\1\252\1\u0106\1\252\2\u0166\1\252\1\u0166\1\252\10\u0166"+
    "\1\252\1\u0166\2\252\1\u0166\4\252\1\u0166\1\u01b4\1\u01b7"+
    "\1\252\1\u0166\1\u01b6\16\u01b4\1\252\1\u01b4\1\u01ee\5\252"+
    "\1\u0166\1\252\1\263\1\252\1\u0106\1\252\2\u01b4\1\252"+
    "\1\u01b4\1\252\2\u01b4\2\u0166\4\u01b4\1\252\1\u01b4\2\252"+
    "\1\u0166\6\252\1\u0168\33\252\1\u0102\30\252\1\0\1\42"+
    "\1\u0173\1\u01bd\1\0\1\42\1\u01be\16\u0173\1\0\1\u0173"+
    "\1\303\5\0\1\42\1\0\1\42\3\0\2\u0173\1\42"+
    "\1\u0177\1\42\2\u0177\2\42\4\u0173\1\0\1\u0173\2\0"+
    "\1\42\4\0\1\u0121\1\u0177\1\u0174\1\0\1\u0121\1\u0175"+
    "\16\u0177\1\0\1\u0177\6\0\1\u0121\1\0\1\u0121\3\0"+
    "\1\u0177\1\u01ef\1\42\1\u0177\1\42\2\u0177\2\u0121\4\u0177"+
    "\1\0\1\u0177\2\0\1\u0121\21\0\1\u01f0\53\0\2\147"+
    "\2\0\1\42\7\147\1\u01f1\6\147\1\0\1\147\14\0"+
    "\2\147\1\0\1\147\1\0\2\147\2\0\4\147\1\0"+
    "\1\147\53\0\2\u01f2\23\0\2\147\2\0\1\42\16\147"+
    "\1\0\1\147\14\0\2\147\1\u01f2\1\u01f3\1\0\2\147"+
    "\2\0\4\147\1\0\1\147\10\0\2\61\2\0\1\62"+
    "\7\61\1\u01f4\6\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\16\61\1\0\1\61\14\0\2\61"+
    "\1\u01f2\1\u01f5\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\16\61\1\0\1\61\14\0"+
    "\2\61\1\u01f6\1\u01f7\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\67\0\1\u01f8\7\0\1\71\1\61\1\72\1\0"+
    "\1\71\1\63\16\61\1\0\1\61\6\0\1\71\1\0"+
    "\1\71\1\0\1\73\1\0\2\61\1\42\1\43\1\42"+
    "\2\43\2\71\4\61\1\0\1\u01f9\2\0\1\71\5\0"+
    "\2\61\2\0\1\u01fa\16\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\u01fb\16\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\33\0\2\u01fc\43\0\2\61\2\0\1\62\16\61"+
    "\1\u01fc\1\u01fd\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\16\61\1\u01fe\1\u01ff\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\21\0\1\u0200\75\0"+
    "\1\u0201\50\0\2\61\2\0\1\62\4\61\1\u0202\11\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\147\2\0\1\42"+
    "\12\147\1\u0203\3\147\1\0\1\147\14\0\2\147\1\0"+
    "\1\147\1\0\2\147\2\0\4\147\1\0\1\147\10\0"+
    "\2\61\2\0\1\62\12\61\1\u0204\3\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\4\61\1\u0205"+
    "\11\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\10\0\2\61\2\0"+
    "\1\62\4\61\1\u0206\11\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\5\61\1\u0207\10\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\7\61"+
    "\1\u0208\6\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\21\0\1\u0209"+
    "\56\0\2\61\2\0\1\62\4\61\1\u0186\11\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\5\61"+
    "\1\u020a\10\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\4\61\1\356\11\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\22\0\1\u020b\62\0\1\u020c\75\0\1\u020d\62\0"+
    "\1\u020e\75\0\1\u020f\53\0\2\61\2\0\1\62\5\61"+
    "\1\u0210\10\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\1\u0211\15\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\6\61\1\u0212\7\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\1\61"+
    "\1\u0213\14\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\7\61\1\u0214\6\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\6\0\3\243\1\u0159\32\243\1\0\34\243\1\u015b"+
    "\32\243\1\0\31\243\3\252\1\u0164\33\252\1\u0102\33\252"+
    "\1\u0166\33\252\1\u0102\30\252\13\0\1\u0215\56\0\2\147"+
    "\2\0\1\42\4\147\1\u0216\11\147\1\0\1\147\14\0"+
    "\2\147\1\0\1\147\1\0\2\147\2\0\4\147\1\0"+
    "\1\147\21\0\1\u0217\56\0\2\147\2\0\1\42\4\147"+
    "\1\u0218\11\147\1\0\1\147\14\0\2\147\1\0\1\147"+
    "\1\0\2\147\2\0\4\147\1\0\1\147\10\0\2\61"+
    "\2\0\1\62\4\61\1\u0219\11\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\4\61\1\u021a\11\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\24\0\1\u021b\53\0\2\61"+
    "\2\0\1\62\7\61\1\u021c\6\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\16\0\1\u021d\61\0\2\61\2\0\1\62\1\61"+
    "\1\u021e\14\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\7\0\1\71"+
    "\1\61\1\72\1\0\1\71\1\63\16\61\1\0\1\61"+
    "\6\0\1\71\1\0\1\71\1\0\1\73\1\0\2\61"+
    "\1\u021f\1\u0220\1\42\2\43\2\71\4\61\1\0\1\61"+
    "\2\0\1\71\4\0\1\71\1\61\1\72\1\0\1\71"+
    "\1\63\16\61\1\0\1\61\6\0\1\71\1\0\1\71"+
    "\1\0\1\73\1\0\2\61\1\u0221\1\u0222\1\42\2\43"+
    "\2\71\4\61\1\0\1\61\2\0\1\71\15\0\1\u0223"+
    "\57\0\2\61\2\0\1\62\3\61\1\u0224\12\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\4\61"+
    "\1\u0225\11\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\61"+
    "\2\0\1\62\2\61\1\u0226\13\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\20\0\1\u0227\57\0\2\61\2\0\1\62\1\u0228"+
    "\15\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\25\0\1\u0229\72\0"+
    "\1\u022a\112\0\2\u022b\30\0\1\u022c\62\0\2\61\2\0"+
    "\1\62\10\61\1\u022d\5\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\13\61\1\u022e\2\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\16\61"+
    "\1\0\1\61\14\0\2\61\1\u022b\1\u022f\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\1\u0230\15\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\14\0\1\u0231"+
    "\63\0\2\147\2\0\1\u0232\16\147\1\0\1\147\14\0"+
    "\2\147\1\0\1\147\1\0\2\147\2\0\4\147\1\0"+
    "\1\147\10\0\2\61\2\0\1\u0233\16\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\20\0\1\u0234\57\0\2\61\2\0\1\62"+
    "\3\61\1\u0235\12\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\7\0"+
    "\1\42\1\147\1\150\1\0\1\42\1\151\16\147\1\0"+
    "\1\147\6\0\1\42\1\0\1\42\3\0\2\147\7\42"+
    "\2\147\1\u0236\1\147\1\0\1\147\2\0\1\42\4\0"+
    "\1\42\1\61\1\154\1\0\1\42\1\155\16\61\1\0"+
    "\1\61\6\0\1\42\1\0\1\42\3\0\2\61\1\42"+
    "\1\43\1\42\2\43\2\42\2\61\1\u0237\1\61\1\0"+
    "\1\61\2\0\1\42\4\0\1\42\1\147\1\150\1\0"+
    "\1\42\1\151\16\147\1\0\1\147\6\0\1\42\1\0"+
    "\1\42\3\0\2\147\7\42\2\147\1\u0238\1\147\1\0"+
    "\1\147\2\0\1\42\4\0\1\42\1\61\1\154\1\0"+
    "\1\42\1\155\16\61\1\0\1\61\6\0\1\42\1\0"+
    "\1\42\3\0\2\61\1\42\1\43\1\42\2\43\2\42"+
    "\2\61\1\u0239\1\61\1\0\1\61\2\0\1\42\12\0"+
    "\1\u023a\62\0\2\61\2\0\1\62\1\u023b\15\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\3\61"+
    "\1\u023c\12\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\17\0\1\u023d"+
    "\60\0\2\61\2\0\1\62\13\61\1\u023e\2\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\22\0\1\u023f\66\0\1\u0240\70\0"+
    "\1\u0241\55\0\2\61\2\0\1\62\5\61\1\u0242\10\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\61\2\0\1\62"+
    "\4\61\1\u0243\11\61\1\0\1\61\14\0\2\61\1\0"+
    "\1\61\1\0\2\61\2\0\4\61\1\0\1\61\10\0"+
    "\2\61\2\0\1\62\5\61\1\u0244\10\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\15\0\1\u0245\61\0\1\42\1\147\1\150"+
    "\1\0\1\42\1\151\1\u0246\15\147\1\0\1\147\6\0"+
    "\1\42\1\0\1\42\3\0\2\147\7\42\4\147\1\0"+
    "\1\147\2\0\1\42\4\0\1\71\1\61\1\72\1\0"+
    "\1\71\1\63\1\u0247\15\61\1\0\1\61\6\0\1\71"+
    "\1\0\1\71\1\0\1\73\1\0\2\61\1\42\1\43"+
    "\1\42\2\43\2\71\4\61\1\0\1\61\2\0\1\71"+
    "\5\0\2\147\2\0\1\42\1\147\1\u0248\14\147\1\0"+
    "\1\147\14\0\2\147\1\0\1\147\1\0\2\147\2\0"+
    "\4\147\1\0\1\147\10\0\2\61\2\0\1\62\1\61"+
    "\1\u0249\14\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\147"+
    "\2\0\1\42\1\147\1\u024a\14\147\1\0\1\147\14\0"+
    "\2\147\1\0\1\147\1\0\2\147\2\0\4\147\1\0"+
    "\1\147\10\0\2\61\2\0\1\62\1\61\1\u024b\14\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\30\0\1\u024c\47\0\2\61"+
    "\2\0\1\62\13\61\1\u024d\2\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\10\0\2\61\2\0\1\62\13\61\1\u024e\2\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\20\0\1\u024f\57\0\2\61"+
    "\2\0\1\62\4\61\1\u0250\11\61\1\0\1\61\14\0"+
    "\2\61\1\0\1\61\1\0\2\61\2\0\4\61\1\0"+
    "\1\61\24\0\1\u0251\60\0\1\u0252\62\0\2\61\2\0"+
    "\1\62\7\61\1\u0253\6\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\61\2\0\1\62\1\u0254\15\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\27\0\1\u0255\50\0\2\147\2\0\1\42"+
    "\12\147\1\u0256\3\147\1\0\1\147\14\0\2\147\1\0"+
    "\1\147\1\0\2\147\2\0\4\147\1\0\1\147\10\0"+
    "\2\61\2\0\1\62\12\61\1\u0257\3\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\147\2\0\1\42\7\147\1\u0258"+
    "\6\147\1\0\1\147\14\0\2\147\1\0\1\147\1\0"+
    "\2\147\2\0\4\147\1\0\1\147\10\0\2\61\2\0"+
    "\1\62\7\61\1\u0259\6\61\1\0\1\61\14\0\2\61"+
    "\1\0\1\61\1\0\2\61\2\0\4\61\1\0\1\61"+
    "\10\0\2\147\2\0\1\42\7\147\1\u025a\6\147\1\0"+
    "\1\147\14\0\2\147\1\0\1\147\1\0\2\147\2\0"+
    "\4\147\1\0\1\147\10\0\2\61\2\0\1\62\7\61"+
    "\1\u025b\6\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\20\0\1\u025c"+
    "\57\0\2\61\2\0\1\62\3\61\1\u025d\12\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\10\0\2\61\2\0\1\62\4\61"+
    "\1\u025e\11\61\1\0\1\61\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\15\0\1\u025f"+
    "\62\0\2\61\2\0\1\62\7\61\1\u0260\6\61\1\0"+
    "\1\61\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\33\0\2\u0261\43\0\2\61\2\0"+
    "\1\62\16\61\1\u0261\1\u0262\14\0\2\61\1\0\1\61"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\10\0\2\147"+
    "\2\0\1\42\12\147\1\u0263\3\147\1\0\1\147\14\0"+
    "\2\147\1\0\1\147\1\0\2\147\2\0\4\147\1\0"+
    "\1\147\10\0\2\61\2\0\1\62\12\61\1\u0264\3\61"+
    "\1\0\1\61\14\0\2\61\1\0\1\61\1\0\2\61"+
    "\2\0\4\61\1\0\1\61\10\0\2\147\2\0\1\42"+
    "\12\147\1\u0265\3\147\1\0\1\147\14\0\2\147\1\0"+
    "\1\147\1\0\2\147\2\0\4\147\1\0\1\147\10\0"+
    "\2\61\2\0\1\62\12\61\1\u0266\3\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\5\61\1\u0267"+
    "\10\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\30\0\1\u0268\47\0"+
    "\2\61\2\0\1\62\4\61\1\u0269\11\61\1\0\1\61"+
    "\14\0\2\61\1\0\1\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\10\0\2\61\2\0\1\62\16\61\1\u026a"+
    "\1\u026b\14\0\2\61\1\0\1\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\24\0\1\u026c\53\0\2\61\2\0"+
    "\1\62\16\61\1\0\1\61\14\0\2\61\1\u026d\1\u026e"+
    "\1\0\2\61\2\0\4\61\1\0\1\61\27\0\1\u026f"+
    "\62\0\1\u0270\55\0\2\61\2\0\1\62\5\61\1\u0271"+
    "\10\61\1\0\1\61\14\0\2\61\1\0\1\61\1\0"+
    "\2\61\2\0\4\61\1\0\1\61\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\1\11\3\1\1\11\2\1\1\11"+
    "\12\1\2\11\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\4\0\3\1\15\0\2\1\13\0\1\11\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\10\0\1\1\1\0"+
    "\2\1\2\0\2\1\2\0\1\1\4\0\5\1\1\11"+
    "\3\0\1\1\5\0\1\1\2\0\1\1\5\0\1\1"+
    "\11\0\2\1\4\0\2\1\2\0\1\11\1\0\7\1"+
    "\2\0\2\1\1\0\3\1\1\0\1\1\5\0\2\1"+
    "\1\0\2\1\1\0\4\1\15\0\2\1\13\0\2\1"+
    "\3\0\1\11\2\1\1\0\1\1\11\0\1\1\3\0"+
    "\16\1\1\0\1\1\1\0\1\1\10\0\4\1\1\0"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\5\1\10\0"+
    "\1\1\4\0\1\1\1\0\1\1\25\0\1\11\1\1"+
    "\10\0\1\11\1\1\1\0\11\1\1\11\4\0\1\1"+
    "\1\0\2\1\6\0\5\1\1\0\4\1\1\0\1\1"+
    "\11\0\7\1\20\0\1\1\10\0\1\11\5\0\1\1"+
    "\1\0\1\11\6\1\1\0\1\1\1\0\3\1\1\0"+
    "\6\1\1\11\1\1\4\0\1\1\4\0\1\1\14\0"+
    "\1\11\1\1\6\0\1\11\1\1\12\0\2\1\2\0"+
    "\1\1\12\0\2\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\4\1\10\0\1\11\4\0\1\1\1\11"+
    "\5\1\1\11\1\1\2\0\4\1\2\0\1\1\6\0"+
    "\1\11\3\0\1\1\1\0\2\1\1\11\1\1\11\0"+
    "\1\11\2\0\1\1\17\0\1\11\1\0\1\1\1\11"+
    "\2\1\4\0\1\11\1\1\3\0\1\11\5\1\3\0"+
    "\1\11\1\1\3\0\2\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<Errors> LexicError = new LinkedList<Errors>();
    public static boolean is_date = true;
    public static String Error_List = "";



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public testLex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Errors datos = new Errors(yytext(), yyline+1, yycolumn+1, "Error Léxico", "Simbolo no existe en el lenguaje");
          LexicError.add(datos);   
          String cadena = "<tr>"+"\n"+"<td>"+"Lexic_Error"+"</td>"+"<td>"+yytext()+"</td>"+"<td>"+(yyline + 1)+"</td>"+"<td>"+(yycolumn + 1)+"</td>"+"\n"+"</tr>"+"\n";
          Error_List += cadena;
            } 
            // fall through
          case 73: break;
          case 2: 
            { System.out.println("tk_expresion, lexema:"+yytext());
                    return new Symbol(sym.EXP, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 74: break;
          case 3: 
            { System.out.println("tk_int, lexema:"+yytext());
                    return new Symbol(sym.ENTERO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 75: break;
          case 4: 
            { System.out.println("tk_id, lexema:"+yytext());
                    return new Symbol(sym.ID, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 76: break;
          case 5: 
            { System.out.println("tk_punto, lexema:"+yytext());
                    return new Symbol(sym.PUNTO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 77: break;
          case 6: 
            { System.out.println("tk_div, lexema:"+yytext());
                    return new Symbol(sym.DIV, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 78: break;
          case 7: 
            { /* omitirlos */
            } 
            // fall through
          case 79: break;
          case 8: 
            { System.out.println("tk_mult, lexema:"+yytext());
                    return new Symbol(sym.POR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 80: break;
          case 9: 
            { System.out.println("tk_parabre, lexema:"+yytext());
                    return new Symbol(sym.PARABRE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 81: break;
          case 10: 
            { System.out.println("tk_parcierra, lexema:"+yytext());
                    return new Symbol(sym.PARCIERRA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 82: break;
          case 11: 
            { System.out.println("tk_parabre, lexema:"+yytext());
                    return new Symbol(sym.CORABRE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 83: break;
          case 12: 
            { System.out.println("tk_parcierra, lexema:"+yytext());
                    return new Symbol(sym.CORCIERRA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 84: break;
          case 13: 
            { System.out.println("tk_expWH, lexema:"+yytext());
                    return new Symbol(sym.EXPWH, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 85: break;
          case 14: 
            { System.out.println("tk_suma, lexema:"+yytext());
                    return new Symbol(sym.MAS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 86: break;
          case 15: 
            { System.out.println("tk_resta, lexema:"+yytext());
                    return new Symbol(sym.MENOS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 87: break;
          case 16: 
            { System.out.println("tk_coma, lexema:"+yytext());
                    return new Symbol(sym.COMA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 88: break;
          case 17: 
            { System.out.println("tk_puntoycoma, lexema:"+yytext());
                    return new Symbol(sym.PYC, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 89: break;
          case 18: 
            { System.out.println("tk_intabre, lexema:"+yytext());
                    return new Symbol(sym.INTABRE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 90: break;
          case 19: 
            { System.out.println("tk_intcierra, lexema:"+yytext());
                    return new Symbol(sym.INTCIERRA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 91: break;
          case 20: 
            { System.out.println("tk_expR, lexema:"+yytext());
                    return new Symbol(sym.EXPR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 92: break;
          case 21: 
            { System.out.println("tk_or, lexema:"+yytext());
                    return new Symbol(sym.OR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 93: break;
          case 22: 
            { System.out.println("tk_si, lexema:"+yytext());
                    return new Symbol(sym.SI, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 94: break;
          case 23: 
            { System.out.println("tk_string, lexema:"+yytext());
                    return new Symbol(sym.CADENA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 95: break;
          case 24: 
            { System.out.println("tk_asignar, lexema:"+yytext());
                    return new Symbol(sym.ASIGNAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 96: break;
          case 25: 
            { System.out.println("tk_float, lexema:"+yytext());
                    return new Symbol(sym.FLOTANTE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 97: break;
          case 26: 
            { System.out.println("tk_expSC, lexema:"+yytext());
                    return new Symbol(sym.EXPSC, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 98: break;
          case 27: 
            { System.out.println("tk_not, lexema:"+yytext());
                    return new Symbol(sym.NOT, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 99: break;
          case 28: 
            { System.out.println("tk_mod, lexema:"+yytext());
                    return new Symbol(sym.MOD, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 100: break;
          case 29: 
            { System.out.println("tk_and, lexema:"+yytext());
                    return new Symbol(sym.AND, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 101: break;
          case 30: 
            { System.out.println("tk_fin, lexema:"+yytext());
                    return new Symbol(sym.FIN, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 102: break;
          case 31: 
            { System.out.println("tk_car, lexema:"+yytext());
                    return new Symbol(sym.CARACTER, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 103: break;
          case 32: 
            { System.out.println("tk_comentario, lexema:"+yytext());
                    return new Symbol(sym.COMENTARIO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 104: break;
          case 33: 
            { System.out.println("tk_expPot, lexema:"+yytext());
                    return new Symbol(sym.EXPPOT, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 105: break;
          case 34: 
            { System.out.println("tk_osi, lexema:"+yytext());
                    return new Symbol(sym.OSI, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 106: break;
          case 35: 
            { System.out.println("tk_como, lexema:"+yytext());
                    return new Symbol(sym.COMO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 107: break;
          case 36: 
            { System.out.println("tk_para, lexema:"+yytext());
                    return new Symbol(sym.PARA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 108: break;
          case 37: 
            { System.out.println("tk_menor, lexema:"+yytext());
                    return new Symbol(sym.MENOR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 109: break;
          case 38: 
            { System.out.println("tk_mayor, lexema:"+yytext());
                    return new Symbol(sym.MAYOR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 110: break;
          case 39: 
            { System.out.println("tk_Bool, lexema:"+yytext());
                    return new Symbol(sym.EXPBOOL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 111: break;
          case 40: 
            { System.out.println("tk_segun, lexema:"+yytext());
                    return new Symbol(sym.SEGUN, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 112: break;
          case 41: 
            { System.out.println("tk_comentarios, lexema:"+yytext());
                    return new Symbol(sym.COMENTARIOS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 113: break;
          case 42: 
            { System.out.println("tk_hacer, lexema:"+yytext());
                    return new Symbol(sym.HACER, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 114: break;
          case 43: 
            { System.out.println("tk_hasta, lexema:"+yytext());
                    return new Symbol(sym.HASTA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 115: break;
          case 44: 
            { System.out.println("tk_tipo, lexema:"+yytext());
                    return new Symbol(sym.TIPO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 116: break;
          case 45: 
            { System.out.println("tk_metodo, lexema:"+yytext());
                    return new Symbol(sym.METODO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 117: break;
          case 46: 
            { System.out.println("tk_finsi, lexema:"+yytext());
                    return new Symbol(sym.FINSI, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 118: break;
          case 47: 
            { System.out.println("tk_char, lexema:"+yytext());
                    return new Symbol(sym.CHARACTER, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 119: break;
          case 48: 
            { System.out.println("tk_inicio, lexema:"+yytext());
                    return new Symbol(sym.INICIO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 120: break;
          case 49: 
            { System.out.println("tk_repetir, lexema:"+yytext());
                    return new Symbol(sym.REPETIR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 121: break;
          case 50: 
            { System.out.println("tk_funcion, lexema:"+yytext());
                    return new Symbol(sym.FUNCION, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 122: break;
          case 51: 
            { System.out.println("tk_mientras, lexema:"+yytext());
                    return new Symbol(sym.MIENTRAS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 123: break;
          case 52: 
            { System.out.println("tk_entonces, lexema:"+yytext());
                    return new Symbol(sym.ENTONCES, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 124: break;
          case 53: 
            { System.out.println("tk_igual, lexema:"+yytext());
                    return new Symbol(sym.ESIGUAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 125: break;
          case 54: 
            { System.out.println("tk_ejecutar, lexema:"+yytext());
                    return new Symbol(sym.EJECUTAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 126: break;
          case 55: 
            { System.out.println("tk_retornar, lexema:"+yytext());
                    return new Symbol(sym.RETORNAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 127: break;
          case 56: 
            { System.out.println("tk_finpara, lexema:"+yytext());
                    return new Symbol(sym.FINPARA, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 128: break;
          case 57: 
            { System.out.println("tk_ingresar, lexema:"+yytext());
                    return new Symbol(sym.INGRESAR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 129: break;
          case 58: 
            { System.out.println("tk_imprimir, lexema:"+yytext());
                    return new Symbol(sym.IMPRIMIR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 130: break;
          case 59: 
            { System.out.println("tk_pot, lexema:"+yytext());
                    return new Symbol(sym.POT, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 131: break;
          case 60: 
            { System.out.println("tk_convalor, lexema:"+yytext());
                    return new Symbol(sym.CONVALOR, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 132: break;
          case 61: 
            { System.out.println("tk_finsegun, lexema:"+yytext());
                    return new Symbol(sym.FINSEGUN, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 133: break;
          case 62: 
            { System.out.println("tk_hastaque, lexema:"+yytext());
                    return new Symbol(sym.HASTAQUE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 134: break;
          case 63: 
            { System.out.println("tk_finmetodo, lexema:"+yytext());
                    return new Symbol(sym.FINMETODO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 135: break;
          case 64: 
            { System.out.println("tk_finfuncion, lexema:"+yytext());
                    return new Symbol(sym.FINFUNCION, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 136: break;
          case 65: 
            { System.out.println("tk_imprimirnl, lexema:"+yytext());
                    return new Symbol(sym.IMPRIMIRNL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 137: break;
          case 66: 
            { System.out.println("tk_diferente, lexema:"+yytext());
                    return new Symbol(sym.ESDIFERENTE, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 138: break;
          case 67: 
            { System.out.println("tk_finmientras, lexema:"+yytext());
                    return new Symbol(sym.FINMIENTRAS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 139: break;
          case 68: 
            { System.out.println("tk_menorigual, lexema:"+yytext());
                    return new Symbol(sym.MENOROIGUAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 140: break;
          case 69: 
            { System.out.println("tk_mayorigual, lexema:"+yytext());
                    return new Symbol(sym.MAYOROIGUAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 141: break;
          case 70: 
            { System.out.println("tk_conparametros, lexema:"+yytext());
                    return new Symbol(sym.CONPARAMETROS, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 142: break;
          case 71: 
            { System.out.println("tk_conincremental, lexema:"+yytext());
                    return new Symbol(sym.CONINCREMENTAL, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 143: break;
          case 72: 
            { System.out.println("tk_delocontrario, lexema:"+yytext());
                    return new Symbol(sym.DELOCONTRARIO, yycolumn+1, yyline+1, yytext());
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
