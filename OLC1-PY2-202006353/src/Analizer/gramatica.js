/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,27],$V3=[1,40],$V4=[1,41],$V5=[1,42],$V6=[1,43],$V7=[1,44],$V8=[1,45],$V9=[1,46],$Va=[1,47],$Vb=[1,48],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,32],$Vg=[1,35],$Vh=[1,33],$Vi=[1,34],$Vj=[1,49],$Vk=[1,39],$Vl=[1,29],$Vm=[1,30],$Vn=[5,23,24,36,37,38,75,76,77,78,79,80,81,88,100,101,103,105,109,110,111,112,113,117,121,128,129],$Vo=[1,62],$Vp=[1,59],$Vq=[1,60],$Vr=[1,72],$Vs=[1,71],$Vt=[1,70],$Vu=[1,78],$Vv=[1,80],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[36,40,56,68,69],$VN=[1,116],$VO=[63,83],$VP=[2,73],$VQ=[1,118],$VR=[1,122],$VS=[1,134],$VT=[1,133],$VU=[30,36,39,49,50,51,52,53,54,55,56,122,123,124,125,126],$VV=[1,137],$VW=[1,138],$VX=[5,23,24,36,37,38,75,76,77,78,79,80,81,88,100,101,103,105,109,110,111,112,113,117,118,120,121,128,129],$VY=[1,149],$VZ=[1,148],$V_=[1,150],$V$=[1,151],$V01=[1,152],$V11=[1,153],$V21=[1,154],$V31=[1,155],$V41=[1,156],$V51=[1,157],$V61=[1,158],$V71=[1,159],$V81=[1,160],$V91=[1,161],$Va1=[1,162],$Vb1=[30,31,32,33,34,35,40,41,42,43,44,45,46,47,48,58,63,71,83,88,127],$Vc1=[5,23,24,30,36,37,38,39,49,50,51,52,53,54,55,56,75,76,77,78,79,80,81,88,100,101,103,105,109,110,111,112,113,117,121,122,123,124,125,126,128,129],$Vd1=[1,200],$Ve1=[1,209],$Vf1=[1,203],$Vg1=[1,204],$Vh1=[1,205],$Vi1=[1,206],$Vj1=[1,202],$Vk1=[1,207],$Vl1=[1,208],$Vm1=[30,31,32,33,34,35,36,40,41,42,43,44,45,46,47,48,56,58,63,71,83,84,88,95,127],$Vn1=[1,219],$Vo1=[40,63],$Vp1=[40,58,63,88],$Vq1=[1,224],$Vr1=[30,31,84,95],$Vs1=[30,31,32,33,34,40,41,42,43,44,45,46,47,48,58,63,71,83,88,127],$Vt1=[40,47,48,58,63,71,83,88,127],$Vu1=[1,277],$Vv1=[56,63,83,87],$Vw1=[30,31,40,41,42,43,44,45,46,47,48,58,63,71,83,88,127],$Vx1=[40,41,42,43,44,45,46,47,48,58,63,71,83,88,127],$Vy1=[40,45,46,47,48,58,63,71,83,88,127],$Vz1=[1,321],$VA1=[1,336],$VB1=[1,337],$VC1=[1,343],$VD1=[88,109,110],$VE1=[63,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEC_VARIABLE":7,"DEC_FUNCION":8,"DEC_ARREGLOS":9,"ASIGNACION":10,"ARRAY_PUSH":11,"ARRAY_POP":12,"PRINT":13,"PRINTLN":14,"SENTENCIA_IF":15,"SWITCH":16,"BREAK":17,"RETURN":18,"CONTINUE":19,"WHILE":20,"DO_WHILE":21,"FOR":22,"FOR_OF":23,"FOR_IN":24,"LLAMADA_FUNCION":25,"RUN_FUNCION":26,"MAS_MENOS":27,"ARRAY_LENGTH":28,"EXPRESION":29,"menos":30,"mas":31,"por":32,"div":33,"mod":34,"potencia":35,"id":36,"mas_mas":37,"menos_menos":38,"par_izq":39,"par_der":40,"mayor":41,"menor":42,"mayor_igual":43,"menor_igual":44,"igual_que":45,"dif_que":46,"and":47,"or":48,"not":49,"number":50,"cadena":51,"character":52,"true":53,"false":54,"null":55,"cor_izq":56,"EXPRESIONES":57,"cor_der":58,"ACCESO_ARREGLO":59,"TERNARIO":60,"FUNCIONES":61,"DECLARACIONES":62,"coma":63,"DEC_ID":64,"DEC_ID_TIPO":65,"DEC_ID_COR":66,"DEC_ID_EXP":67,"DEC_ID_TIPO_EXP":68,"DEC_ID_TIPO_CORCHETES_EXP":69,"CASTEOS":70,"dos_puntos":71,"TIPOS":72,"CORCHETES":73,"TIPO":74,"let":75,"const":76,"int":77,"double":78,"char":79,"string":80,"boolean":81,"void":82,"punto_coma":83,"igual":84,"IGUALES":85,"ACCESOS":86,"llave_izq":87,"llave_der":88,"PARAMETROS":89,"PARAMETRO":90,"ACCESOS_ARRAY":91,"new":92,"tochararray":93,"ARREGLOS":94,"punto":95,"pop":96,"push":97,"length":98,"CAST":99,"while":100,"do":101,"until":102,"for":103,"ASIGNACION_FOR":104,"switch":105,"CASES":106,"CASE":107,"DEFAULT":108,"case":109,"default":110,"continue":111,"break":112,"return":113,"IF":114,"ELSE":115,"L_ELIF":116,"if":117,"else":118,"ES_ELIF":119,"elif":120,"run":121,"typeof":122,"tostring":123,"tolower":124,"toupper":125,"round":126,"interrogacion":127,"print":128,"println":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"FOR_OF",24:"FOR_IN",30:"menos",31:"mas",32:"por",33:"div",34:"mod",35:"potencia",36:"id",37:"mas_mas",38:"menos_menos",39:"par_izq",40:"par_der",41:"mayor",42:"menor",43:"mayor_igual",44:"menor_igual",45:"igual_que",46:"dif_que",47:"and",48:"or",49:"not",50:"number",51:"cadena",52:"character",53:"true",54:"false",55:"null",56:"cor_izq",58:"cor_der",63:"coma",68:"DEC_ID_TIPO_EXP",69:"DEC_ID_TIPO_CORCHETES_EXP",71:"dos_puntos",75:"let",76:"const",77:"int",78:"double",79:"char",80:"string",81:"boolean",82:"void",83:"punto_coma",84:"igual",87:"llave_izq",88:"llave_der",92:"new",93:"tochararray",95:"punto",96:"pop",97:"push",98:"length",100:"while",101:"do",102:"until",103:"for",105:"switch",109:"case",110:"default",111:"continue",112:"break",113:"return",117:"if",118:"else",120:"elif",121:"run",122:"typeof",123:"tostring",124:"tolower",125:"toupper",126:"round",127:"interrogacion",128:"print",129:"println"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[66,4],[65,3],[64,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[7,3],[67,3],[10,4],[10,5],[10,4],[85,1],[85,2],[85,2],[8,8],[8,9],[8,6],[8,9],[8,10],[8,7],[73,3],[73,2],[90,2],[89,3],[89,1],[9,8],[9,9],[9,8],[9,8],[94,5],[94,3],[57,3],[57,1],[12,6],[11,7],[11,8],[28,8],[28,8],[59,2],[86,3],[86,2],[86,4],[86,3],[91,4],[91,3],[91,4],[91,3],[91,3],[91,2],[20,7],[21,9],[21,9],[22,10],[22,10],[104,3],[104,2],[104,2],[104,3],[104,3],[16,7],[106,2],[106,1],[106,1],[106,2],[107,4],[108,3],[19,2],[17,2],[18,3],[18,2],[15,1],[15,2],[15,2],[15,3],[114,7],[115,4],[119,7],[116,2],[116,1],[26,5],[26,6],[25,4],[25,5],[61,3],[61,4],[61,4],[61,4],[61,4],[61,4],[61,4],[70,6],[99,4],[27,3],[27,3],[27,3],[27,3],[60,5],[13,5],[14,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'INICIO', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 3:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 26: case 33: case 34: case 44:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 27: case 28: case 29: case 30: case 31: case 32: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [new NodoAST({label: 'NUMBER', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 46: case 47:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 49: case 50:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [new NodoAST({label: 'BOOLEAN', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [new NodoAST({label: 'NULL', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 54: case 55: case 56: case 57:
 this.$ = new NodoAST({label: 'EXPRESION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 58: case 59: case 60: case 61: case 62: case 63:
 this.$ = new NodoAST({label: 'DECLARACIONES', hijos: [...$$[$0-2].hijos,$$[$0]], linea: yylineno}); 
break;
case 64: case 65: case 66: case 67: case 68: case 69: case 70:
 this.$ = new NodoAST({label: 'DECLARACIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'DEC_ID_COR', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 72:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 73:
 this.$ = new NodoAST({label: 'DEC_ID', hijos: [$$[$0]], linea: yylineno}); 
break;
case 74: case 75: case 76: case 77: case 78: case 79: case 80:
 this.$ = new NodoAST({label: 'TIPO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 81: case 82: case 83: case 84: case 85: case 86: case 87:
 this.$ = new NodoAST({label: 'TIPOS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 88:
 this.$ = new NodoAST({label: 'TIPOS', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 89:
 this.$ = new NodoAST({label: 'DEC_VARIABLE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});  
break;
case 90:
 this.$ = new NodoAST({label: 'DEC_ID_EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 91: case 93:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 92:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'IGUALES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 95: case 96:
 this.$ = new NodoAST({label: 'IGUALES', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'DEC_FUNCION', hijos: [$$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 98: case 100:
 this.$ = new NodoAST({label: 'DEC_FUNCION', hijos: [$$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 99:
 this.$ = new NodoAST({label: 'DEC_FUNCION', hijos: [$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 101:
 this.$ = new NodoAST({label: 'DEC_FUNCION', hijos: [$$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 102:
 this.$ = new NodoAST({label: 'DEC_FUNCION', hijos: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 103:
 this.$ = new NodoAST({label: 'CORCHETES', hijos: [...$$[$0-2].hijos, '[]'], linea: yylineno}); 
break;
case 104:
 this.$ = new NodoAST({label: 'CORCHETES', hijos: ['[]'], linea: yylineno}); 
break;
case 105:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 106:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 107:
 this.$ = new NodoAST({label: 'PARAMETROS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 108:
 this.$ = new NodoAST({label: 'DEC_ARREGLOS', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-2],$$[$0-1]], linea: yylineno}); 
break;
case 109:
 this.$ = new NodoAST({label: 'DEC_ARREGLOS', hijos: [$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 110: case 111:
 this.$ = new NodoAST({label: 'DEC_ARREGLOS', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-2]], linea: yylineno}); 
break;
case 112:
 this.$ = new NodoAST({label: 'ARREGLOS', hijos: [...$$[$0-4].hijos,$$[$0-1]], linea: yylineno}); 
break;
case 113:
 this.$ = new NodoAST({label: 'ARREGLOS', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 114:
 this.$ = new NodoAST({label: 'EXPRESIONES', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 115:
 this.$ = new NodoAST({label: 'EXPRESIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 116:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 117:
 this.$ = new NodoAST({label: 'ARRAY_PUSH', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 118:
 this.$ = new NodoAST({label: 'ARRAY_PUSH', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 119: case 120:
 this.$ = new NodoAST({label: 'ARRAY_LENGTH', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 121:
 this.$ = new NodoAST({label: 'ACCESO_ARREGLO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 122:
 this.$ = new NodoAST({label: 'ACCESOS', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 123:
 this.$ = new NodoAST({label: 'ACCESOS', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 124:
 this.$ = new NodoAST({label: 'ACCESOS', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 125:
 this.$ = new NodoAST({label: 'ACCESOS', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 126: case 128:
 this.$ = new NodoAST({label: 'ACCESOS_ARRAY', hijos: [...$$[$0-3].hijos,$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 127: case 129:
 this.$ = new NodoAST({label: 'ACCESOS_ARRAY', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 130:
 this.$ = new NodoAST({label: 'ACCESOS_ARRAY', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 131:
 this.$ = new NodoAST({label: 'ACCESOS_ARRAY', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 132:
 this.$ = new NodoAST({label: 'WHILE', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 133: case 134:
 this.$ = new NodoAST({label: 'DO_WHILE_UNTIL', hijos: [$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 135: case 136:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 137: case 140: case 141:
 this.$ = new NodoAST({label: 'ASIGNACION_FOR', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 138: case 139:
 this.$ = new NodoAST({label: 'ASIGNACION_FOR', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 142:
 this.$ = new NodoAST({label: 'SWITCH', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 143: case 146:
 this.$ = new NodoAST({label: 'CASES', hijos: [...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 144: case 145:
 this.$ = new NodoAST({label: 'CASES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 147:
 this.$ = new NodoAST({label: 'CASE', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 148:
 this.$ = new NodoAST({label: 'DEFAULT', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 149:
 this.$ = new NodoAST({label: 'CONTINUE', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 150:
 this.$ = new NodoAST({label: 'BREAK', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 151:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 152:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 153:
 this.$ = new NodoAST({label: 'SENTENCIA_IF', hijos: [$$[$0]], linea: yylineno}); 
break;
case 154: case 155:
 this.$ = new NodoAST({label: 'SENTENCIA_IF', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 156:
 this.$ = new NodoAST({label: 'SENTENCIA_IF', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 157:
 this.$ = new NodoAST({label: 'IF', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 158:
 this.$ = new NodoAST({label: 'ELSE', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 159:
 this.$ = new NodoAST({label: 'ES_ELIF', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 160:
 this.$ = new NodoAST({label: 'L_ELIF', hijos: [...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 161:
 this.$ = new NodoAST({label: 'L_ELIF', hijos: [$$[$0]], linea: yylineno}); 
break;
case 162:
 this.$ = new NodoAST({label: 'RUN_FUNCION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 163:
 this.$ = new NodoAST({label: 'RUN_FUNCION', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 164:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 165:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 166:
 this.$ = new NodoAST({label: 'FUNCIONES', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 167: case 168: case 169: case 170: case 171: case 172:
 this.$ = new NodoAST({label: 'FUNCIONES', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 173:
 this.$ = new NodoAST({label: 'CAST_EXP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 174:
 this.$ = new NodoAST({label: 'CAST', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 175: case 176: case 177: case 178:
 this.$ = new NodoAST({label: 'MAS_MENOS', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 179:
 this.$ = new NodoAST({label: 'TERNARIO', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 180:
 this.$ = new NodoAST({label: 'PRINT', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 181:
 this.$ = new NodoAST({label: 'PRINTLN', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{1:[3]},{5:[1,50],6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),{36:[1,54],56:$Vo,62:52,64:55,65:56,66:57,67:58,68:$Vp,69:$Vq,70:61,91:53},{30:$Vr,31:$Vs,37:[1,67],38:[1,68],39:[1,63],56:$Vo,84:$Vt,85:64,86:65,91:69,95:[1,66]},{30:$Vr,31:$Vs,84:$Vt,85:73},{39:[1,74]},{39:[1,75]},o($Vn,[2,153],{115:76,116:77,119:79,118:$Vu,120:$Vv}),{39:[1,81]},{83:[1,82]},{12:97,29:83,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,83:[1,84],122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{83:[1,105]},{39:[1,106]},{87:[1,107]},{39:[1,108]},{36:[1,109]},{36:[1,110]},{36:[1,111]},o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,80]),{39:[1,112]},{1:[2,1]},o($Vn,[2,2]),{63:[1,114],83:[1,113]},{36:[1,115],56:$VN},o($VO,$VP,{71:$VQ,84:[1,117]}),o($VO,[2,64]),o($VO,[2,65]),o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,68]),o($VO,[2,69]),o($VO,[2,70]),{12:97,29:119,30:$Vw,36:$Vx,39:$VR,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,58:[1,121],59:96,60:98,61:99,99:120,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,40:[1,123],49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:125,59:96,60:98,61:99,74:128,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,89:124,90:126,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:129,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{30:$Vr,31:$Vs,84:$Vt,85:130,95:[1,131]},{36:$VS,96:$VT,97:[1,132]},{83:[1,135]},{83:[1,136]},o([30,31,32,33,34,35,40,41,42,43,44,45,46,47,48,58,63,71,83,84,88,127],[2,121],{56:$VN}),o($VU,[2,94]),{84:$VV},{84:$VW},{12:97,29:139,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:140,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:141,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vn,[2,154]),o($Vn,[2,155],{115:142,119:143,118:$Vu,120:$Vv}),{87:[1,144]},o($VX,[2,161]),{39:[1,145]},{12:97,29:146,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vn,[2,150]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,83:[1,147],127:$Va1},o($Vn,[2,152]),{12:97,29:163,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vb1,[2,48],{91:69,37:[1,164],38:[1,165],39:[1,167],56:$Vo,95:[1,166]}),{12:97,29:168,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:169,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vb1,[2,45]),o($Vb1,[2,46]),o($Vb1,[2,47]),o($Vb1,[2,49]),o($Vb1,[2,50]),o($Vb1,[2,51]),{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:170,58:[1,171],59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vb1,[2,54]),o($Vb1,[2,55]),o($Vb1,[2,56]),o($Vb1,[2,57]),{39:[1,172]},{39:[1,173]},{39:[1,174]},{39:[1,175]},{39:[1,176]},o($Vn,[2,149]),{12:97,29:177,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{4:178,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{7:179,10:180,36:[1,182],59:28,74:181,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb},{39:[1,183]},{83:[1,184]},{83:[1,185]},{12:97,29:186,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vc1,[2,89]),{36:[1,193],64:187,65:188,66:189,67:190,68:[1,191],69:[1,192]},{84:[1,194]},{12:97,29:195,30:$Vw,36:$Vx,39:$VR,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,58:[1,197],59:96,60:98,61:99,99:196,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:199,30:$Vw,36:$Vx,39:$Vd1,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,98:[1,198],122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{36:$Ve1,50:$Vf1,72:201,77:$Vg1,78:$Vh1,79:$Vi1,80:$Vj1,81:$Vk1,82:$Vl1},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,58:[1,210],127:$Va1},{58:[1,211]},o($Vm1,[2,131]),{12:97,29:168,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,74:212,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{71:[1,213],83:[1,215],87:[1,214]},{40:[1,216],63:[1,217]},{40:[1,218],63:$Vn1},o($Vo1,[2,107]),o($Vp1,[2,115],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1}),{36:[1,220]},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,83:[1,221],127:$Va1},{12:97,29:222,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{36:$Vq1,97:[1,223]},{39:[1,225]},{39:[1,226]},o($Vr1,[2,123],{91:227,56:$Vo}),o($Vn,[2,175]),o($Vn,[2,176]),o($VU,[2,95]),o($VU,[2,96]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,83:[1,228],127:$Va1},{40:[1,229],63:$Vn1},{40:[1,230],63:$Vn1},o($Vn,[2,156]),o($VX,[2,160]),{4:231,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{12:97,29:232,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,233],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},o($Vn,[2,151]),{12:97,29:234,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:235,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:236,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:237,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:238,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:239,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:240,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:241,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:242,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:243,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:244,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:245,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:246,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:247,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:248,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vs1,[2,26],{35:$V11}),o($Vb1,[2,33]),o($Vb1,[2,34]),{96:$VT},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,40:[1,249],49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:250,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,251],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},o($Vt1,[2,44],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71}),{58:[1,252],63:$Vn1},o($Vb1,[2,53]),{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:253,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:254,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:255,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:256,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:257,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,258],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,259],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{12:97,29:260,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:261,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{36:[1,262],62:52,64:55,65:56,66:57,67:58,68:$Vp,69:$Vq,70:61},{30:$Vr,31:$Vs,56:$Vo,84:$Vt,85:64,86:263,91:69,95:[1,264]},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,40:[1,265],49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:266,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vn,[2,177]),o($Vn,[2,178]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,267],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,62]),o($VO,[2,63]),o($VO,$VP,{71:$VQ,84:[1,268]}),{87:[1,271],92:[1,269],93:[1,270]},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,58:[1,272],127:$Va1},{58:[1,273]},o($Vm1,[2,130]),{39:[1,274]},o($VO,[2,90],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1}),{12:97,29:168,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,74:275,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($VO,[2,72],{73:276,56:$Vu1}),o($Vv1,[2,81]),o($Vv1,[2,82]),o($Vv1,[2,83]),o($Vv1,[2,84]),o($Vv1,[2,85]),o($Vv1,[2,86]),o($Vv1,[2,87]),o($Vv1,[2,88]),o($Vm1,[2,127]),o($Vm1,[2,129]),{40:[1,278]},{36:$Ve1,50:$Vf1,72:279,77:$Vg1,78:$Vh1,79:$Vi1,80:$Vj1,81:$Vk1,82:$Vl1},{4:280,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vn,[2,164]),{71:[1,281],87:[1,282]},{74:128,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,90:283},{83:[1,284]},{12:97,29:285,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vo1,[2,105]),o($Vc1,[2,91]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,83:[1,286],127:$Va1},{39:[1,287]},o($Vr1,[2,122],{91:288,56:$Vo}),{12:97,29:289,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{40:[1,290]},o($Vr1,[2,125],{56:$VN}),o($Vc1,[2,93]),{83:[1,291]},{83:[1,292]},{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,293],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,294],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{87:[1,295]},o($Vw1,[2,27],{32:$V_,33:$V$,34:$V01,35:$V11}),o($Vw1,[2,28],{32:$V_,33:$V$,34:$V01,35:$V11}),o($Vs1,[2,29],{35:$V11}),o($Vs1,[2,30],{35:$V11}),o($Vs1,[2,31],{35:$V11}),o($Vs1,[2,32],{35:$V11}),o($Vx1,[2,36],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11}),o($Vx1,[2,37],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11}),o($Vx1,[2,38],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11}),o($Vx1,[2,39],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11}),o($Vy1,[2,40],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51}),o($Vy1,[2,41],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51}),o($Vt1,[2,42],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71}),o([40,48,58,63,71,83,88,127],[2,43],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81}),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,71:[1,296],127:$Va1},o($Vb1,[2,166]),{40:[1,297],63:$Vn1},o($Vb1,[2,35]),o($Vb1,[2,52]),{40:[1,298],63:$Vn1},{40:[1,299],63:$Vn1},{40:[1,300],63:$Vn1},{40:[1,301],63:$Vn1},{40:[1,302],63:$Vn1},{87:[1,303]},{100:[1,304],102:[1,305]},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,83:[1,306],127:$Va1},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,83:[1,307],127:$Va1},o($VO,$VP,{71:$VQ,84:[1,308]}),{30:$Vr,31:$Vs,84:$Vt,85:130,95:[1,309]},{36:$VS},{83:[1,310]},{40:[1,311],63:$Vn1},{87:[1,312]},{12:97,29:199,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{74:313,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb},{39:[1,314]},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:316,59:96,60:98,61:99,87:[1,317],94:315,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vm1,[2,126]),o($Vm1,[2,128]),{36:[1,319],59:318},{40:[1,320]},o($VO,[2,71],{56:$Vz1}),{58:[1,322]},{12:97,29:323,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{56:$Vu1,73:325,87:[1,324]},{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,326],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{36:$Ve1,50:$Vf1,72:327,77:$Vg1,78:$Vh1,79:$Vi1,80:$Vj1,81:$Vk1,82:$Vl1},{4:328,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vo1,[2,106]),o($Vn,[2,165]),o($Vp1,[2,114],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1}),o($Vc1,[2,92]),{12:97,29:329,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vr1,[2,124],{56:$VN}),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,330],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{83:[1,331]},o($Vn,[2,180]),o($Vn,[2,181]),o($Vn,[2,158]),{87:[1,332]},{106:333,107:334,108:335,109:$VA1,110:$VB1},{12:97,29:338,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vb1,[2,167]),o($Vb1,[2,168]),o($Vb1,[2,169]),o($Vb1,[2,170]),o($Vb1,[2,171]),o($Vb1,[2,172]),{4:339,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{39:[1,340]},{39:[1,341]},{36:$VC1,104:342},{36:$VC1,104:344},{12:97,29:199,30:$Vw,36:$Vx,39:$Vd1,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{36:$Vq1},o($Vn,[2,162]),{83:[1,345]},{4:346,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{56:$Vo,91:347},{12:97,29:348,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{63:[1,350],88:[1,349]},{63:$Vn1,88:[1,351]},{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:352,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{40:[1,353]},{40:[1,354],56:$Vo,91:69},{12:97,29:355,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{58:[1,356]},o($Vv1,[2,104]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,58:[2,174],127:$Va1},{4:357,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{56:$Vz1,87:[1,358]},o($Vn,[2,99]),{56:$Vu1,73:360,87:[1,359]},{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,361],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,362],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{83:[1,363]},o([5,23,24,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,58,63,71,75,76,77,78,79,80,81,83,88,100,101,103,105,109,110,111,112,113,117,121,127,128,129],[2,116]),{4:364,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{88:[1,365],107:366,108:367,109:$VA1,110:$VB1},o($VD1,[2,144]),o($VD1,[2,145]),{12:97,29:368,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{71:[1,369]},o([40,58,63,71,83,88,127],[2,179],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91}),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,370],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{12:97,29:371,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:372,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{40:[1,373]},{30:[1,378],31:[1,377],37:[1,375],38:[1,376],84:$Vt,85:374},{40:[1,379]},o($Vn,[2,163]),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,380],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{56:$VN,83:[1,381]},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,382],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{83:[1,383]},{87:[1,384]},{83:[1,385]},{63:$Vn1,88:[1,386]},{83:[1,387]},{83:[1,388]},o($VO,[2,173],{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1}),o($Vv1,[2,103]),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,389],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{4:390,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{4:391,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{56:$Vz1,87:[1,392]},o($Vn,[2,102]),{83:[1,393]},o($Vn,[2,117]),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,394],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vn,[2,142]),o($VD1,[2,143]),o($VD1,[2,146]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,71:[1,395],127:$Va1},{4:396,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vn,[2,132]),{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,397],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[1,398],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{87:[1,399]},{12:97,29:400,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{40:[2,138]},{40:[2,139]},{12:97,29:401,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,84:$VV,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{12:97,29:402,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,59:96,60:98,61:99,84:$VW,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},{87:[1,403]},o($VX,[2,157]),o($Vn,[2,108]),{83:[1,404]},o($Vn,[2,110]),{12:97,29:127,30:$Vw,36:$Vx,39:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:405,59:96,60:98,61:99,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL},o($Vn,[2,111]),o($VE1,[2,113]),o($Vn,[2,119]),o($Vn,[2,120]),o($Vn,[2,97]),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,406],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,407],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{4:408,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vn,[2,118]),o($VX,[2,159]),{4:409,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($VD1,[2,148],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,25:22,26:23,27:24,28:25,74:26,59:28,114:31,6:51,23:$V0,24:$V1,36:$V2,37:$V3,38:$V4,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,117:$Vj,121:$Vk,128:$Vl,129:$Vm}),{83:[1,410]},{83:[1,411]},{4:412,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[2,137],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[2,140],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{30:$VY,31:$VZ,32:$V_,33:$V$,34:$V01,35:$V11,40:[2,141],41:$V21,42:$V31,43:$V41,44:$V51,45:$V61,46:$V71,47:$V81,48:$V91,127:$Va1},{4:413,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($Vn,[2,109]),{63:$Vn1,88:[1,414]},o($Vn,[2,98]),o($Vn,[2,100]),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,415],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($VD1,[2,147],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,25:22,26:23,27:24,28:25,74:26,59:28,114:31,6:51,23:$V0,24:$V1,36:$V2,37:$V3,38:$V4,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,117:$Vj,121:$Vk,128:$Vl,129:$Vm}),o($Vn,[2,133]),o($Vn,[2,134]),{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,416],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},{6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,25:22,26:23,27:24,28:25,36:$V2,37:$V3,38:$V4,59:28,74:26,75:$V5,76:$V6,77:$V7,78:$V8,79:$V9,80:$Va,81:$Vb,88:[1,417],100:$Vc,101:$Vd,103:$Ve,105:$Vf,111:$Vg,112:$Vh,113:$Vi,114:31,117:$Vj,121:$Vk,128:$Vl,129:$Vm},o($VE1,[2,112]),o($Vn,[2,101]),o($Vn,[2,135]),o($Vn,[2,136])],
defaultActions: {50:[2,1],375:[2,138],376:[2,139]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { NodoAST } = require('../AST/nodoAST');
  const error_1 = require("../AST/error");
  const errores_1 = require("../AST/errores");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// espacios en blanco
break;
case 1:// comentario simple
break;
case 2:// comentario multilíneas
break;
case 3:return 50;
break;
case 4:return 82;
break;
case 5:return 81;
break;
case 6:return 80;
break;
case 7:return 76;
break;
case 8:return 113;
break;
case 9:return 55;
break;
case 10:return 97;
break;
case 11:return 96;
break;
case 12:return 117;
break;
case 13:return 118;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 112;
break;
case 17:return 105;
break;
case 18:return 109;
break;
case 19:return 110;
break;
case 20:return 111;
break;
case 21:return 100;
break;
case 22:return 101;
break;
case 23:return 103;
break;
case 24:return 128;
break;
case 25:return 129;
break;
case 26:return 77;
break;
case 27:return 78;
break;
case 28:return 79;
break;
case 29:return 92;
break;
case 30:return 120;
break;
case 31:return 102;
break;
case 32:return 121;
break;
case 33:return 93;
break;
case 34:return 98;
break;
case 35:return 122;
break;
case 36:return 123;
break;
case 37:return 124;
break;
case 38:return 125;
break;
case 39:return 126;
break;
case 40:return 83;
break;
case 41:return 63;
break;
case 42:return 71;
break;
case 43:return 87;
break;
case 44:return 88;
break;
case 45:return 39;
break;
case 46:return 40;
break;
case 47:return 56;
break;
case 48:return 58;
break;
case 49:return 95;
break;
case 50:return 37
break;
case 51:return 31;
break;
case 52:return 38
break;
case 53:return 30;
break;
case 54:return 35;
break;
case 55:return 32;
break;
case 56:return 33;
break;
case 57:return 34;
break;
case 58:return 44;
break;
case 59:return 43;
break;
case 60:return 41;
break;
case 61:return 42;
break;
case 62:return 45;
break;
case 63:return 84;
break;
case 64:return 46;
break;
case 65:return 47;
break;
case 66:return 48;
break;
case 67:return 49;
break;
case 68:return 127;
break;
case 69: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 51; 
break;
case 70: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 52; 
break;
case 71:return 50;
break;
case 72:return 36;
break;
case 73:return 5;
break;
case 74:
  const er = new error_1.Error({ numero: errores_1.Errores.getInstance().getError_L(), tipo: 'lexico', descripcion: `El valor "${yy_.yytext}" no es valido`,  linea: `${yy_.yylineno + 1}` , columna: `${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);
  
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:number\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:return\b)/i,/^(?:null\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:break\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:new\b)/i,/^(?:elif\b)/i,/^(?:until\b)/i,/^(?:run\b)/i,/^(?:tochararray\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}